{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0},{"_id":"source/images/lahc.jpg","path":"images/lahc.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a8f3cf5fea67e465268437fd76582f454c1b1bcf","modified":1622812420074},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1622813292827},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1622813292827},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1622813292827},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1622813292828},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1622813292828},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1622813292828},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1622813292828},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1622813292828},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1622813292828},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1622813292828},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1622813292829},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1622813292829},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1622813292848},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1622813292829},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1622813292830},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1622813292829},{"_id":"source/_posts/Floyd算法.md","hash":"1edf8217c0bb7f023ca3db60e5e318aa48a1bc8d","modified":1622812420074},{"_id":"source/_posts/.DS_Store","hash":"4c375f650011b85dd304af344e80a3bab00d20b8","modified":1622812420074},{"_id":"source/_posts/Hive-SQL日常总结.md","hash":"a8ce3ab1a3a7a5b444fd883f49378815a5f6d20f","modified":1622812420075},{"_id":"source/_posts/Linux下压缩隐藏文件.md","hash":"211c3e129c6692fc421712b59b312dcee7dae0a3","modified":1622812420075},{"_id":"source/_posts/Prim算法.md","hash":"14c8af6ea5185a244679742acad113249e16d10a","modified":1622812420075},{"_id":"source/_posts/dijkstra算法.md","hash":"8edd695fbc45d1cefffbc379cbf0d5a173b3e07e","modified":1622812420075},{"_id":"source/_posts/延迟接受算法.md","hash":"765e2df5c21c8334da0edd8f4ffa8f77d956dd91","modified":1622812420075},{"_id":"source/_posts/排课程.md","hash":"e996c0f3e31e2b0f31ebb6a61966deaf85905126","modified":1622812420076},{"_id":"source/about/index.md","hash":"5caedd72e78c0eb25cc94b0663f05a74f0d8a34e","modified":1622812420076},{"_id":"source/_posts/资源均分.md","hash":"4958a1f5317e8d9c0583b7e0deb9d67130c29e9d","modified":1622812690856},{"_id":"source/categories/index.md","hash":"e2368480d2b74efe2773a3edcf6bf6b9ba7a48f2","modified":1622812420076},{"_id":"source/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1622812420076},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1622813292827},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1622813292827},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1622813292827},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1622813292828},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1622813292832},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1622813292846},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1622813292846},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1622813292847},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1622813292847},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1622813292848},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1622813292848},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1622813292846},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1622813292830},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1622813292830},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1622813292830},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1622813292830},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1622813292830},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1622813292830},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1622813292830},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1622813292831},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1622813292831},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1622813292831},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1622813292831},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1622813292831},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1622813292831},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1622813292831},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1622813292831},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1622813292832},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1622813292848},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1622813292849},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1622813292950},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1622813292950},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1622813292950},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292878},{"_id":"source/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1622812420077},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1622813292832},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1622813292832},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1622813292832},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1622813292832},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1622813292833},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1622813292833},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1622813292833},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1622813292833},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1622813292837},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1622813292837},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1622813292834},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1622813292834},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1622813292838},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1622813292834},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1622813292835},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1622813292835},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1622813292835},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1622813292835},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1622813292843},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1622813292843},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1622813292844},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1622813292844},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1622813292843},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1622813292844},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1622813292844},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1622813292850},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1622813292850},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1622813292850},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1622813292850},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1622813292851},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1622813292851},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1622813292851},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1622813292851},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1622813292851},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1622813292878},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1622813292878},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1622813292879},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1622813292879},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1622813292879},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1622813292880},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1622813292880},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1622813292881},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1622813292880},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1622813292880},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1622813292882},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1622813292884},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1622813292881},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1622813292884},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1622813292885},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1622813292885},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1622813292885},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1622813292885},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1622813292885},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292838},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292838},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292877},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292878},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292870},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292870},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622813292870},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1622813292838},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1622813292838},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1622813292837},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1622813292834},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1622813292834},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1622813292835},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1622813292836},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1622813292836},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1622813292836},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1622813292836},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1622813292837},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1622813292838},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1622813292837},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1622813292839},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1622813292839},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1622813292839},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1622813292839},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1622813292840},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1622813292840},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1622813292840},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1622813292840},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1622813292840},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1622813292841},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1622813292841},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1622813292841},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1622813292841},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1622813292841},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1622813292842},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1622813292842},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1622813292842},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1622813292842},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1622813292842},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1622813292843},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1622813292843},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1622813292845},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1622813292846},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1622813292845},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1622813292845},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1622813292877},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1622813292877},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1622813292877},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1622813292878},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1622813292869},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1622813292870},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1622813292870},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1622813292870},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1622813292886},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1622813292886},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1622813292886},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1622813292887},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1622813292887},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1622813292887},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1622813292887},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1622813292888},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1622813292888},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1622813292889},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1622813292889},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1622813292907},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1622813292906},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1622813292900},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1622813292907},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1622813292907},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1622813292913},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1622813292913},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1622813292914},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1622813292916},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1622813292916},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1622813292914},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1622813292917},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1622813292917},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1622813292917},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1622813292936},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1622813292936},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1622813292934},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1622813292936},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1622813292936},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1622813292937},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1622813292937},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1622813292938},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1622813292938},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1622813292938},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1622813292938},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1622813292939},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1622813292939},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1622813292939},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1622813292939},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1622813292939},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1622813292939},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1622813292940},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1622813292940},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1622813292940},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1622813292940},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1622813292940},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1622813292940},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1622813292941},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1622813292942},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1622813292941},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1622813292942},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1622813292947},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1622813292947},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1622813292949},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1622813292950},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1622813292949},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1622813292935},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1622813292845},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1622813292845},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1622813292852},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1622813292852},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1622813292852},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1622813292853},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1622813292853},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1622813292858},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1622813292863},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1622813292868},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1622813292868},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1622813292868},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1622813292869},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1622813292868},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1622813292869},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1622813292869},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1622813292872},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1622813292871},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1622813292873},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1622813292873},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1622813292872},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1622813292873},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1622813292873},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1622813292873},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1622813292875},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1622813292874},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1622813292875},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1622813292875},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1622813292876},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1622813292875},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1622813292876},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1622813292876},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1622813292876},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1622813292876},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1622813292877},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1622813292888},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1622813292897},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1622813292899},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1622813292899},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1622813292907},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1622813292908},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1622813292909},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1622813292909},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1622813292908},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1622813292909},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1622813292912},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1622813292912},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1622813292913},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1622813292916},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1622813292915},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1622813292919},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1622813292919},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1622813292946},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1622813292947},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1622813292898},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1622813292920},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1622813292934},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1622813292933},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1622813292949},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1622813292854},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1622813292853},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1622813292854},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1622813292854},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1622813292854},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1622813292857},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1622813292856},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1622813292854},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1622813292857},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1622813292857},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1622813292855},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1622813292858},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1622813292855},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1622813292855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1622813292861},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1622813292861},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1622813292861},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1622813292862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1622813292861},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1622813292862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1622813292862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1622813292862},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1622813292863},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1622813292862},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1622813292858},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1622813292858},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1622813292858},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1622813292858},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1622813292859},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1622813292859},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1622813292859},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1622813292859},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1622813292859},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1622813292860},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1622813292860},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1622813292860},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1622813292860},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1622813292860},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1622813292860},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1622813292863},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1622813292863},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1622813292864},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1622813292863},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1622813292864},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1622813292864},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1622813292865},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1622813292865},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1622813292865},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1622813292865},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1622813292866},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1622813292866},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1622813292866},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1622813292866},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1622813292867},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1622813292866},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1622813292867},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1622813292867},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1622813292867},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1622813292874},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1622813292874},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1622813292875},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1622813292890},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1622813292890},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1622813292891},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1622813292892},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1622813292892},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1622813292910},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1622813292910},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1622813292910},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1622813292911},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1622813292910},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1622813292911},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1622813292922},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1622813292925},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1622813292931},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1622813292906},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1622813292929},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1622813292946},{"_id":"public/about/index.html","hash":"a180f64aea21067696f482cbea31832a841ad0d2","modified":1622814942284},{"_id":"public/categories/index.html","hash":"a3936920298c337b4dfc4044f816c533186aa06f","modified":1622814942284},{"_id":"public/2021/06/04/资源均分/index.html","hash":"fa7d98282aa3cb93b5d48a7ea31cd09e02fb3171","modified":1622814942284},{"_id":"public/archives/index.html","hash":"30611d8048e20c1e63b2ed83876f398c01139bf7","modified":1622814942284},{"_id":"public/archives/2020/07/index.html","hash":"4c538fed2caf1fe92eb5d9fb3db7bea8a53c4de9","modified":1622814942284},{"_id":"public/archives/2020/05/index.html","hash":"f6a4d195bf77ebd3e02d0f2429beabc9864adb00","modified":1622814942284},{"_id":"public/archives/2021/index.html","hash":"a291e0b3eaefa8e05e7c7987a2b8171cf193e597","modified":1622814942284},{"_id":"public/archives/2021/01/index.html","hash":"c558505cb82685f0fd6c5101a40cdc3f04b15b2e","modified":1622814942284},{"_id":"public/archives/2020/index.html","hash":"b9ea7f1985dc2182de26c46d5327aa1b8f8a1e7e","modified":1622814942284},{"_id":"public/archives/2021/04/index.html","hash":"6746b81f1d2df91a5977ee5327768a46f0febd2c","modified":1622814942284},{"_id":"public/archives/2021/06/index.html","hash":"bf7c91fcbca6241a884f5a007c8575f9ab9864a1","modified":1622814942284},{"_id":"public/categories/算法/index.html","hash":"7abc4dd84162875fb3ca25b43ee9b8380a459bda","modified":1622814942284},{"_id":"public/categories/SQL/index.html","hash":"adebf2600608c4b4dbc584ba170613be97df8e54","modified":1622814942284},{"_id":"public/categories/Linux/index.html","hash":"dc4aefd88cef0133331eeee65776bd2cd1c99fc1","modified":1622814942284},{"_id":"public/categories/leetcode/index.html","hash":"6125d046e4f4a1b03709275ed5f067f0eda79095","modified":1622814942284},{"_id":"public/tags/floyd/index.html","hash":"e022aa52099d059f7b09e688d4c6862f67daa013","modified":1622814942284},{"_id":"public/tags/late-acceptance/index.html","hash":"d654e0bd39931a2f3d4e25bbf6d6b9c415ae38a1","modified":1622814942284},{"_id":"public/tags/prim/index.html","hash":"e362dcd7a406af63ffd61b92833e75f9727b08f1","modified":1622814942284},{"_id":"public/tags/alogithm/index.html","hash":"587eca5a35cf75a437073cfb9139efd65bbe4610","modified":1622814942284},{"_id":"public/tags/资源均分/index.html","hash":"e2953107584e2a80b90f9dccb4ae5ce504f5f083","modified":1622814942284},{"_id":"public/2021/04/11/Prim算法/index.html","hash":"7321102f373fd959912018e30d427da5d7c7e565","modified":1622814942284},{"_id":"public/2021/04/11/Floyd算法/index.html","hash":"f1333a15bfd56f228204f0149f6de5ab51e9fa36","modified":1622814942284},{"_id":"public/2021/01/10/排课程/index.html","hash":"c78e016871c4289172faaa47bc59d516e5cfb901","modified":1622814942284},{"_id":"public/2020/07/18/延迟接受算法/index.html","hash":"6bd9aeb865fa71530fbb9a7702340da0f6fccc18","modified":1622814942284},{"_id":"public/2020/07/05/dijkstra算法/index.html","hash":"2c107c3abebde8ceb569cb0bd481ff836db961c0","modified":1622814942284},{"_id":"public/2020/05/16/Hive-SQL日常总结/index.html","hash":"c988b08b85e796a27fc3c8b33f6654c4131b21d4","modified":1622814942284},{"_id":"public/2020/05/03/Linux下压缩隐藏文件/index.html","hash":"a3236fd0f2ada61423f3645a916658f92c7e1d25","modified":1622814942284},{"_id":"public/index.html","hash":"674a4e996a8abaa445a3d4c4dbe74dc317a1d382","modified":1622814942284},{"_id":"public/tags/dijkstra/index.html","hash":"cdd20e04257d3e00d2df693f5d1e298df11eacae","modified":1622814942284},{"_id":"public/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1622814942284},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1622814942284},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1622814942284},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1622814942284},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1622814942284},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1622814942284},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1622814942284},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1622814942284},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1622814942284},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1622814942284},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1622814942284},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1622814942284},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1622814942284},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1622814942284},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1622814942284},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1622814942284},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1622814942284},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1622814942284},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1622814942284},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1622814942284},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1622814942284},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1622814942284},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1622814942284},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1622814942284},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1622814942284},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1622814942284},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1622814942284},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1622814942284},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1622814942284},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1622814942284},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1622814942284},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1622814942284},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1622814942284},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1622814942284},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1622814942284},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1622814942284},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1622814942284},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1622814942284},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1622814942284},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1622814942284},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1622814942284},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1622814942284},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1622814942284},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1622814942284},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1622814942284},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1622814942284},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1622814942284},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1622814942284},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1622814942284},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1622814942284},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1622814942284},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1622814942284},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1622814942284},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1622814942284},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1622814942284},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1622814942284},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1622814942284},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1622814942284},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1622814942284},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1622814942284},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1622814942284},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1622814942284},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1622814942284},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1622814942284},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1622814942284},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1622814942284},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1622814942284},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1622814942284},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1622814942284},{"_id":"public/lib/fastclick/README.html","hash":"7caacb648dadb33d60f8eb515b0c9f5e7422831f","modified":1622814942284},{"_id":"public/lib/jquery_lazyload/README.html","hash":"fd960c31c8cfe7596f3064aef5a0551cda49eab5","modified":1622814942284},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"d93ee404d9fdf816d07f77c002ba43a716760350","modified":1622814942284},{"_id":"public/css/main.css","hash":"68fa05afe1d72bc365d68d1c9534489f920a9eb6","modified":1622814942284},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1622814942284},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1622814942284},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1622814942284},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1622814942284},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1622814942284},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1622814942284},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1622814942284},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1622814942284},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1622814942284},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1622814942284},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1622814942284},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1622814942284},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1622814942284},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1622814942284},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1622814942284},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1622814942284},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1622814942284},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1622814942284},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1622814942284},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1622814942284},{"_id":"public/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1622814942284},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1622814942284},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1622814942284},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1622814942284},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1622814942284},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1622814942284}],"Category":[{"name":"算法","_id":"ckpie47sx0004kus651mi0mdw"},{"name":"SQL","_id":"ckpie47t20009kus64755gqkh"},{"name":"Linux","_id":"ckpie47t6000fkus69db748gj"},{"name":"leetcode","_id":"ckpie47t9000lkus686fk50n3"}],"Data":[],"Page":[{"title":"about","date":"2020-05-03T08:39:31.000Z","name":"silencemao","email":"silencekxm@gmail.com","_content":"\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","source":"about/index.md","raw":"\ntitle: about\ndate: 2020-05-03 16:39:31\nname: silencemao\nemail: silencekxm@gmail.com\n---\n\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","updated":"2021-06-04T13:13:40.076Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckpie47su0001kus6dz204v4m","content":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: silencekxm@gmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: silencekxm@gmail.com</p>\n"},{"title":"categories","date":"2020-05-03T09:01:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-05-03 17:01:42\ntype: \"categories\"\n---\n","updated":"2021-06-04T13:13:40.076Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckpie47sx0003kus642n05mzl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Floyd算法","mathjax":true,"date":"2021-04-11T02:54:52.000Z","_content":"\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","source":"_posts/Floyd算法.md","raw":"---\ntitle: Floyd算法\nmathjax: true\ndate: 2021-04-11 10:54:52\ncategories: 算法\ntags: floyd\n---\n\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","slug":"Floyd算法","published":1,"updated":"2021-06-04T13:13:40.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47sp0000kus6d7sz2ugb","content":"<h2 id=\"Floyd-算法\"><a href=\"#Floyd-算法\" class=\"headerlink\" title=\"Floyd 算法\"></a>Floyd 算法</h2><p>&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>\n<a id=\"more\"></a>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;&ensp;代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Floyd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttTwoPointDis [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttPath        [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">Init</span><span class=\"params\">(tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tf.tTwoPointDis = tDis</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(tDis)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.tPath = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> f.tPath &#123;</span><br><span class=\"line\">\t\tf.tPath[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\tf.tPath[i][j] = <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"before\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(f.tTwoPointDis)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; r; k++ &#123; <span class=\"comment\">// 媒介</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tf.tPath[i][j] = k <span class=\"comment\">// 记录媒介</span></span><br><span class=\"line\">\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"after\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i != j &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(f.getPath(i, j))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">getPath</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123; <span class=\"comment\">// 打印路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f.tPath[i][j] == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\" \"</span> + strconv.Itoa(i) + <span class=\"string\">\" \"</span> + strconv.Itoa(j)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tk := f.tPath[i][j]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf := <span class=\"built_in\">new</span>(Floyd)</span><br><span class=\"line\">\tf.Init(tDis)</span><br><span class=\"line\">\tf.solve()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Floyd-算法\"><a href=\"#Floyd-算法\" class=\"headerlink\" title=\"Floyd 算法\"></a>Floyd 算法</h2><p>&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;&ensp;代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Floyd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttTwoPointDis [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttPath        [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">Init</span><span class=\"params\">(tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tf.tTwoPointDis = tDis</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(tDis)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.tPath = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> f.tPath &#123;</span><br><span class=\"line\">\t\tf.tPath[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\tf.tPath[i][j] = <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"before\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(f.tTwoPointDis)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; r; k++ &#123; <span class=\"comment\">// 媒介</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tf.tPath[i][j] = k <span class=\"comment\">// 记录媒介</span></span><br><span class=\"line\">\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"after\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i != j &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(f.getPath(i, j))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">getPath</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123; <span class=\"comment\">// 打印路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f.tPath[i][j] == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\" \"</span> + strconv.Itoa(i) + <span class=\"string\">\" \"</span> + strconv.Itoa(j)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tk := f.tPath[i][j]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf := <span class=\"built_in\">new</span>(Floyd)</span><br><span class=\"line\">\tf.Init(tDis)</span><br><span class=\"line\">\tf.solve()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>"},{"title":"Hive/SQL日常总结","date":"2020-05-16T01:39:36.000Z","_content":"\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n## 5、删除文件\n\n### 1、删除文件\n\n```shell\nhadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx\n\n```\n\n上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息\n\n```shell\nhadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx\n```\n\n### 2、删除分区\n\n```shell\nalter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);\n\n```\n\n上述命令需要在hive客户端中执行。","source":"_posts/Hive-SQL日常总结.md","raw":"---\ntitle: Hive/SQL日常总结\ndate: 2020-05-16 09:39:36\ncategories: SQL\ntags:\n---\n\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n## 5、删除文件\n\n### 1、删除文件\n\n```shell\nhadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx\n\n```\n\n上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息\n\n```shell\nhadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx\n```\n\n### 2、删除分区\n\n```shell\nalter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);\n\n```\n\n上述命令需要在hive客户端中执行。","slug":"Hive-SQL日常总结","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47sv0002kus6ga9l4vr7","content":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>\n<a id=\"more\"></a>\n<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xx1</td>\n<td style=\"text-align:center\">Tom</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xx2</td>\n<td style=\"text-align:center\">Jone</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对t1进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t1 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">对t2进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t2 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">使用t1 inner join t2</span><br><span class=\"line\"><span class=\"keyword\">select</span> * </span><br><span class=\"line\">  (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">  <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp1</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">   (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">    <span class=\"keyword\">from</span> t2 </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp2</span><br><span class=\"line\"> <span class=\"keyword\">on</span> tmp1.id=tmp2.id <span class=\"keyword\">and</span> tmp1.name=tmp2.name;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1</span><br><span class=\"line\"><span class=\"keyword\">minus</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2</span><br><span class=\"line\"><span class=\"keyword\">minus</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"2、分区表增加新的字段\"><a href=\"#2、分区表增加新的字段\" class=\"headerlink\" title=\"2、分区表增加新的字段\"></a>2、分区表增加新的字段</h2><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_nam <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>) <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Insert</span> overwrite <span class=\"keyword\">table</span> table_name <span class=\"keyword\">partition</span>(dt=’t’)</span><br><span class=\"line\">       <span class=\"keyword\">Select</span> col1, col2, col2,….</span><br><span class=\"line\">       <span class=\"keyword\">From</span> table_name</span><br><span class=\"line\">       <span class=\"keyword\">Where</span> dt=’t<span class=\"number\">-1</span>’</span><br></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>    <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    hobby   <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">add</span>     <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span></span><br><span class=\"line\"><span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">','</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">'-'</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">':'</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">'/user/hive/warehouse/...data'</span> overwrite <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> t1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1</span><br><span class=\"line\"><span class=\"keyword\">like</span> t2;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、删除文件\"><a href=\"#5、删除文件\" class=\"headerlink\" title=\"5、删除文件\"></a>5、删除文件</h2><h3 id=\"1、删除文件\"><a href=\"#1、删除文件\" class=\"headerlink\" title=\"1、删除文件\"></a>1、删除文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx</span><br></pre></td></tr></table></figure>\n<p>上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、删除分区\"><a href=\"#2、删除分区\" class=\"headerlink\" title=\"2、删除分区\"></a>2、删除分区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);</span><br></pre></td></tr></table></figure>\n<p>上述命令需要在hive客户端中执行。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>","more":"<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xx1</td>\n<td style=\"text-align:center\">Tom</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xx2</td>\n<td style=\"text-align:center\">Jone</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对t1进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t1 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">对t2进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t2 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">使用t1 inner join t2</span><br><span class=\"line\"><span class=\"keyword\">select</span> * </span><br><span class=\"line\">  (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">  <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp1</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">   (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">    <span class=\"keyword\">from</span> t2 </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp2</span><br><span class=\"line\"> <span class=\"keyword\">on</span> tmp1.id=tmp2.id <span class=\"keyword\">and</span> tmp1.name=tmp2.name;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1</span><br><span class=\"line\"><span class=\"keyword\">minus</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2</span><br><span class=\"line\"><span class=\"keyword\">minus</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"2、分区表增加新的字段\"><a href=\"#2、分区表增加新的字段\" class=\"headerlink\" title=\"2、分区表增加新的字段\"></a>2、分区表增加新的字段</h2><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_nam <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>) <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Insert</span> overwrite <span class=\"keyword\">table</span> table_name <span class=\"keyword\">partition</span>(dt=’t’)</span><br><span class=\"line\">       <span class=\"keyword\">Select</span> col1, col2, col2,….</span><br><span class=\"line\">       <span class=\"keyword\">From</span> table_name</span><br><span class=\"line\">       <span class=\"keyword\">Where</span> dt=’t<span class=\"number\">-1</span>’</span><br></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>    <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    hobby   <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">add</span>     <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span></span><br><span class=\"line\"><span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">','</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">'-'</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">':'</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">'/user/hive/warehouse/...data'</span> overwrite <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> t1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1</span><br><span class=\"line\"><span class=\"keyword\">like</span> t2;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、删除文件\"><a href=\"#5、删除文件\" class=\"headerlink\" title=\"5、删除文件\"></a>5、删除文件</h2><h3 id=\"1、删除文件\"><a href=\"#1、删除文件\" class=\"headerlink\" title=\"1、删除文件\"></a>1、删除文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx</span><br></pre></td></tr></table></figure>\n<p>上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、删除分区\"><a href=\"#2、删除分区\" class=\"headerlink\" title=\"2、删除分区\"></a>2、删除分区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);</span><br></pre></td></tr></table></figure>\n<p>上述命令需要在hive客户端中执行。</p>"},{"title":"Linux下压缩隐藏文件","date":"2020-05-03T10:28:53.000Z","_content":"\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","source":"_posts/Linux下压缩隐藏文件.md","raw":"---\ntitle: Linux下压缩隐藏文件\ndate: 2020-05-03 18:28:53\ncategories: Linux\ntags:\n---\n\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","slug":"Linux下压缩隐藏文件","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47sz0006kus6210y9tws","content":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz abc/*   // 压缩</span><br><span class=\"line\">tar zxvf abc.tar.gz         // 解压</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>\n<a id=\"more\"></a>\n<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *</span><br></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”</span><br></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件</span><br></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz abc/*   // 压缩</span><br><span class=\"line\">tar zxvf abc.tar.gz         // 解压</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>","more":"<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *</span><br></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”</span><br></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件</span><br></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>"},{"title":"Prim算法","mathjax":true,"date":"2021-04-11T08:17:50.000Z","caytegories":"算法","_content":"\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","source":"_posts/Prim算法.md","raw":"---\ntitle: Prim算法\nmathjax: true\ndate: 2021-04-11 16:17:50\ncaytegories: 算法\ntags: prim\n---\n\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","slug":"Prim算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47t10007kus6bfzfc1ki","content":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><p>&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持”连通性”的前提下的最小子图，子图各个边的权重之和最小。</p>\n<a id=\"more\"></a>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3><p>&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将$u_k$从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  m := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">  V := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> U []<span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; m<span class=\"number\">-1</span>; k++ &#123;</span><br><span class=\"line\">    min := <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    ind1, ind2 := <span class=\"number\">-1</span>, <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> V &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> U &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;</span><br><span class=\"line\">          min = matrix[V[i]][U[j]]</span><br><span class=\"line\">          ind1, ind2 = i, j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(V[ind1], U[ind2], min)</span><br><span class=\"line\">    V = <span class=\"built_in\">append</span>(V, U[ind2])</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U[:ind2], U[ind2+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  matrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prim(matrix)</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  prim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim1</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">\tdis := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\tdis[i] = matrix[<span class=\"number\">0</span>][i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatus := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">bool</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m<span class=\"number\">-1</span>; i++ &#123; <span class=\"comment\">// 需要找剩余的点</span></span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123; <span class=\"comment\">// 每次遍历剩余的所有点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dis[t] &gt; dis[j]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres += dis[t]</span><br><span class=\"line\">\t\tfmt.Println(i, t, dis[t])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;</span><br><span class=\"line\">\t\t\t\tdis[j] = matrix[t][j]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstatus[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmatrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprim(matrix)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">\tprim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><p>&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持”连通性”的前提下的最小子图，子图各个边的权重之和最小。</p>","more":"<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3><p>&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将$u_k$从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  m := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">  V := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> U []<span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; m<span class=\"number\">-1</span>; k++ &#123;</span><br><span class=\"line\">    min := <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    ind1, ind2 := <span class=\"number\">-1</span>, <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> V &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> U &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;</span><br><span class=\"line\">          min = matrix[V[i]][U[j]]</span><br><span class=\"line\">          ind1, ind2 = i, j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(V[ind1], U[ind2], min)</span><br><span class=\"line\">    V = <span class=\"built_in\">append</span>(V, U[ind2])</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U[:ind2], U[ind2+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  matrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prim(matrix)</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  prim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim1</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">\tdis := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\tdis[i] = matrix[<span class=\"number\">0</span>][i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatus := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">bool</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m<span class=\"number\">-1</span>; i++ &#123; <span class=\"comment\">// 需要找剩余的点</span></span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123; <span class=\"comment\">// 每次遍历剩余的所有点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dis[t] &gt; dis[j]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres += dis[t]</span><br><span class=\"line\">\t\tfmt.Println(i, t, dis[t])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;</span><br><span class=\"line\">\t\t\t\tdis[j] = matrix[t][j]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstatus[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmatrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprim(matrix)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">\tprim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"延迟接受算法","mathjax":true,"date":"2020-07-18T06:17:59.000Z","_content":"\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","source":"_posts/延迟接受算法.md","raw":"---\ntitle: 延迟接受算法\nmathjax: true\ndate: 2020-07-18 14:17:59\ncategories: 算法\ntags: late acceptance\n---\n\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","slug":"延迟接受算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47t20008kus6fp9nfnuc","content":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\" target=\"_blank\" rel=\"noopener\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"TSP/ioinfo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"TSP/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LateAcceptance <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tn       <span class=\"keyword\">int</span></span><br><span class=\"line\">\ttScore []<span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Init</span><span class=\"params\">(n <span class=\"keyword\">int</span>, pStartScore <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tl.n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l.n; i++ &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pStartScore)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Accept</span><span class=\"params\">(pScore <span class=\"keyword\">float64</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pAccept <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pAccept &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pScore)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l.tScore) &gt;= l.n &#123;</span><br><span class=\"line\">\t\tl.tScore = l.tScore[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pAccept</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changCity1</span><span class=\"params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"title\">ioinfo</span>.<span class=\"title\">Data</span></span> &#123;</span><br><span class=\"line\">\tpos1 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)<span class=\"number\">-3</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">\tpos2 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)-pos1<span class=\"number\">-1</span>) + pos1</span><br><span class=\"line\">\tdataDest := <span class=\"built_in\">make</span>([]ioinfo.Data, <span class=\"built_in\">len</span>(dataSrc))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dataDest, dataSrc)</span><br><span class=\"line\">\tr := R1.Intn(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pos1 &lt; pos2 &#123;</span><br><span class=\"line\">\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t\t\tpos1 ++</span><br><span class=\"line\">\t\t\tpos2 --</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataDest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">La</span><span class=\"params\">(pFileName <span class=\"keyword\">string</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\tdata := util.GetSampleData(pFileName, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\tr := util.GetResult(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpLa := <span class=\"built_in\">new</span>(LateAcceptance)</span><br><span class=\"line\">\tpLa.Init(<span class=\"number\">215</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := time.Now().UnixNano()</span><br><span class=\"line\">\tpIterNum := <span class=\"number\">200000</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> pIterNum &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttemp := changCity1(data, *R1)</span><br><span class=\"line\">\t\trn := util.GetResult(temp)  <span class=\"comment\">// 计算当前解的里程 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pLa.Accept(rn) &#123;</span><br><span class=\"line\">\t\t\tdata = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIterNum--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts2 := time.Now().UnixNano()</span><br><span class=\"line\">\tfmt.Println(data, s2 -s1)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> util.GetResult(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟接受启动：</span><br><span class=\"line\">[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns</span><br><span class=\"line\">588.1953208548182</span><br></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\" target=\"_blank\" rel=\"noopener\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"TSP/ioinfo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"TSP/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LateAcceptance <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tn       <span class=\"keyword\">int</span></span><br><span class=\"line\">\ttScore []<span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Init</span><span class=\"params\">(n <span class=\"keyword\">int</span>, pStartScore <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tl.n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l.n; i++ &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pStartScore)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Accept</span><span class=\"params\">(pScore <span class=\"keyword\">float64</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pAccept <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pAccept &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pScore)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l.tScore) &gt;= l.n &#123;</span><br><span class=\"line\">\t\tl.tScore = l.tScore[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pAccept</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changCity1</span><span class=\"params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"title\">ioinfo</span>.<span class=\"title\">Data</span></span> &#123;</span><br><span class=\"line\">\tpos1 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)<span class=\"number\">-3</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">\tpos2 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)-pos1<span class=\"number\">-1</span>) + pos1</span><br><span class=\"line\">\tdataDest := <span class=\"built_in\">make</span>([]ioinfo.Data, <span class=\"built_in\">len</span>(dataSrc))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dataDest, dataSrc)</span><br><span class=\"line\">\tr := R1.Intn(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pos1 &lt; pos2 &#123;</span><br><span class=\"line\">\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t\t\tpos1 ++</span><br><span class=\"line\">\t\t\tpos2 --</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataDest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">La</span><span class=\"params\">(pFileName <span class=\"keyword\">string</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\tdata := util.GetSampleData(pFileName, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\tr := util.GetResult(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpLa := <span class=\"built_in\">new</span>(LateAcceptance)</span><br><span class=\"line\">\tpLa.Init(<span class=\"number\">215</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := time.Now().UnixNano()</span><br><span class=\"line\">\tpIterNum := <span class=\"number\">200000</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> pIterNum &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttemp := changCity1(data, *R1)</span><br><span class=\"line\">\t\trn := util.GetResult(temp)  <span class=\"comment\">// 计算当前解的里程 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pLa.Accept(rn) &#123;</span><br><span class=\"line\">\t\t\tdata = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIterNum--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts2 := time.Now().UnixNano()</span><br><span class=\"line\">\tfmt.Println(data, s2 -s1)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> util.GetResult(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟接受启动：</span><br><span class=\"line\">[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns</span><br><span class=\"line\">588.1953208548182</span><br></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>"},{"title":"排课程","date":"2021-01-10T08:18:59.000Z","_content":"\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","source":"_posts/排课程.md","raw":"---\ntitle: 排课程\ndate: 2021-01-10 16:18:59\ncategories: leetcode\ntags: alogithm\n---\n\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","slug":"排课程","published":1,"updated":"2021-06-04T13:13:40.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47t4000ckus68i6q2ooc","content":"<h2 id=\"排课程\"><a href=\"#排课程\" class=\"headerlink\" title=\"排课程\"></a>排课程</h2><p>&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>&emsp;&emsp;题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>&emsp;&emsp;There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>&emsp;&emsp;Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canFinish</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites)) <span class=\"comment\">// 建立图 </span></span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)  <span class=\"comment\">// 记录出度</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, a := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[a[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[a[<span class=\"number\">1</span>]], a[<span class=\"number\">0</span>]) <span class=\"comment\">// key为先学的课程</span></span><br><span class=\"line\">\t\tin[a[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"comment\">// 出度为0的课程加入队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123; <span class=\"comment\">// 与其相关课程的出度减一</span></span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 若出度为0，加入队列</span></span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pre != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourses := <span class=\"number\">2</span></span><br><span class=\"line\">\tprerequisite := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(canFinish(numCourses, prerequisite))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">1</span>]], pre[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\tin[pre[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, front) <span class=\"comment\">// 将课程编号加入到结果中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123;</span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(res) == numCourses &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder1</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">0</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">0</span>]], pre[<span class=\"number\">1</span>]) <span class=\"comment\">// key为后学的课程</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvisited := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfsFindOrder</span><span class=\"params\">(graph <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, visited *[]<span class=\"keyword\">int</span>, i <span class=\"keyword\">int</span>, res *[]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">len</span>(graph[i]); k++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*res = <span class=\"built_in\">append</span>(*res, i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourse := <span class=\"number\">4</span></span><br><span class=\"line\">\tprerequisites := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(findOrder(numCourse, prerequisites))</span><br><span class=\"line\">\tfmt.Println(findOrder1(numCourse, prerequisites))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"排课程\"><a href=\"#排课程\" class=\"headerlink\" title=\"排课程\"></a>排课程</h2><p>&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>&emsp;&emsp;题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>&emsp;&emsp;There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>","more":"<p>&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>&emsp;&emsp;Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canFinish</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites)) <span class=\"comment\">// 建立图 </span></span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)  <span class=\"comment\">// 记录出度</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, a := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[a[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[a[<span class=\"number\">1</span>]], a[<span class=\"number\">0</span>]) <span class=\"comment\">// key为先学的课程</span></span><br><span class=\"line\">\t\tin[a[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"comment\">// 出度为0的课程加入队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123; <span class=\"comment\">// 与其相关课程的出度减一</span></span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 若出度为0，加入队列</span></span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pre != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourses := <span class=\"number\">2</span></span><br><span class=\"line\">\tprerequisite := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(canFinish(numCourses, prerequisite))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">1</span>]], pre[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\tin[pre[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, front) <span class=\"comment\">// 将课程编号加入到结果中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123;</span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(res) == numCourses &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder1</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">0</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">0</span>]], pre[<span class=\"number\">1</span>]) <span class=\"comment\">// key为后学的课程</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvisited := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfsFindOrder</span><span class=\"params\">(graph <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, visited *[]<span class=\"keyword\">int</span>, i <span class=\"keyword\">int</span>, res *[]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">len</span>(graph[i]); k++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*res = <span class=\"built_in\">append</span>(*res, i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourse := <span class=\"number\">4</span></span><br><span class=\"line\">\tprerequisites := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(findOrder(numCourse, prerequisites))</span><br><span class=\"line\">\tfmt.Println(findOrder1(numCourse, prerequisites))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>"},{"title":"资源均分","date":"2021-06-04T13:16:20.000Z","_content":"\n## 资源均分\n\n","source":"_posts/资源均分.md","raw":"---\ntitle: 资源均分\ndate: 2021-06-04 21:16:20\ncategories: 算法\ntags: 资源均分\n---\n\n## 资源均分\n\n","slug":"资源均分","published":1,"updated":"2021-06-04T13:18:10.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47t6000dkus634h13dlh","content":"<h2 id=\"资源均分\"><a href=\"#资源均分\" class=\"headerlink\" title=\"资源均分\"></a>资源均分</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"资源均分\"><a href=\"#资源均分\" class=\"headerlink\" title=\"资源均分\"></a>资源均分</h2>"},{"title":"dijkstra算法","mathjax":true,"date":"2020-07-05T08:07:53.000Z","_content":"\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","source":"_posts/dijkstra算法.md","raw":"---\ntitle: dijkstra算法\nmathjax: true\ndate: 2020-07-05 16:07:53\ncategories: 算法\ntags: dijkstra\n---\n\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","slug":"dijkstra算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpie47t7000gkus63t6n6cke","content":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>\n<a id=\"more\"></a>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tMaxDis  <span class=\"keyword\">int</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span><span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dijkstra <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttPints  []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ttTwoPointDis <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">Init</span><span class=\"params\">(tPoints []<span class=\"keyword\">string</span>, tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tPoints) != <span class=\"built_in\">len</span>(tDis) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"点数与矩阵的大小不一致\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tTwoPointDis = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(tPoints); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(tPoints); j++ &#123;</span><br><span class=\"line\">\t\t\tkey := tPoints[i] + <span class=\"string\">\"_\"</span> + tPoints[j]</span><br><span class=\"line\">\t\t\td.tTwoPointDis[key] = tDis[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tPints = tPoints</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttPoints := d.tPints[<span class=\"number\">1</span>:]                  <span class=\"comment\">// 未访问过的点</span></span><br><span class=\"line\">\tvisited := []<span class=\"keyword\">string</span>&#123;d.tPints[<span class=\"number\">0</span>]&#125;         <span class=\"comment\">// 访问过的点</span></span><br><span class=\"line\">\tsrc := d.tPints[<span class=\"number\">0</span>]                       <span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tpre, next := src, src</span><br><span class=\"line\"></span><br><span class=\"line\">\tpath := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 起点到其它点的路径</span></span><br><span class=\"line\">\tpath[src + <span class=\"string\">\"_\"</span> + src] = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdistanceGraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 起点到其它点的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(tPoints) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdistance := MaxDis</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ind <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dst <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> nextInd <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> visited &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ind, dst = <span class=\"keyword\">range</span> tPoints &#123;</span><br><span class=\"line\">\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + v] + d.tTwoPointDis[v + <span class=\"string\">\"_\"</span> + dst]  <span class=\"comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> newDis &lt; distance &#123;</span><br><span class=\"line\">\t\t\t\t\tdistance = newDis</span><br><span class=\"line\">\t\t\t\t\tpre = v</span><br><span class=\"line\">\t\t\t\t\tnext = dst</span><br><span class=\"line\">\t\t\t\t\tnextInd = ind</span><br><span class=\"line\">\t\t\t\t\td.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + dst] = distance</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tPoint := <span class=\"keyword\">range</span> path[src + <span class=\"string\">\"_\"</span> + pre] &#123;</span><br><span class=\"line\">\t\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], tPoint)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], next)  <span class=\"comment\">// 记录从src到next需经过的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdistanceGraph[src + <span class=\"string\">\"_\"</span> + next] = distance                     <span class=\"comment\">// 记录从src到next的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvisited = <span class=\"built_in\">append</span>(visited, next)</span><br><span class=\"line\">\t\ttPoints = <span class=\"built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">\tfmt.Println(distanceGraph)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td := <span class=\"built_in\">new</span>(Dijkstra)</span><br><span class=\"line\">\ttPoints := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>&#125;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>,      <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\td.Init(tPoints, tDis)</span><br><span class=\"line\">\td.dijkstra()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tMaxDis  <span class=\"keyword\">int</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span><span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dijkstra <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttPints  []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ttTwoPointDis <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">Init</span><span class=\"params\">(tPoints []<span class=\"keyword\">string</span>, tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tPoints) != <span class=\"built_in\">len</span>(tDis) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"点数与矩阵的大小不一致\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tTwoPointDis = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(tPoints); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(tPoints); j++ &#123;</span><br><span class=\"line\">\t\t\tkey := tPoints[i] + <span class=\"string\">\"_\"</span> + tPoints[j]</span><br><span class=\"line\">\t\t\td.tTwoPointDis[key] = tDis[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tPints = tPoints</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttPoints := d.tPints[<span class=\"number\">1</span>:]                  <span class=\"comment\">// 未访问过的点</span></span><br><span class=\"line\">\tvisited := []<span class=\"keyword\">string</span>&#123;d.tPints[<span class=\"number\">0</span>]&#125;         <span class=\"comment\">// 访问过的点</span></span><br><span class=\"line\">\tsrc := d.tPints[<span class=\"number\">0</span>]                       <span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tpre, next := src, src</span><br><span class=\"line\"></span><br><span class=\"line\">\tpath := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 起点到其它点的路径</span></span><br><span class=\"line\">\tpath[src + <span class=\"string\">\"_\"</span> + src] = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdistanceGraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 起点到其它点的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(tPoints) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdistance := MaxDis</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ind <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dst <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> nextInd <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> visited &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ind, dst = <span class=\"keyword\">range</span> tPoints &#123;</span><br><span class=\"line\">\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + v] + d.tTwoPointDis[v + <span class=\"string\">\"_\"</span> + dst]  <span class=\"comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> newDis &lt; distance &#123;</span><br><span class=\"line\">\t\t\t\t\tdistance = newDis</span><br><span class=\"line\">\t\t\t\t\tpre = v</span><br><span class=\"line\">\t\t\t\t\tnext = dst</span><br><span class=\"line\">\t\t\t\t\tnextInd = ind</span><br><span class=\"line\">\t\t\t\t\td.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + dst] = distance</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tPoint := <span class=\"keyword\">range</span> path[src + <span class=\"string\">\"_\"</span> + pre] &#123;</span><br><span class=\"line\">\t\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], tPoint)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], next)  <span class=\"comment\">// 记录从src到next需经过的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdistanceGraph[src + <span class=\"string\">\"_\"</span> + next] = distance                     <span class=\"comment\">// 记录从src到next的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvisited = <span class=\"built_in\">append</span>(visited, next)</span><br><span class=\"line\">\t\ttPoints = <span class=\"built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">\tfmt.Println(distanceGraph)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td := <span class=\"built_in\">new</span>(Dijkstra)</span><br><span class=\"line\">\ttPoints := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>&#125;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>,      <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\td.Init(tPoints, tDis)</span><br><span class=\"line\">\td.dijkstra()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckpie47sp0000kus6d7sz2ugb","category_id":"ckpie47sx0004kus651mi0mdw","_id":"ckpie47t6000ekus6220x9a3c"},{"post_id":"ckpie47t20008kus6fp9nfnuc","category_id":"ckpie47sx0004kus651mi0mdw","_id":"ckpie47t8000ikus6h7xzb1jq"},{"post_id":"ckpie47sv0002kus6ga9l4vr7","category_id":"ckpie47t20009kus64755gqkh","_id":"ckpie47t9000kkus65gxlh4ea"},{"post_id":"ckpie47t6000dkus634h13dlh","category_id":"ckpie47sx0004kus651mi0mdw","_id":"ckpie47tb000nkus6eyd2fz7m"},{"post_id":"ckpie47t7000gkus63t6n6cke","category_id":"ckpie47sx0004kus651mi0mdw","_id":"ckpie47tb000pkus6ek139e89"},{"post_id":"ckpie47sz0006kus6210y9tws","category_id":"ckpie47t6000fkus69db748gj","_id":"ckpie47tc000qkus61fwegdut"},{"post_id":"ckpie47t4000ckus68i6q2ooc","category_id":"ckpie47t9000lkus686fk50n3","_id":"ckpie47td000tkus6c9u5g8yw"}],"PostTag":[{"post_id":"ckpie47sp0000kus6d7sz2ugb","tag_id":"ckpie47sz0005kus6clk1eqoq","_id":"ckpie47t4000bkus67cb5glhz"},{"post_id":"ckpie47t10007kus6bfzfc1ki","tag_id":"ckpie47t4000akus6d8umd8o6","_id":"ckpie47t8000jkus60k2a7grp"},{"post_id":"ckpie47t20008kus6fp9nfnuc","tag_id":"ckpie47t8000hkus69c2r9rv9","_id":"ckpie47tb000okus60ddr9afe"},{"post_id":"ckpie47t4000ckus68i6q2ooc","tag_id":"ckpie47ta000mkus6dhrg1vra","_id":"ckpie47td000skus6c9x9d6bv"},{"post_id":"ckpie47t6000dkus634h13dlh","tag_id":"ckpie47tc000rkus6f1v8cvq1","_id":"ckpie47td000vkus612f035ds"},{"post_id":"ckpie47t7000gkus63t6n6cke","tag_id":"ckpie47td000ukus6b5ut0gez","_id":"ckpie47te000wkus60sgq6u3b"}],"Tag":[{"name":"floyd","_id":"ckpie47sz0005kus6clk1eqoq"},{"name":"prim","_id":"ckpie47t4000akus6d8umd8o6"},{"name":"late acceptance","_id":"ckpie47t8000hkus69c2r9rv9"},{"name":"alogithm","_id":"ckpie47ta000mkus6dhrg1vra"},{"name":"资源均分","_id":"ckpie47tc000rkus6f1v8cvq1"},{"name":"dijkstra","_id":"ckpie47td000ukus6b5ut0gez"}]}}