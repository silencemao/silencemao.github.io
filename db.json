{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"source/images/lahc.jpg","path":"images/lahc.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"48e0a7b54fd64f1822b2dedbcbec58d9715bc2f7","modified":1595058374266},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1579339019096},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1579339019097},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1579339019104},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1579339019097},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1579339019105},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1579339019104},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1579339019105},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1579339019105},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1579339019112},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1579339019106},{"_id":"themes/next/_config.yml","hash":"8be70e576fe95f9803e5b91118b04bfbce605054","modified":1595058877350},{"_id":"themes/next/package.json","hash":"19dda7fab09594faba989669e29de88c4289877f","modified":1579339019134},{"_id":"source/_posts/Hive-SQL日常总结.md","hash":"57a92ff2d652e9539f2c70b9cec27a23734c0e9b","modified":1595058374266},{"_id":"source/_posts/Linux下压缩隐藏文件.md","hash":"211c3e129c6692fc421712b59b312dcee7dae0a3","modified":1595058374266},{"_id":"source/_posts/dijkstra算法.md","hash":"e181a5dfe0c9e37d62fa0f90d889bb6b588e9e3f","modified":1595058374267},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1595058374267},{"_id":"source/_posts/延迟接受算法.md","hash":"65a3b2bf84edc0276d605378c3e5bc37b1edce81","modified":1595059879891},{"_id":"source/_posts/第一篇博客.md","hash":"4990b16dd7764849d33f2118ca96a1ac6d5e6792","modified":1595058374269},{"_id":"source/categories/index.md","hash":"e2368480d2b74efe2773a3edcf6bf6b9ba7a48f2","modified":1595058374270},{"_id":"source/about/index.md","hash":"5caedd72e78c0eb25cc94b0663f05a74f0d8a34e","modified":1595058374269},{"_id":"source/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1595058374271},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1579339019097},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1579339019098},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1579339019100},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1579339019100},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1579339019101},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1579339019102},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1579339019103},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1579339019103},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1579339019102},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1579339019104},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1579339019104},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1579339019106},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1579339019106},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1579339019107},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1579339019107},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1579339019107},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1579339019108},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1579339019108},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1579339019108},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1579339019108},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1579339019112},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579339019113},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579339019113},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1579339019113},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1579339019113},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1579339019113},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1579339019114},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1579339019114},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1579339019114},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1579339019114},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1579339019114},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1579339019115},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1579339019115},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1579339019115},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1579339019115},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1579339019116},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1579339019116},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1579339019116},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1579339019117},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1579339019116},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1579339019117},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1579339019117},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1579339019133},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1579339019133},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1579339019133},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1579339019133},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1579339019134},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1579339019134},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1579339019138},{"_id":"source/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1595058374272},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1579339019098},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1579339019098},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1579339019099},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1579339019099},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1579339019109},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1579339019109},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1579339019109},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1579339019109},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1579339019110},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1579339019111},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1579339019110},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1579339019110},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1579339019111},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1579339019111},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1579339019112},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1579339019112},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1579339019112},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1579339019118},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1579339019117},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1579339019118},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1579339019118},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9606bf278b53aa6c737576468a54d50ec4c74415","modified":1588496245917},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1579339019121},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1579339019124},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1579339019124},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1579339019123},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1579339019124},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1579339019126},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1579339019127},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1579339019128},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1579339019130},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1579339019130},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1579339019131},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1579339019134},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1579339019137},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1579339019137},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1579339019137},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1579339019137},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1579339019138},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1579339019138},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1579339019138},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1579339019138},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1579339019139},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1579339019139},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1579339019139},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1579339019139},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1579339019140},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1579339019140},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1579339019140},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1579339019141},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1579339019141},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1579339019141},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1579339019162},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579339019166},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579339019166},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579339019166},{"_id":"themes/next/source/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1579339019167},{"_id":"themes/next/source/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579339019167},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579339019162},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579339019167},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579339019163},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579339019163},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579339019163},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579339019164},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579339019163},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579339019164},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579339019164},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579339019165},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579339019165},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579339019165},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579339019165},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579339019165},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579339019165},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579339019166},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579339019168},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579339019155},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579339019155},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1579339019119},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1579339019119},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1579339019120},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1579339019119},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1579339019120},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1579339019120},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1579339019120},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1579339019121},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1579339019120},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1579339019121},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1579339019121},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1579339019121},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1579339019122},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1579339019122},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1579339019122},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1579339019122},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1579339019123},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1579339019124},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579339019125},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579339019125},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579339019126},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579339019126},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1579339019127},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1579339019128},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1579339019127},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1579339019128},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1579339019128},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1579339019130},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1579339019130},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1579339019130},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1579339019130},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1579339019131},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1579339019131},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1579339019131},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1579339019132},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1579339019132},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1579339019133},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1579339019135},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1579339019135},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1579339019135},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1579339019135},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1579339019135},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1579339019137},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1579339019161},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1579339019161},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1579339019161},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1579339019161},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1579339019162},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1579339019155},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1579339019156},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1579339019156},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1579339019167},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1579339019167},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1579339019169},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579339019175},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579339019175},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1579339019142},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1579339019142},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1579339019142},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1579339019146},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1579339019155},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1579339019149},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1579339019149},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1579339019156},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"71f71a089a9930c2401cdc22e5c6880a9b90ebcd","modified":1579339019160},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b1a9afa11f8cf1b844682112ff931ac32b72ae39","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1579339019160},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579339019160},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579339019170},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579339019170},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579339019171},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579339019174},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1579339019147},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1579339019147},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1579339019147},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1579339019155},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1579339019155},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1579339019155},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1579339019147},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1579339019154},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1579339019149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1579339019149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"7e19772f7b2a5c454f3c0949abc272209abc4684","modified":1579339019151},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1579339019151},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1579339019150},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579339019174},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579339019173},{"_id":"public/categories/index.html","hash":"7c4475b0a47fe5cc478363588bb5ed0e42746d67","modified":1609664023725},{"_id":"public/about/index.html","hash":"ce69881269c78eac8549499a924e81b5ada0c4f9","modified":1609664023725},{"_id":"public/2020/07/18/hello-world/index.html","hash":"3bb0bc089e6899279bf0fc27ebec06b723099e19","modified":1609664023725},{"_id":"public/2020/01/04/第一篇博客/index.html","hash":"2104d69280f13d20c3434451098ba0150eceec94","modified":1595059897477},{"_id":"public/archives/index.html","hash":"a91ee1ad0339209dbf9754adc90074619253fbba","modified":1609664023725},{"_id":"public/archives/2020/index.html","hash":"47d57008bf7cbd3d85c9d120401e766445233cd3","modified":1609664023725},{"_id":"public/archives/2020/01/index.html","hash":"395c03c89a43eb1811d9b29abb3908e9faf97242","modified":1595059897477},{"_id":"public/archives/2020/05/index.html","hash":"de8c5337f602313d51bfaa79dc83a15ffb5f22f7","modified":1609664023725},{"_id":"public/archives/2020/07/index.html","hash":"33192fda7a31442c91e2471dc590360b6d74bbed","modified":1609664023725},{"_id":"public/categories/SQL/index.html","hash":"fd68a20cb274a60cf5553e52089115047ca38280","modified":1609664023725},{"_id":"public/categories/Linux/index.html","hash":"18f7a88a79ed87c0f7456af8c07339b5ad235591","modified":1609664023725},{"_id":"public/categories/算法/index.html","hash":"4ed1e8a53634d2b9e1def3600b42207e5ad381b3","modified":1609664023725},{"_id":"public/categories/test/index.html","hash":"3371d8addc00295e41b0fad475aa436b8e6636d0","modified":1595059897477},{"_id":"public/tags/dijkstra/index.html","hash":"f0e81b7184a16d2e88e5317a27e2304ce7bb5e53","modified":1609664023725},{"_id":"public/tags/late-acceptance/index.html","hash":"9ae056045012f188b0f22795d3f256628352d3d0","modified":1609664023725},{"_id":"public/2020/07/18/延迟接受算法/index.html","hash":"1ac0a00a5d8f7c62a1ff03241a70d85435f49e70","modified":1609664023725},{"_id":"public/2020/07/05/dijkstra算法/index.html","hash":"20765bcbc5407a53c2ed9b97a0af6a88d33ec609","modified":1609664023725},{"_id":"public/2020/05/16/Hive-SQL日常总结/index.html","hash":"2086e75d432b3fddb3a20465186456aca0f09c4b","modified":1609664023725},{"_id":"public/2020/05/03/Linux下压缩隐藏文件/index.html","hash":"14ca59241742450cf7c01f155338a283c5e097a1","modified":1609664023725},{"_id":"public/index.html","hash":"d0f89dc3f4702778d00ac49bb3109cf37ba8a198","modified":1609664023725},{"_id":"public/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1595059897477},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1595059897477},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1595059897477},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1595059897477},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1595059897477},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1595059897477},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1595059897477},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1595059897477},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1595059897477},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1595059897477},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1595059897477},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1595059897477},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1595059897477},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1595059897477},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1595059897477},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1595059897477},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1595059897477},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1595059897477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1595059897477},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1595059897477},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1595059897477},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1595059897477},{"_id":"public/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1595059897477},{"_id":"public/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1595059897477},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1595059897477},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1595059897477},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1595059897477},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1595059897477},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1595059897477},{"_id":"public/css/main.css","hash":"365d5a3d7e10d654635b83f8fe1297e28d1292ad","modified":1595059897477},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1595059897477},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1595059897477},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1595059897477},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1595059897477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1595059897477},{"_id":"public/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1595059897477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1595059897477}],"Category":[{"name":"SQL","_id":"ckcrdha4c0004bjn2d2ivd1bp"},{"name":"Linux","_id":"ckcrdha4j0009bjn238ihaejm"},{"name":"算法","_id":"ckcrdha4n000dbjn2hw5bf6mn"},{"name":"test","_id":"ckcrdha4q000ibjn23acc2x99"}],"Data":[],"Page":[{"title":"categories","date":"2020-05-03T09:01:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-05-03 17:01:42\ntype: \"categories\"\n---\n","updated":"2020-07-18T07:46:14.270Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckcrdha490001bjn28zes2yqz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-05-03T08:39:31.000Z","name":"silencemao","email":"silencekxm@gmail.com","_content":"\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","source":"about/index.md","raw":"\ntitle: about\ndate: 2020-05-03 16:39:31\nname: silencemao\nemail: silencekxm@gmail.com\n---\n\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","updated":"2020-07-18T07:46:14.269Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckcrdha4b0003bjn2cky2ekzx","content":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: <a href=\"mailto:silencekxm@gmail.com\">silencekxm@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: <a href=\"mailto:silencekxm@gmail.com\">silencekxm@gmail.com</a></p>\n"}],"Post":[{"title":"Hive/SQL日常总结","date":"2020-05-16T01:39:36.000Z","_content":"\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n","source":"_posts/Hive-SQL日常总结.md","raw":"---\ntitle: Hive/SQL日常总结\ndate: 2020-05-16 09:39:36\ncategories: SQL\ntags:\n---\n\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n","slug":"Hive-SQL日常总结","published":1,"updated":"2020-07-18T07:46:14.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcrdha400000bjn25su38k5s","content":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">xx1</td>\n<td align=\"center\">Tom</td>\n</tr>\n<tr>\n<td align=\"center\">xx2</td>\n<td align=\"center\">Jone</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对t1进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t1 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">对t2进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t2 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">使用t1 inner join t2</span><br><span class=\"line\"><span class=\"keyword\">select</span> * </span><br><span class=\"line\">  (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">  <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp1</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">   (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">    <span class=\"keyword\">from</span> t2 </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp2</span><br><span class=\"line\"> <span class=\"keyword\">on</span> tmp1.id=tmp2.id <span class=\"keyword\">and</span> tmp1.name=tmp2.name;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1</span><br><span class=\"line\"><span class=\"keyword\">minus</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2</span><br><span class=\"line\"><span class=\"keyword\">minus</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"2、分区表增加新的字段\"><a href=\"#2、分区表增加新的字段\" class=\"headerlink\" title=\"2、分区表增加新的字段\"></a>2、分区表增加新的字段</h2><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_nam <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>);</span><br></pre></td></tr></table></figure>\n\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>) <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Insert</span> overwrite <span class=\"keyword\">table</span> table_name <span class=\"keyword\">partition</span>(dt=’t’)</span><br><span class=\"line\">       <span class=\"keyword\">Select</span> col1, col2, col2,….</span><br><span class=\"line\">       <span class=\"keyword\">From</span> table_name</span><br><span class=\"line\">       <span class=\"keyword\">Where</span> dt=’t<span class=\"number\">-1</span>’</span><br></pre></td></tr></table></figure>\n\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>    <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    hobby   <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">add</span>     <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span></span><br><span class=\"line\"><span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">','</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">'-'</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">':'</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">'/user/hive/warehouse/...data'</span> overwrite <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> t1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1</span><br><span class=\"line\"><span class=\"keyword\">like</span> t2;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>","more":"<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">xx1</td>\n<td align=\"center\">Tom</td>\n</tr>\n<tr>\n<td align=\"center\">xx2</td>\n<td align=\"center\">Jone</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对t1进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t1 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">对t2进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t2 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">使用t1 inner join t2</span><br><span class=\"line\"><span class=\"keyword\">select</span> * </span><br><span class=\"line\">  (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">  <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp1</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">   (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">    <span class=\"keyword\">from</span> t2 </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp2</span><br><span class=\"line\"> <span class=\"keyword\">on</span> tmp1.id=tmp2.id <span class=\"keyword\">and</span> tmp1.name=tmp2.name;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1</span><br><span class=\"line\"><span class=\"keyword\">minus</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2</span><br><span class=\"line\"><span class=\"keyword\">minus</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"2、分区表增加新的字段\"><a href=\"#2、分区表增加新的字段\" class=\"headerlink\" title=\"2、分区表增加新的字段\"></a>2、分区表增加新的字段</h2><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_nam <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>);</span><br></pre></td></tr></table></figure>\n\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>) <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Insert</span> overwrite <span class=\"keyword\">table</span> table_name <span class=\"keyword\">partition</span>(dt=’t’)</span><br><span class=\"line\">       <span class=\"keyword\">Select</span> col1, col2, col2,….</span><br><span class=\"line\">       <span class=\"keyword\">From</span> table_name</span><br><span class=\"line\">       <span class=\"keyword\">Where</span> dt=’t<span class=\"number\">-1</span>’</span><br></pre></td></tr></table></figure>\n\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>    <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    hobby   <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">add</span>     <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span></span><br><span class=\"line\"><span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">','</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">'-'</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">':'</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">'/user/hive/warehouse/...data'</span> overwrite <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> t1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1</span><br><span class=\"line\"><span class=\"keyword\">like</span> t2;</span><br></pre></td></tr></table></figure>"},{"title":"Linux下压缩隐藏文件","date":"2020-05-03T10:28:53.000Z","_content":"\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","source":"_posts/Linux下压缩隐藏文件.md","raw":"---\ntitle: Linux下压缩隐藏文件\ndate: 2020-05-03 18:28:53\ncategories: Linux\ntags:\n---\n\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","slug":"Linux下压缩隐藏文件","published":1,"updated":"2020-07-18T07:46:14.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcrdha4a0002bjn298nc6l27","content":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz abc/*   // 压缩</span><br><span class=\"line\">tar zxvf abc.tar.gz         // 解压</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>\n<a id=\"more\"></a>\n\n<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”</span><br></pre></td></tr></table></figure>\n\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件</span><br></pre></td></tr></table></figure>\n\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz abc/*   // 压缩</span><br><span class=\"line\">tar zxvf abc.tar.gz         // 解压</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>","more":"<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”</span><br></pre></td></tr></table></figure>\n\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件</span><br></pre></td></tr></table></figure>\n\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>"},{"title":"dijkstra算法","date":"2020-07-05T08:07:53.000Z","_content":"\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","source":"_posts/dijkstra算法.md","raw":"---\ntitle: dijkstra算法\ndate: 2020-07-05 16:07:53\ncategories: 算法\ntags: dijkstra\n---\n\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","slug":"dijkstra算法","published":1,"updated":"2020-07-18T07:46:14.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcrdha4e0005bjn22ieqfj6m","content":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tMaxDis  <span class=\"keyword\">int</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span><span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dijkstra <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttPints  []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ttTwoPointDis <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">Init</span><span class=\"params\">(tPoints []<span class=\"keyword\">string</span>, tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tPoints) != <span class=\"built_in\">len</span>(tDis) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"点数与矩阵的大小不一致\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tTwoPointDis = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(tPoints); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(tPoints); j++ &#123;</span><br><span class=\"line\">\t\t\tkey := tPoints[i] + <span class=\"string\">\"_\"</span> + tPoints[j]</span><br><span class=\"line\">\t\t\td.tTwoPointDis[key] = tDis[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tPints = tPoints</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttPoints := d.tPints[<span class=\"number\">1</span>:]                  <span class=\"comment\">// 未访问过的点</span></span><br><span class=\"line\">\tvisited := []<span class=\"keyword\">string</span>&#123;d.tPints[<span class=\"number\">0</span>]&#125;         <span class=\"comment\">// 访问过的点</span></span><br><span class=\"line\">\tsrc := d.tPints[<span class=\"number\">0</span>]                       <span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tpre, next := src, src</span><br><span class=\"line\"></span><br><span class=\"line\">\tpath := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 起点到其它点的路径</span></span><br><span class=\"line\">\tpath[src + <span class=\"string\">\"_\"</span> + src] = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdistanceGraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 起点到其它点的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(tPoints) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdistance := MaxDis</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ind <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dst <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> nextInd <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> visited &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ind, dst = <span class=\"keyword\">range</span> tPoints &#123;</span><br><span class=\"line\">\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + v] + d.tTwoPointDis[v + <span class=\"string\">\"_\"</span> + dst]  <span class=\"comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> newDis &lt; distance &#123;</span><br><span class=\"line\">\t\t\t\t\tdistance = newDis</span><br><span class=\"line\">\t\t\t\t\tpre = v</span><br><span class=\"line\">\t\t\t\t\tnext = dst</span><br><span class=\"line\">\t\t\t\t\tnextInd = ind</span><br><span class=\"line\">\t\t\t\t\td.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + dst] = distance</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tPoint := <span class=\"keyword\">range</span> path[src + <span class=\"string\">\"_\"</span> + pre] &#123;</span><br><span class=\"line\">\t\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], tPoint)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], next)  <span class=\"comment\">// 记录从src到next需经过的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdistanceGraph[src + <span class=\"string\">\"_\"</span> + next] = distance                     <span class=\"comment\">// 记录从src到next的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvisited = <span class=\"built_in\">append</span>(visited, next)</span><br><span class=\"line\">\t\ttPoints = <span class=\"built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">\tfmt.Println(distanceGraph)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td := <span class=\"built_in\">new</span>(Dijkstra)</span><br><span class=\"line\">\ttPoints := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>&#125;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>,      <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\td.Init(tPoints, tDis)</span><br><span class=\"line\">\td.dijkstra()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tMaxDis  <span class=\"keyword\">int</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span><span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dijkstra <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttPints  []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ttTwoPointDis <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">Init</span><span class=\"params\">(tPoints []<span class=\"keyword\">string</span>, tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tPoints) != <span class=\"built_in\">len</span>(tDis) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"点数与矩阵的大小不一致\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tTwoPointDis = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(tPoints); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(tPoints); j++ &#123;</span><br><span class=\"line\">\t\t\tkey := tPoints[i] + <span class=\"string\">\"_\"</span> + tPoints[j]</span><br><span class=\"line\">\t\t\td.tTwoPointDis[key] = tDis[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tPints = tPoints</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttPoints := d.tPints[<span class=\"number\">1</span>:]                  <span class=\"comment\">// 未访问过的点</span></span><br><span class=\"line\">\tvisited := []<span class=\"keyword\">string</span>&#123;d.tPints[<span class=\"number\">0</span>]&#125;         <span class=\"comment\">// 访问过的点</span></span><br><span class=\"line\">\tsrc := d.tPints[<span class=\"number\">0</span>]                       <span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tpre, next := src, src</span><br><span class=\"line\"></span><br><span class=\"line\">\tpath := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 起点到其它点的路径</span></span><br><span class=\"line\">\tpath[src + <span class=\"string\">\"_\"</span> + src] = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdistanceGraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 起点到其它点的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(tPoints) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdistance := MaxDis</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ind <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dst <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> nextInd <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> visited &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ind, dst = <span class=\"keyword\">range</span> tPoints &#123;</span><br><span class=\"line\">\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + v] + d.tTwoPointDis[v + <span class=\"string\">\"_\"</span> + dst]  <span class=\"comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> newDis &lt; distance &#123;</span><br><span class=\"line\">\t\t\t\t\tdistance = newDis</span><br><span class=\"line\">\t\t\t\t\tpre = v</span><br><span class=\"line\">\t\t\t\t\tnext = dst</span><br><span class=\"line\">\t\t\t\t\tnextInd = ind</span><br><span class=\"line\">\t\t\t\t\td.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + dst] = distance</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tPoint := <span class=\"keyword\">range</span> path[src + <span class=\"string\">\"_\"</span> + pre] &#123;</span><br><span class=\"line\">\t\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], tPoint)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], next)  <span class=\"comment\">// 记录从src到next需经过的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdistanceGraph[src + <span class=\"string\">\"_\"</span> + next] = distance                     <span class=\"comment\">// 记录从src到next的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvisited = <span class=\"built_in\">append</span>(visited, next)</span><br><span class=\"line\">\t\ttPoints = <span class=\"built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">\tfmt.Println(distanceGraph)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td := <span class=\"built_in\">new</span>(Dijkstra)</span><br><span class=\"line\">\ttPoints := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>&#125;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>,      <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\td.Init(tPoints, tDis)</span><br><span class=\"line\">\td.dijkstra()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-18T07:46:14.267Z","updated":"2020-07-18T07:46:14.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcrdha4f0006bjn25y6471zs","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"延迟接受算法","date":"2020-07-18T06:17:59.000Z","mathjax":true,"_content":"\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标 $$f(x,y,z)=x^2*z-y^3*z^2+x^2*y^3-x/y$$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/Users/sf/Desktop/code/silencemao.github.io/source/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C(s)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s*$，计算新解的函数值$C(s*)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s*)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s*)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s*$，并更新$f(v)=C(s*)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","source":"_posts/延迟接受算法.md","raw":"---\ntitle: 延迟接受算法\ndate: 2020-07-18 14:17:59\ncategories: 算法\ntags: late acceptance\nmathjax: true\n---\n\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标 $$f(x,y,z)=x^2*z-y^3*z^2+x^2*y^3-x/y$$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/Users/sf/Desktop/code/silencemao.github.io/source/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C(s)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s*$，计算新解的函数值$C(s*)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s*)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s*)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s*$，并更新$f(v)=C(s*)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","slug":"延迟接受算法","published":1,"updated":"2020-07-18T08:11:19.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcrdha4h0008bjn2hk8o2xa4","content":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\" target=\"_blank\" rel=\"noopener\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标 $$f(x,y,z)=x^2<em>z-y^3</em>z^2+x^2<em>y^3-x/y$$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。*</em>启发式<strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。</strong>延迟接受**就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/Users/sf/Desktop/code/silencemao.github.io/source/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C(s)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s<em>$，计算新解的函数值$C(s</em>)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I % Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s<em>)$ 和 $f(v)$，比较 $C(s</em>)$ 和 $C(s)$，若$C(s<em>)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s</em>$，并更新$f(v)=C(s*)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"TSP/ioinfo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"TSP/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LateAcceptance <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tn       <span class=\"keyword\">int</span></span><br><span class=\"line\">\ttScore []<span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Init</span><span class=\"params\">(n <span class=\"keyword\">int</span>, pStartScore <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tl.n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l.n; i++ &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pStartScore)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Accept</span><span class=\"params\">(pScore <span class=\"keyword\">float64</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pAccept <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pAccept &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pScore)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l.tScore) &gt;= l.n &#123;</span><br><span class=\"line\">\t\tl.tScore = l.tScore[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pAccept</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changCity1</span><span class=\"params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"title\">ioinfo</span>.<span class=\"title\">Data</span></span> &#123;</span><br><span class=\"line\">\tpos1 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)<span class=\"number\">-3</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">\tpos2 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)-pos1<span class=\"number\">-1</span>) + pos1</span><br><span class=\"line\">\tdataDest := <span class=\"built_in\">make</span>([]ioinfo.Data, <span class=\"built_in\">len</span>(dataSrc))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dataDest, dataSrc)</span><br><span class=\"line\">\tr := R1.Intn(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pos1 &lt; pos2 &#123;</span><br><span class=\"line\">\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t\t\tpos1 ++</span><br><span class=\"line\">\t\t\tpos2 --</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataDest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">La</span><span class=\"params\">(pFileName <span class=\"keyword\">string</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\tdata := util.GetSampleData(pFileName, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\tr := util.GetResult(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpLa := <span class=\"built_in\">new</span>(LateAcceptance)</span><br><span class=\"line\">\tpLa.Init(<span class=\"number\">215</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := time.Now().UnixNano()</span><br><span class=\"line\">\tpIterNum := <span class=\"number\">200000</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> pIterNum &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttemp := changCity1(data, *R1)</span><br><span class=\"line\">\t\trn := util.GetResult(temp)  <span class=\"comment\">// 计算当前解的里程 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pLa.Accept(rn) &#123;</span><br><span class=\"line\">\t\t\tdata = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIterNum--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts2 := time.Now().UnixNano()</span><br><span class=\"line\">\tfmt.Println(data, s2 -s1)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> util.GetResult(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟接受启动：</span><br><span class=\"line\">[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns</span><br><span class=\"line\">588.1953208548182</span><br></pre></td></tr></table></figure>\n\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\" target=\"_blank\" rel=\"noopener\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标 $$f(x,y,z)=x^2<em>z-y^3</em>z^2+x^2<em>y^3-x/y$$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。*</em>启发式<strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。</strong>延迟接受**就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/Users/sf/Desktop/code/silencemao.github.io/source/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C(s)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s<em>$，计算新解的函数值$C(s</em>)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I % Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s<em>)$ 和 $f(v)$，比较 $C(s</em>)$ 和 $C(s)$，若$C(s<em>)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s</em>$，并更新$f(v)=C(s*)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"TSP/ioinfo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"TSP/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LateAcceptance <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tn       <span class=\"keyword\">int</span></span><br><span class=\"line\">\ttScore []<span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Init</span><span class=\"params\">(n <span class=\"keyword\">int</span>, pStartScore <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tl.n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l.n; i++ &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pStartScore)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Accept</span><span class=\"params\">(pScore <span class=\"keyword\">float64</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pAccept <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pAccept &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pScore)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l.tScore) &gt;= l.n &#123;</span><br><span class=\"line\">\t\tl.tScore = l.tScore[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pAccept</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changCity1</span><span class=\"params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"title\">ioinfo</span>.<span class=\"title\">Data</span></span> &#123;</span><br><span class=\"line\">\tpos1 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)<span class=\"number\">-3</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">\tpos2 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)-pos1<span class=\"number\">-1</span>) + pos1</span><br><span class=\"line\">\tdataDest := <span class=\"built_in\">make</span>([]ioinfo.Data, <span class=\"built_in\">len</span>(dataSrc))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dataDest, dataSrc)</span><br><span class=\"line\">\tr := R1.Intn(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pos1 &lt; pos2 &#123;</span><br><span class=\"line\">\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t\t\tpos1 ++</span><br><span class=\"line\">\t\t\tpos2 --</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataDest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">La</span><span class=\"params\">(pFileName <span class=\"keyword\">string</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\tdata := util.GetSampleData(pFileName, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\tr := util.GetResult(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpLa := <span class=\"built_in\">new</span>(LateAcceptance)</span><br><span class=\"line\">\tpLa.Init(<span class=\"number\">215</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := time.Now().UnixNano()</span><br><span class=\"line\">\tpIterNum := <span class=\"number\">200000</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> pIterNum &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttemp := changCity1(data, *R1)</span><br><span class=\"line\">\t\trn := util.GetResult(temp)  <span class=\"comment\">// 计算当前解的里程 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pLa.Accept(rn) &#123;</span><br><span class=\"line\">\t\t\tdata = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIterNum--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts2 := time.Now().UnixNano()</span><br><span class=\"line\">\tfmt.Println(data, s2 -s1)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> util.GetResult(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟接受启动：</span><br><span class=\"line\">[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns</span><br><span class=\"line\">588.1953208548182</span><br></pre></td></tr></table></figure>\n\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcrdha400000bjn25su38k5s","category_id":"ckcrdha4c0004bjn2d2ivd1bp","_id":"ckcrdha4m000cbjn2erxq6gsp"},{"post_id":"ckcrdha4a0002bjn298nc6l27","category_id":"ckcrdha4j0009bjn238ihaejm","_id":"ckcrdha4o000fbjn29afu2y84"},{"post_id":"ckcrdha4e0005bjn22ieqfj6m","category_id":"ckcrdha4n000dbjn2hw5bf6mn","_id":"ckcrdha4q000jbjn21g8m0zhe"},{"post_id":"ckcrdha4h0008bjn2hk8o2xa4","category_id":"ckcrdha4n000dbjn2hw5bf6mn","_id":"ckcrdha4r000kbjn21zn8cq7w"}],"PostTag":[{"post_id":"ckcrdha4e0005bjn22ieqfj6m","tag_id":"ckcrdha4h0007bjn2egqf8exw","_id":"ckcrdha4n000ebjn21g9n000k"},{"post_id":"ckcrdha4h0008bjn2hk8o2xa4","tag_id":"ckcrdha4m000bbjn28t0d91pr","_id":"ckcrdha4p000hbjn28gwv0x4y"}],"Tag":[{"name":"dijkstra","_id":"ckcrdha4h0007bjn2egqf8exw"},{"name":"late acceptance","_id":"ckcrdha4m000bbjn28t0d91pr"}]}}