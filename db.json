{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"source/images/lahc.jpg","path":"images/lahc.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1579339019097},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1579339019104},{"_id":"source/.DS_Store","hash":"4a6848c843bc53483287293f9a1dd212d055bbd7","modified":1618224747979},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1579339019096},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1579339019097},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1579339019104},{"_id":"themes/next/_config.yml","hash":"8be70e576fe95f9803e5b91118b04bfbce605054","modified":1595058877350},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1579339019105},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1579339019105},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1579339019105},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1579339019106},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1579339019112},{"_id":"themes/next/package.json","hash":"1ebb0726b19b2a65b754bc25b214e1c8b67c5809","modified":1618121968203},{"_id":"source/_posts/.DS_Store","hash":"4c375f650011b85dd304af344e80a3bab00d20b8","modified":1618109718323},{"_id":"source/_posts/Floyd算法.md","hash":"1edf8217c0bb7f023ca3db60e5e318aa48a1bc8d","modified":1618122326836},{"_id":"source/_posts/Hive-SQL日常总结.md","hash":"57a92ff2d652e9539f2c70b9cec27a23734c0e9b","modified":1595058374266},{"_id":"source/_posts/Linux下压缩隐藏文件.md","hash":"211c3e129c6692fc421712b59b312dcee7dae0a3","modified":1595058374266},{"_id":"source/_posts/dijkstra算法.md","hash":"8edd695fbc45d1cefffbc379cbf0d5a173b3e07e","modified":1618122520408},{"_id":"source/_posts/延迟接受算法.md","hash":"765e2df5c21c8334da0edd8f4ffa8f77d956dd91","modified":1618224805483},{"_id":"source/about/index.md","hash":"5caedd72e78c0eb25cc94b0663f05a74f0d8a34e","modified":1595058374269},{"_id":"source/_posts/排课程.md","hash":"e996c0f3e31e2b0f31ebb6a61966deaf85905126","modified":1610266707905},{"_id":"source/categories/index.md","hash":"e2368480d2b74efe2773a3edcf6bf6b9ba7a48f2","modified":1595058374270},{"_id":"source/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1595058374271},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1579339019097},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1579339019098},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1579339019100},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1579339019100},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1579339019101},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1579339019102},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1579339019102},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1579339019103},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1579339019103},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1579339019104},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1579339019104},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1579339019106},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1579339019106},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1579339019107},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1579339019107},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1579339019108},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1579339019108},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1579339019108},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1579339019108},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1579339019112},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579339019113},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1579339019107},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579339019113},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1579339019114},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1579339019113},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1579339019113},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1579339019114},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1579339019114},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1579339019114},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1579339019114},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1579339019115},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1579339019115},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1579339019115},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1579339019116},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1579339019115},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1579339019116},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1579339019116},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1579339019113},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1579339019116},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1579339019117},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1579339019117},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1579339019117},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1579339019133},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1579339019133},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1579339019133},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1579339019133},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1579339019134},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1579339019134},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1579339019138},{"_id":"themes/next/package-lock.json","hash":"18d38b99f111aae0882d8843ffbcf50839909f47","modified":1618121968289},{"_id":"source/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1595058374272},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1579339019098},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1579339019098},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1579339019099},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1579339019099},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1579339019109},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1579339019109},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1579339019110},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1579339019110},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1579339019109},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1579339019109},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1579339019110},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1579339019111},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1579339019111},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1579339019111},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1579339019112},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1579339019112},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1579339019112},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1579339019118},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1579339019117},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1579339019118},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1579339019118},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9606bf278b53aa6c737576468a54d50ec4c74415","modified":1588496245917},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1579339019121},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1579339019123},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1579339019124},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1579339019124},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1579339019124},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1579339019127},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1579339019126},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1579339019128},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1579339019130},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1579339019130},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1579339019131},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1579339019134},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1579339019137},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1579339019137},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1579339019137},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1579339019137},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1579339019138},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1579339019138},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1579339019138},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1579339019138},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1579339019139},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1579339019139},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1579339019139},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1579339019139},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1579339019140},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1579339019140},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1579339019140},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1579339019141},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1579339019141},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1579339019141},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1579339019162},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579339019162},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579339019163},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579339019163},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579339019163},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579339019163},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579339019164},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579339019164},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579339019164},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579339019165},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579339019165},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579339019165},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579339019165},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579339019165},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579339019166},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579339019166},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579339019166},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579339019165},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579339019166},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579339019167},{"_id":"themes/next/source/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1579339019167},{"_id":"themes/next/source/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579339019167},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579339019168},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579339019155},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579339019155},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1579339019119},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1579339019119},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1579339019119},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1579339019120},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1579339019120},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1579339019120},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1579339019120},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1579339019121},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1579339019120},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1579339019121},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1579339019121},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1579339019121},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1579339019122},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1579339019122},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1579339019122},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1579339019122},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1579339019123},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1579339019124},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579339019125},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579339019125},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579339019126},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1579339019127},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579339019126},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1579339019127},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1579339019128},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1579339019128},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1579339019128},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1579339019129},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1579339019130},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1579339019130},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1579339019130},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1579339019130},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1579339019131},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1579339019131},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1579339019131},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1579339019132},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1579339019132},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1579339019132},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1579339019133},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1579339019135},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1579339019135},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1579339019135},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1579339019135},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1579339019135},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1579339019136},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1579339019137},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1579339019155},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1579339019156},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1579339019156},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1579339019161},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1579339019161},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1579339019161},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1579339019161},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1579339019162},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1579339019167},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1579339019167},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579339019169},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1579339019169},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579339019175},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579339019175},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1579339019142},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1579339019142},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1579339019142},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1579339019146},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1579339019149},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1579339019149},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1579339019153},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1579339019155},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1579339019156},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1579339019157},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1579339019158},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b1a9afa11f8cf1b844682112ff931ac32b72ae39","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1579339019159},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"71f71a089a9930c2401cdc22e5c6880a9b90ebcd","modified":1579339019160},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1579339019160},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579339019160},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579339019170},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579339019170},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579339019171},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579339019174},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1579339019143},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1579339019144},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1579339019145},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1579339019146},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1579339019147},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1579339019147},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1579339019147},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1579339019147},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1579339019149},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1579339019148},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1579339019149},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1579339019150},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"7e19772f7b2a5c454f3c0949abc272209abc4684","modified":1579339019151},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1579339019151},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1579339019152},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1579339019155},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1579339019154},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1579339019155},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1579339019155},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579339019174},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579339019173},{"_id":"public/about/index.html","hash":"18f4508deaecb8cbc1fa487e620016628040c22d","modified":1618134737824},{"_id":"public/categories/index.html","hash":"c78081543198fdb9ebd8130d7139f3a97d773ea6","modified":1618134737824},{"_id":"public/archives/index.html","hash":"b2cbb4def974cf5b2607a0d682e3954666fb9a61","modified":1618134737824},{"_id":"public/archives/2020/index.html","hash":"3164e0b4de90124678906a71a854c5a7b15ae6a5","modified":1618134737824},{"_id":"public/archives/2020/05/index.html","hash":"1a2a0cb7e3dedefe66eb617a7f676e69d346ae24","modified":1618134737824},{"_id":"public/archives/2020/07/index.html","hash":"a8f25901bc7f6bcd70e09bfdef59fe6755b9e7ee","modified":1618134737824},{"_id":"public/archives/2021/index.html","hash":"ac0a96fc75f1766a06400f6e78a44f160ecd6a6a","modified":1618134737824},{"_id":"public/archives/2021/01/index.html","hash":"a7d8d765c1cbd44905bbab882885e9d3bdc022ca","modified":1618134737824},{"_id":"public/archives/2021/04/index.html","hash":"4d85a9432093d0be4e54eba8835f4cbae10d40a0","modified":1618134737824},{"_id":"public/categories/算法/index.html","hash":"5da54d6ec5ead76468f9cd2c4cb6c1874f97618e","modified":1618134737824},{"_id":"public/categories/SQL/index.html","hash":"df6199a5ecdcdc21b4dda09a7cb83420b1a23f74","modified":1618134737824},{"_id":"public/categories/Linux/index.html","hash":"271e38dab28b858ff0f7ae924a11d78f9e5aefa6","modified":1618134737824},{"_id":"public/categories/leetcode/index.html","hash":"34f7c0268f71dfe9df0ec32e11c88243c014a7a9","modified":1618134737824},{"_id":"public/tags/floyd/index.html","hash":"95603a29684035c1a4862b7681b49916727a82b2","modified":1618134737824},{"_id":"public/tags/dijkstra/index.html","hash":"86d0a473300dbfb7e42669662f71e630476d46d1","modified":1618134737824},{"_id":"public/tags/late-acceptance/index.html","hash":"7bc1e1508cdceb75c98bc0d344481aed1598bf9e","modified":1618134737824},{"_id":"public/tags/alogithm/index.html","hash":"a77aa0a48a9a5d4f58549a51b4b2b706d73d35f8","modified":1618134737824},{"_id":"public/2021/04/11/Floyd算法/index.html","hash":"d058b2ea5f181d9f812f99fc90607ea842b31012","modified":1618134737824},{"_id":"public/2021/01/10/排课程/index.html","hash":"fe7d97261f39e14dcaac6b3d37971a5de9ee3016","modified":1618134737824},{"_id":"public/2020/07/18/延迟接受算法/index.html","hash":"3806274b344a10ffd9f302d5c3007381cb8dcdd9","modified":1618224992909},{"_id":"public/2020/07/05/dijkstra算法/index.html","hash":"c01003c7b4e9e54c1e1a465d3b5da6b9e6150071","modified":1618134737824},{"_id":"public/2020/05/16/Hive-SQL日常总结/index.html","hash":"1fc0c0251234d3a1536eab977b5af36282f32328","modified":1618134737824},{"_id":"public/2020/05/03/Linux下压缩隐藏文件/index.html","hash":"f97347f9679e98a2481c1d6ca7bd07e8bf5e85e7","modified":1618134737824},{"_id":"public/index.html","hash":"5c83e077d45eafb634b95a171bd04b4634cbac0c","modified":1618224992909},{"_id":"public/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1618124874046},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1618124874046},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1618124874046},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1618124874046},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1618124874046},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1618124874046},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1618124874046},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1618124874046},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1618124874046},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1618124874046},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1618124874046},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1618124874046},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1618124874046},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1618124874046},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1618124874046},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1618124874046},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1618124874046},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1618124874046},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1618124874046},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1618124874046},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1618124874046},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1618124874046},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1618124874046},{"_id":"public/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1618124874046},{"_id":"public/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1618124874046},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1618124874046},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1618124874046},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1618124874046},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1618124874046},{"_id":"public/css/main.css","hash":"14cb26c23f8f23e1bde53ee21d54bf1456d600b0","modified":1618124874046},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1618124874046},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1618124874046},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1618124874046},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1618124874046},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1618124874046},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1618124874046},{"_id":"public/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1618124874046},{"_id":"source/_posts/Prim算法.md","hash":"14c8af6ea5185a244679742acad113249e16d10a","modified":1618134181499},{"_id":"public/tags/prim/index.html","hash":"083165afd89326d43350721586427dda1f10e24d","modified":1618134737824},{"_id":"public/2021/04/11/Prim算法/index.html","hash":"f967c4970cf3fabbfc6220be428d874bff4069ca","modified":1618134737824}],"Category":[{"name":"算法","_id":"cknctrs730004yjn2dm3pei0p"},{"name":"SQL","_id":"cknctrs7b0009yjn21tvn2b65"},{"name":"Linux","_id":"cknctrs7i000eyjn216i35j3s"},{"name":"leetcode","_id":"cknctrs7k000jyjn271f0cv3r"}],"Data":[],"Page":[{"title":"about","date":"2020-05-03T08:39:31.000Z","name":"silencemao","email":"silencekxm@gmail.com","_content":"\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","source":"about/index.md","raw":"\ntitle: about\ndate: 2020-05-03 16:39:31\nname: silencemao\nemail: silencekxm@gmail.com\n---\n\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","updated":"2020-07-18T07:46:14.269Z","path":"about/index.html","comments":1,"layout":"page","_id":"cknctrs6w0001yjn23uf3bvwz","content":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: silencekxm@gmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: silencekxm@gmail.com</p>\n"},{"title":"categories","date":"2020-05-03T09:01:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-05-03 17:01:42\ntype: \"categories\"\n---\n","updated":"2020-07-18T07:46:14.270Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cknctrs700003yjn29z090xsv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Floyd算法","mathjax":true,"date":"2021-04-11T02:54:52.000Z","_content":"\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","source":"_posts/Floyd算法.md","raw":"---\ntitle: Floyd算法\nmathjax: true\ndate: 2021-04-11 10:54:52\ncategories: 算法\ntags: floyd\n---\n\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","slug":"Floyd算法","published":1,"updated":"2021-04-11T06:25:26.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknctrs6m0000yjn2dddg8ue1","content":"<h2 id=\"Floyd-算法\"><a href=\"#Floyd-算法\" class=\"headerlink\" title=\"Floyd 算法\"></a>Floyd 算法</h2><p>&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>\n<a id=\"more\"></a>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;&ensp;代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Floyd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttTwoPointDis [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttPath        [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">Init</span><span class=\"params\">(tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tf.tTwoPointDis = tDis</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(tDis)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.tPath = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> f.tPath &#123;</span><br><span class=\"line\">\t\tf.tPath[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\tf.tPath[i][j] = <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"before\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(f.tTwoPointDis)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; r; k++ &#123; <span class=\"comment\">// 媒介</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tf.tPath[i][j] = k <span class=\"comment\">// 记录媒介</span></span><br><span class=\"line\">\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"after\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i != j &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(f.getPath(i, j))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">getPath</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123; <span class=\"comment\">// 打印路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f.tPath[i][j] == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\" \"</span> + strconv.Itoa(i) + <span class=\"string\">\" \"</span> + strconv.Itoa(j)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tk := f.tPath[i][j]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf := <span class=\"built_in\">new</span>(Floyd)</span><br><span class=\"line\">\tf.Init(tDis)</span><br><span class=\"line\">\tf.solve()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Floyd-算法\"><a href=\"#Floyd-算法\" class=\"headerlink\" title=\"Floyd 算法\"></a>Floyd 算法</h2><p>&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;&ensp;代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Floyd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttTwoPointDis [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttPath        [][]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">Init</span><span class=\"params\">(tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tf.tTwoPointDis = tDis</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(tDis)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.tPath = <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> f.tPath &#123;</span><br><span class=\"line\">\t\tf.tPath[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\tf.tPath[i][j] = <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"before\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tr := <span class=\"built_in\">len</span>(f.tTwoPointDis)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; r; k++ &#123; <span class=\"comment\">// 媒介</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tf.tPath[i][j] = k <span class=\"comment\">// 记录媒介</span></span><br><span class=\"line\">\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"after\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, tNums := <span class=\"keyword\">range</span> f.tTwoPointDis &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tNum := <span class=\"keyword\">range</span> tNums &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(tNum, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; r; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; r; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i != j &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(f.getPath(i, j))</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f *Floyd)</span> <span class=\"title\">getPath</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">string</span></span> &#123; <span class=\"comment\">// 打印路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f.tPath[i][j] == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\" \"</span> + strconv.Itoa(i) + <span class=\"string\">\" \"</span> + strconv.Itoa(j)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tk := f.tPath[i][j]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf := <span class=\"built_in\">new</span>(Floyd)</span><br><span class=\"line\">\tf.Init(tDis)</span><br><span class=\"line\">\tf.solve()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>"},{"title":"Hive/SQL日常总结","date":"2020-05-16T01:39:36.000Z","_content":"\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n","source":"_posts/Hive-SQL日常总结.md","raw":"---\ntitle: Hive/SQL日常总结\ndate: 2020-05-16 09:39:36\ncategories: SQL\ntags:\n---\n\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n","slug":"Hive-SQL日常总结","published":1,"updated":"2020-07-18T07:46:14.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknctrs6z0002yjn28gke1iec","content":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>\n<a id=\"more\"></a>\n<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xx1</td>\n<td style=\"text-align:center\">Tom</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xx2</td>\n<td style=\"text-align:center\">Jone</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对t1进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t1 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">对t2进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t2 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">使用t1 inner join t2</span><br><span class=\"line\"><span class=\"keyword\">select</span> * </span><br><span class=\"line\">  (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">  <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp1</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">   (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">    <span class=\"keyword\">from</span> t2 </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp2</span><br><span class=\"line\"> <span class=\"keyword\">on</span> tmp1.id=tmp2.id <span class=\"keyword\">and</span> tmp1.name=tmp2.name;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1</span><br><span class=\"line\"><span class=\"keyword\">minus</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2</span><br><span class=\"line\"><span class=\"keyword\">minus</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"2、分区表增加新的字段\"><a href=\"#2、分区表增加新的字段\" class=\"headerlink\" title=\"2、分区表增加新的字段\"></a>2、分区表增加新的字段</h2><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_nam <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>) <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Insert</span> overwrite <span class=\"keyword\">table</span> table_name <span class=\"keyword\">partition</span>(dt=’t’)</span><br><span class=\"line\">       <span class=\"keyword\">Select</span> col1, col2, col2,….</span><br><span class=\"line\">       <span class=\"keyword\">From</span> table_name</span><br><span class=\"line\">       <span class=\"keyword\">Where</span> dt=’t<span class=\"number\">-1</span>’</span><br></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>    <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    hobby   <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">add</span>     <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span></span><br><span class=\"line\"><span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">','</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">'-'</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">':'</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">'/user/hive/warehouse/...data'</span> overwrite <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> t1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1</span><br><span class=\"line\"><span class=\"keyword\">like</span> t2;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>","more":"<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xx1</td>\n<td style=\"text-align:center\">Tom</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xx2</td>\n<td style=\"text-align:center\">Jone</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对t1进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t1 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">对t2进行分组</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> t2 </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">使用t1 inner join t2</span><br><span class=\"line\"><span class=\"keyword\">select</span> * </span><br><span class=\"line\">  (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">  <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp1</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">   (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> <span class=\"keyword\">num</span> </span><br><span class=\"line\">    <span class=\"keyword\">from</span> t2 </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>) <span class=\"keyword\">as</span> tmp2</span><br><span class=\"line\"> <span class=\"keyword\">on</span> tmp1.id=tmp2.id <span class=\"keyword\">and</span> tmp1.name=tmp2.name;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1</span><br><span class=\"line\"><span class=\"keyword\">minus</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t2</span><br><span class=\"line\"><span class=\"keyword\">minus</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t1;</span><br></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"2、分区表增加新的字段\"><a href=\"#2、分区表增加新的字段\" class=\"headerlink\" title=\"2、分区表增加新的字段\"></a>2、分区表增加新的字段</h2><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_nam <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(c1 <span class=\"built_in\">int</span>) <span class=\"keyword\">cascade</span>;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Insert</span> overwrite <span class=\"keyword\">table</span> table_name <span class=\"keyword\">partition</span>(dt=’t’)</span><br><span class=\"line\">       <span class=\"keyword\">Select</span> col1, col2, col2,….</span><br><span class=\"line\">       <span class=\"keyword\">From</span> table_name</span><br><span class=\"line\">       <span class=\"keyword\">Where</span> dt=’t<span class=\"number\">-1</span>’</span><br></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1(</span><br><span class=\"line\">    <span class=\"keyword\">id</span>      <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span>    <span class=\"keyword\">string</span>,</span><br><span class=\"line\">    hobby   <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">add</span>     <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span></span><br><span class=\"line\"><span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">','</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">'-'</span></span><br><span class=\"line\"><span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">':'</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">'/user/hive/warehouse/...data'</span> overwrite <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> t1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">id</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> t2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t1</span><br><span class=\"line\"><span class=\"keyword\">like</span> t2;</span><br></pre></td></tr></table></figure>"},{"title":"Linux下压缩隐藏文件","date":"2020-05-03T10:28:53.000Z","_content":"\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","source":"_posts/Linux下压缩隐藏文件.md","raw":"---\ntitle: Linux下压缩隐藏文件\ndate: 2020-05-03 18:28:53\ncategories: Linux\ntags:\n---\n\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","slug":"Linux下压缩隐藏文件","published":1,"updated":"2020-07-18T07:46:14.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknctrs750006yjn2bv2kby80","content":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz abc/*   // 压缩</span><br><span class=\"line\">tar zxvf abc.tar.gz         // 解压</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>\n<a id=\"more\"></a>\n<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *</span><br></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”</span><br></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件</span><br></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz abc/*   // 压缩</span><br><span class=\"line\">tar zxvf abc.tar.gz         // 解压</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>","more":"<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz *</span><br></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”</span><br></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件</span><br></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>"},{"title":"dijkstra算法","mathjax":true,"date":"2020-07-05T08:07:53.000Z","_content":"\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","source":"_posts/dijkstra算法.md","raw":"---\ntitle: dijkstra算法\nmathjax: true\ndate: 2020-07-05 16:07:53\ncategories: 算法\ntags: dijkstra\n---\n\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","slug":"dijkstra算法","published":1,"updated":"2021-04-11T06:28:40.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknctrs770007yjn2beoo2xml","content":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>\n<a id=\"more\"></a>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tMaxDis  <span class=\"keyword\">int</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span><span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dijkstra <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttPints  []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ttTwoPointDis <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">Init</span><span class=\"params\">(tPoints []<span class=\"keyword\">string</span>, tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tPoints) != <span class=\"built_in\">len</span>(tDis) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"点数与矩阵的大小不一致\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tTwoPointDis = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(tPoints); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(tPoints); j++ &#123;</span><br><span class=\"line\">\t\t\tkey := tPoints[i] + <span class=\"string\">\"_\"</span> + tPoints[j]</span><br><span class=\"line\">\t\t\td.tTwoPointDis[key] = tDis[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tPints = tPoints</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttPoints := d.tPints[<span class=\"number\">1</span>:]                  <span class=\"comment\">// 未访问过的点</span></span><br><span class=\"line\">\tvisited := []<span class=\"keyword\">string</span>&#123;d.tPints[<span class=\"number\">0</span>]&#125;         <span class=\"comment\">// 访问过的点</span></span><br><span class=\"line\">\tsrc := d.tPints[<span class=\"number\">0</span>]                       <span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tpre, next := src, src</span><br><span class=\"line\"></span><br><span class=\"line\">\tpath := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 起点到其它点的路径</span></span><br><span class=\"line\">\tpath[src + <span class=\"string\">\"_\"</span> + src] = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdistanceGraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 起点到其它点的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(tPoints) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdistance := MaxDis</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ind <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dst <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> nextInd <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> visited &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ind, dst = <span class=\"keyword\">range</span> tPoints &#123;</span><br><span class=\"line\">\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + v] + d.tTwoPointDis[v + <span class=\"string\">\"_\"</span> + dst]  <span class=\"comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> newDis &lt; distance &#123;</span><br><span class=\"line\">\t\t\t\t\tdistance = newDis</span><br><span class=\"line\">\t\t\t\t\tpre = v</span><br><span class=\"line\">\t\t\t\t\tnext = dst</span><br><span class=\"line\">\t\t\t\t\tnextInd = ind</span><br><span class=\"line\">\t\t\t\t\td.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + dst] = distance</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tPoint := <span class=\"keyword\">range</span> path[src + <span class=\"string\">\"_\"</span> + pre] &#123;</span><br><span class=\"line\">\t\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], tPoint)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], next)  <span class=\"comment\">// 记录从src到next需经过的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdistanceGraph[src + <span class=\"string\">\"_\"</span> + next] = distance                     <span class=\"comment\">// 记录从src到next的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvisited = <span class=\"built_in\">append</span>(visited, next)</span><br><span class=\"line\">\t\ttPoints = <span class=\"built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">\tfmt.Println(distanceGraph)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td := <span class=\"built_in\">new</span>(Dijkstra)</span><br><span class=\"line\">\ttPoints := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>&#125;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>,      <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\td.Init(tPoints, tDis)</span><br><span class=\"line\">\td.dijkstra()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tMaxDis  <span class=\"keyword\">int</span> = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span><span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dijkstra <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ttPints  []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ttTwoPointDis <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">Init</span><span class=\"params\">(tPoints []<span class=\"keyword\">string</span>, tDis [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tPoints) != <span class=\"built_in\">len</span>(tDis) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"点数与矩阵的大小不一致\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tTwoPointDis = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(tPoints); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(tPoints); j++ &#123;</span><br><span class=\"line\">\t\t\tkey := tPoints[i] + <span class=\"string\">\"_\"</span> + tPoints[j]</span><br><span class=\"line\">\t\t\td.tTwoPointDis[key] = tDis[i][j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.tPints = tPoints</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dijkstra)</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttPoints := d.tPints[<span class=\"number\">1</span>:]                  <span class=\"comment\">// 未访问过的点</span></span><br><span class=\"line\">\tvisited := []<span class=\"keyword\">string</span>&#123;d.tPints[<span class=\"number\">0</span>]&#125;         <span class=\"comment\">// 访问过的点</span></span><br><span class=\"line\">\tsrc := d.tPints[<span class=\"number\">0</span>]                       <span class=\"comment\">// 起点</span></span><br><span class=\"line\">\tpre, next := src, src</span><br><span class=\"line\"></span><br><span class=\"line\">\tpath := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 起点到其它点的路径</span></span><br><span class=\"line\">\tpath[src + <span class=\"string\">\"_\"</span> + src] = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdistanceGraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)  <span class=\"comment\">// 起点到其它点的距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(tPoints) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tdistance := MaxDis</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ind <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dst <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> nextInd <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> visited &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ind, dst = <span class=\"keyword\">range</span> tPoints &#123;</span><br><span class=\"line\">\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + v] + d.tTwoPointDis[v + <span class=\"string\">\"_\"</span> + dst]  <span class=\"comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> newDis &lt; distance &#123;</span><br><span class=\"line\">\t\t\t\t\tdistance = newDis</span><br><span class=\"line\">\t\t\t\t\tpre = v</span><br><span class=\"line\">\t\t\t\t\tnext = dst</span><br><span class=\"line\">\t\t\t\t\tnextInd = ind</span><br><span class=\"line\">\t\t\t\t\td.tTwoPointDis[src + <span class=\"string\">\"_\"</span> + dst] = distance</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, tPoint := <span class=\"keyword\">range</span> path[src + <span class=\"string\">\"_\"</span> + pre] &#123;</span><br><span class=\"line\">\t\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], tPoint)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpath[src + <span class=\"string\">\"_\"</span> + next] = <span class=\"built_in\">append</span>(path[src + <span class=\"string\">\"_\"</span> + next], next)  <span class=\"comment\">// 记录从src到next需经过的路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdistanceGraph[src + <span class=\"string\">\"_\"</span> + next] = distance                     <span class=\"comment\">// 记录从src到next的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvisited = <span class=\"built_in\">append</span>(visited, next)</span><br><span class=\"line\">\t\ttPoints = <span class=\"built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(path)</span><br><span class=\"line\">\tfmt.Println(distanceGraph)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td := <span class=\"built_in\">new</span>(Dijkstra)</span><br><span class=\"line\">\ttPoints := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>&#125;</span><br><span class=\"line\">\ttDis := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>,      <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">127</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">127</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\td.Init(tPoints, tDis)</span><br><span class=\"line\">\td.dijkstra()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>"},{"title":"延迟接受算法","mathjax":true,"date":"2020-07-18T06:17:59.000Z","_content":"\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","source":"_posts/延迟接受算法.md","raw":"---\ntitle: 延迟接受算法\nmathjax: true\ndate: 2020-07-18 14:17:59\ncategories: 算法\ntags: late acceptance\n---\n\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","slug":"延迟接受算法","published":1,"updated":"2021-04-12T10:53:25.483Z","_id":"cknctrs790008yjn24tkreg23","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\" target=\"_blank\" rel=\"noopener\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>\n<a id=\"more\"></a>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"TSP/ioinfo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"TSP/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LateAcceptance <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tn       <span class=\"keyword\">int</span></span><br><span class=\"line\">\ttScore []<span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Init</span><span class=\"params\">(n <span class=\"keyword\">int</span>, pStartScore <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tl.n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l.n; i++ &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pStartScore)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Accept</span><span class=\"params\">(pScore <span class=\"keyword\">float64</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pAccept <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pAccept &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pScore)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l.tScore) &gt;= l.n &#123;</span><br><span class=\"line\">\t\tl.tScore = l.tScore[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pAccept</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changCity1</span><span class=\"params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"title\">ioinfo</span>.<span class=\"title\">Data</span></span> &#123;</span><br><span class=\"line\">\tpos1 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)<span class=\"number\">-3</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">\tpos2 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)-pos1<span class=\"number\">-1</span>) + pos1</span><br><span class=\"line\">\tdataDest := <span class=\"built_in\">make</span>([]ioinfo.Data, <span class=\"built_in\">len</span>(dataSrc))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dataDest, dataSrc)</span><br><span class=\"line\">\tr := R1.Intn(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pos1 &lt; pos2 &#123;</span><br><span class=\"line\">\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t\t\tpos1 ++</span><br><span class=\"line\">\t\t\tpos2 --</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataDest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">La</span><span class=\"params\">(pFileName <span class=\"keyword\">string</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\tdata := util.GetSampleData(pFileName, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\tr := util.GetResult(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpLa := <span class=\"built_in\">new</span>(LateAcceptance)</span><br><span class=\"line\">\tpLa.Init(<span class=\"number\">215</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := time.Now().UnixNano()</span><br><span class=\"line\">\tpIterNum := <span class=\"number\">200000</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> pIterNum &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttemp := changCity1(data, *R1)</span><br><span class=\"line\">\t\trn := util.GetResult(temp)  <span class=\"comment\">// 计算当前解的里程 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pLa.Accept(rn) &#123;</span><br><span class=\"line\">\t\t\tdata = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIterNum--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts2 := time.Now().UnixNano()</span><br><span class=\"line\">\tfmt.Println(data, s2 -s1)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> util.GetResult(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟接受启动：</span><br><span class=\"line\">[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns</span><br><span class=\"line\">588.1953208548182</span><br></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\" target=\"_blank\" rel=\"noopener\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"TSP/ioinfo\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"TSP/util\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LateAcceptance <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tn       <span class=\"keyword\">int</span></span><br><span class=\"line\">\ttScore []<span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Init</span><span class=\"params\">(n <span class=\"keyword\">int</span>, pStartScore <span class=\"keyword\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tl.n = n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l.n; i++ &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pStartScore)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *LateAcceptance)</span> <span class=\"title\">Accept</span><span class=\"params\">(pScore <span class=\"keyword\">float64</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pAccept <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pScore &lt;= l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tpAccept = <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pAccept &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, pScore)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tl.tScore = <span class=\"built_in\">append</span>(l.tScore, l.tScore[<span class=\"built_in\">len</span>(l.tScore) - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l.tScore) &gt;= l.n &#123;</span><br><span class=\"line\">\t\tl.tScore = l.tScore[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pAccept</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changCity1</span><span class=\"params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"title\">ioinfo</span>.<span class=\"title\">Data</span></span> &#123;</span><br><span class=\"line\">\tpos1 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)<span class=\"number\">-3</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">\tpos2 := R1.Intn(<span class=\"built_in\">len</span>(dataSrc)-pos1<span class=\"number\">-1</span>) + pos1</span><br><span class=\"line\">\tdataDest := <span class=\"built_in\">make</span>([]ioinfo.Data, <span class=\"built_in\">len</span>(dataSrc))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dataDest, dataSrc)</span><br><span class=\"line\">\tr := R1.Intn(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> pos1 &lt; pos2 &#123;</span><br><span class=\"line\">\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t\t\tpos1 ++</span><br><span class=\"line\">\t\t\tpos2 --</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dataDest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">La</span><span class=\"params\">(pFileName <span class=\"keyword\">string</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\tdata := util.GetSampleData(pFileName, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\tr := util.GetResult(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpLa := <span class=\"built_in\">new</span>(LateAcceptance)</span><br><span class=\"line\">\tpLa.Init(<span class=\"number\">215</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := time.Now().UnixNano()</span><br><span class=\"line\">\tpIterNum := <span class=\"number\">200000</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> pIterNum &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ttemp := changCity1(data, *R1)</span><br><span class=\"line\">\t\trn := util.GetResult(temp)  <span class=\"comment\">// 计算当前解的里程 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pLa.Accept(rn) &#123;</span><br><span class=\"line\">\t\t\tdata = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIterNum--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts2 := time.Now().UnixNano()</span><br><span class=\"line\">\tfmt.Println(data, s2 -s1)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> util.GetResult(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟接受启动：</span><br><span class=\"line\">[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns</span><br><span class=\"line\">588.1953208548182</span><br></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>"},{"title":"排课程","date":"2021-01-10T08:18:59.000Z","_content":"\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","source":"_posts/排课程.md","raw":"---\ntitle: 排课程\ndate: 2021-01-10 16:18:59\ncategories: leetcode\ntags: alogithm\n---\n\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","slug":"排课程","published":1,"updated":"2021-01-10T08:18:27.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknctrs7e000cyjn2a7yq8l1i","content":"<h2 id=\"排课程\"><a href=\"#排课程\" class=\"headerlink\" title=\"排课程\"></a>排课程</h2><p>&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>&emsp;&emsp;题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>&emsp;&emsp;There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>&emsp;&emsp;Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canFinish</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites)) <span class=\"comment\">// 建立图 </span></span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)  <span class=\"comment\">// 记录出度</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, a := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[a[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[a[<span class=\"number\">1</span>]], a[<span class=\"number\">0</span>]) <span class=\"comment\">// key为先学的课程</span></span><br><span class=\"line\">\t\tin[a[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"comment\">// 出度为0的课程加入队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123; <span class=\"comment\">// 与其相关课程的出度减一</span></span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 若出度为0，加入队列</span></span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pre != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourses := <span class=\"number\">2</span></span><br><span class=\"line\">\tprerequisite := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(canFinish(numCourses, prerequisite))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">1</span>]], pre[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\tin[pre[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, front) <span class=\"comment\">// 将课程编号加入到结果中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123;</span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(res) == numCourses &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder1</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">0</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">0</span>]], pre[<span class=\"number\">1</span>]) <span class=\"comment\">// key为后学的课程</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvisited := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfsFindOrder</span><span class=\"params\">(graph <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, visited *[]<span class=\"keyword\">int</span>, i <span class=\"keyword\">int</span>, res *[]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">len</span>(graph[i]); k++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*res = <span class=\"built_in\">append</span>(*res, i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourse := <span class=\"number\">4</span></span><br><span class=\"line\">\tprerequisites := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(findOrder(numCourse, prerequisites))</span><br><span class=\"line\">\tfmt.Println(findOrder1(numCourse, prerequisites))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"排课程\"><a href=\"#排课程\" class=\"headerlink\" title=\"排课程\"></a>排课程</h2><p>&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>&emsp;&emsp;题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>&emsp;&emsp;There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>","more":"<p>&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>&emsp;&emsp;Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canFinish</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites)) <span class=\"comment\">// 建立图 </span></span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)  <span class=\"comment\">// 记录出度</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, a := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[a[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[a[<span class=\"number\">1</span>]], a[<span class=\"number\">0</span>]) <span class=\"comment\">// key为先学的课程</span></span><br><span class=\"line\">\t\tin[a[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"comment\">// 出度为0的课程加入队列</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123; <span class=\"comment\">// 与其相关课程的出度减一</span></span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 若出度为0，加入队列</span></span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pre != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourses := <span class=\"number\">2</span></span><br><span class=\"line\">\tprerequisite := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(canFinish(numCourses, prerequisite))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\tin := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">1</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">1</span>]], pre[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\tin[pre[<span class=\"number\">0</span>]]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> in[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tqueue = <span class=\"built_in\">append</span>(queue, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tfront := queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tqueue = queue[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, front) <span class=\"comment\">// 将课程编号加入到结果中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, next := <span class=\"keyword\">range</span> graph[front] &#123;</span><br><span class=\"line\">\t\t\tin[next]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> in[next] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tqueue = <span class=\"built_in\">append</span>(queue, next)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(res) == numCourses &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findOrder1</span><span class=\"params\">(numCourses <span class=\"keyword\">int</span>, prerequisites [][]<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> numCourses == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(prerequisites))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pre := <span class=\"keyword\">range</span> prerequisites &#123;</span><br><span class=\"line\">\t\tgraph[pre[<span class=\"number\">0</span>]] = <span class=\"built_in\">append</span>(graph[pre[<span class=\"number\">0</span>]], pre[<span class=\"number\">1</span>]) <span class=\"comment\">// key为后学的课程</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvisited := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, numCourses)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfsFindOrder</span><span class=\"params\">(graph <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>, visited *[]<span class=\"keyword\">int</span>, i <span class=\"keyword\">int</span>, res *[]<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">len</span>(graph[i]); k++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t(*visited)[i] = <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*visited)[i] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*res = <span class=\"built_in\">append</span>(*res, i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnumCourse := <span class=\"number\">4</span></span><br><span class=\"line\">\tprerequisites := [][]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(findOrder(numCourse, prerequisites))</span><br><span class=\"line\">\tfmt.Println(findOrder1(numCourse, prerequisites))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>"},{"title":"Prim算法","mathjax":true,"date":"2021-04-11T08:17:50.000Z","caytegories":"算法","_content":"\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","source":"_posts/Prim算法.md","raw":"---\ntitle: Prim算法\nmathjax: true\ndate: 2021-04-11 16:17:50\ncaytegories: 算法\ntags: prim\n---\n\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","slug":"Prim算法","published":1,"updated":"2021-04-11T09:43:01.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknczbuim00008sn27vwv4mx3","content":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><p>&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持”连通性”的前提下的最小子图，子图各个边的权重之和最小。</p>\n<a id=\"more\"></a>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3><p>&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将$u_k$从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  m := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">  V := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> U []<span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; m<span class=\"number\">-1</span>; k++ &#123;</span><br><span class=\"line\">    min := <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    ind1, ind2 := <span class=\"number\">-1</span>, <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> V &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> U &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;</span><br><span class=\"line\">          min = matrix[V[i]][U[j]]</span><br><span class=\"line\">          ind1, ind2 = i, j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(V[ind1], U[ind2], min)</span><br><span class=\"line\">    V = <span class=\"built_in\">append</span>(V, U[ind2])</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U[:ind2], U[ind2+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  matrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prim(matrix)</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  prim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim1</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">\tdis := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\tdis[i] = matrix[<span class=\"number\">0</span>][i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatus := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">bool</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m<span class=\"number\">-1</span>; i++ &#123; <span class=\"comment\">// 需要找剩余的点</span></span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123; <span class=\"comment\">// 每次遍历剩余的所有点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dis[t] &gt; dis[j]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres += dis[t]</span><br><span class=\"line\">\t\tfmt.Println(i, t, dis[t])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;</span><br><span class=\"line\">\t\t\t\tdis[j] = matrix[t][j]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstatus[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmatrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprim(matrix)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">\tprim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><p>&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持”连通性”的前提下的最小子图，子图各个边的权重之和最小。</p>","more":"<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3><p>&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将$u_k$从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  m := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">  V := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> U []<span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; m<span class=\"number\">-1</span>; k++ &#123;</span><br><span class=\"line\">    min := <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    ind1, ind2 := <span class=\"number\">-1</span>, <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> V &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> j := <span class=\"keyword\">range</span> U &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;</span><br><span class=\"line\">          min = matrix[V[i]][U[j]]</span><br><span class=\"line\">          ind1, ind2 = i, j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(V[ind1], U[ind2], min)</span><br><span class=\"line\">    V = <span class=\"built_in\">append</span>(V, U[ind2])</span><br><span class=\"line\">    U = <span class=\"built_in\">append</span>(U[:ind2], U[ind2+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  matrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prim(matrix)</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  prim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prim1</span><span class=\"params\">(matrix [][]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">len</span>(matrix)</span><br><span class=\"line\">\tdis := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\tdis[i] = matrix[<span class=\"number\">0</span>][i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstatus := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">bool</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m<span class=\"number\">-1</span>; i++ &#123; <span class=\"comment\">// 需要找剩余的点</span></span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123; <span class=\"comment\">// 每次遍历剩余的所有点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dis[t] &gt; dis[j]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres += dis[t]</span><br><span class=\"line\">\t\tfmt.Println(i, t, dis[t])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt; m; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;</span><br><span class=\"line\">\t\t\t\tdis[j] = matrix[t][j]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstatus[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmatrix := [][]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">128</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">128</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprim(matrix)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">\tprim1(matrix)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cknctrs770007yjn2beoo2xml","category_id":"cknctrs730004yjn2dm3pei0p","_id":"cknctrs7i000dyjn28j8t1k35"},{"post_id":"cknctrs6m0000yjn2dddg8ue1","category_id":"cknctrs730004yjn2dm3pei0p","_id":"cknctrs7j000fyjn2d1df5biv"},{"post_id":"cknctrs790008yjn24tkreg23","category_id":"cknctrs730004yjn2dm3pei0p","_id":"cknctrs7k000iyjn2hhor0iw8"},{"post_id":"cknctrs6z0002yjn28gke1iec","category_id":"cknctrs7b0009yjn21tvn2b65","_id":"cknctrs7l000kyjn2d4d8cda2"},{"post_id":"cknctrs750006yjn2bv2kby80","category_id":"cknctrs7i000eyjn216i35j3s","_id":"cknctrs7m000nyjn285l2aprr"},{"post_id":"cknctrs7e000cyjn2a7yq8l1i","category_id":"cknctrs7k000jyjn271f0cv3r","_id":"cknctrs7m000pyjn2hwbz0pf5"}],"PostTag":[{"post_id":"cknctrs6m0000yjn2dddg8ue1","tag_id":"cknctrs740005yjn2a2eo88o8","_id":"cknctrs7e000byjn2afi6hfoh"},{"post_id":"cknctrs770007yjn2beoo2xml","tag_id":"cknctrs7d000ayjn27y2qgce7","_id":"cknctrs7j000hyjn2dgc247zt"},{"post_id":"cknctrs790008yjn24tkreg23","tag_id":"cknctrs7j000gyjn20g846f2j","_id":"cknctrs7m000myjn2e97k8054"},{"post_id":"cknctrs7e000cyjn2a7yq8l1i","tag_id":"cknctrs7l000lyjn28fx9cuvx","_id":"cknctrs7m000oyjn2cwv67itf"},{"post_id":"cknczbuim00008sn27vwv4mx3","tag_id":"cknczbuit00018sn218w84leq","_id":"cknczbuiv00028sn263cegg09"}],"Tag":[{"name":"floyd","_id":"cknctrs740005yjn2a2eo88o8"},{"name":"dijkstra","_id":"cknctrs7d000ayjn27y2qgce7"},{"name":"late acceptance","_id":"cknctrs7j000gyjn20g846f2j"},{"name":"alogithm","_id":"cknctrs7l000lyjn28fx9cuvx"},{"name":"prim","_id":"cknczbuit00018sn218w84leq"}]}}