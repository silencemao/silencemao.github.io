{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0},{"_id":"source/images/entropy.png","path":"images/entropy.png","modified":1,"renderable":0},{"_id":"source/images/exp.gif","path":"images/exp.gif","modified":1,"renderable":0},{"_id":"source/images/lahc.jpg","path":"images/lahc.jpg","modified":1,"renderable":0},{"_id":"source/images/lgb_alg1_his.png","path":"images/lgb_alg1_his.png","modified":1,"renderable":0},{"_id":"source/images/lgb_alg2_goss.png","path":"images/lgb_alg2_goss.png","modified":1,"renderable":0},{"_id":"source/images/lgb_alg3_efb.png","path":"images/lgb_alg3_efb.png","modified":1,"renderable":0},{"_id":"source/images/sa.png","path":"images/sa.png","modified":1,"renderable":0},{"_id":"source/images/xgb.png","path":"images/xgb.png","modified":1,"renderable":0},{"_id":"source/images/xgb1.png","path":"images/xgb1.png","modified":1,"renderable":0},{"_id":"source/images/xgb2.png","path":"images/xgb2.png","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default_bak.png","path":"img/default_bak.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon_bak.png","path":"img/favicon_bak.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"5caedd72e78c0eb25cc94b0663f05a74f0d8a34e","modified":1622812420076},{"_id":"source/_posts/2022年周报-md.md","hash":"c4c711e0066eddd60c5c0196171d1c25f43d4362","modified":1667141273907},{"_id":"source/_posts/.DS_Store","hash":"746d62b110389e2cd452b05da0288dbf73e3df9e","modified":1664110390654},{"_id":"source/_posts/Floyd算法.md","hash":"1edf8217c0bb7f023ca3db60e5e318aa48a1bc8d","modified":1622812420074},{"_id":"source/.DS_Store","hash":"0fdcebaae37778799765c20ec08103c3abb5fda9","modified":1656210081516},{"_id":"source/_posts/Linux下压缩隐藏文件.md","hash":"211c3e129c6692fc421712b59b312dcee7dae0a3","modified":1622812420075},{"_id":"source/_posts/Prim算法.md","hash":"14c8af6ea5185a244679742acad113249e16d10a","modified":1622812420075},{"_id":"source/_posts/LightGBM算法原理.md","hash":"d40abb72bca6b2721f26c6e36aa4ce240fdf1a7d","modified":1656240498585},{"_id":"source/_posts/XGBoost介绍.md","hash":"833a3564d1259ebb45f3c7b5fd3bf02b0b089c3c","modified":1656240311364},{"_id":"source/_posts/Hive-SQL日常总结.md","hash":"6460f39dc6dfd367f93bae1c2a6679563eaf3a9a","modified":1642344987256},{"_id":"source/_posts/Spark和Pandas结合使用-md.md","hash":"b90603b14efab7ed19afd30d0d9c8dedce20e7cf","modified":1653135417836},{"_id":"source/_posts/dijkstra算法.md","hash":"8edd695fbc45d1cefffbc379cbf0d5a173b3e07e","modified":1622812420075},{"_id":"source/_posts/工作心得总结.md","hash":"53920a53e3b9b2d49a4623bc90420ae0b585c7fa","modified":1625890880657},{"_id":"source/_posts/决策树.md","hash":"ef28618c1b05703badfe86c23fcec7b4ed147861","modified":1641737141839},{"_id":"source/_posts/排课程.md","hash":"e996c0f3e31e2b0f31ebb6a61966deaf85905126","modified":1622812420076},{"_id":"source/_posts/延迟接受算法.md","hash":"bb58814d1c24809ccd64fbe8bf6275e76447bb57","modified":1641189746319},{"_id":"source/images/.DS_Store","hash":"dc9fde9875fcbc5d174208091f15a3252d492bda","modified":1656252051168},{"_id":"source/_posts/Spark-使用总结.md","hash":"dee52602648d160738cd81259b5f33e31dae7c69","modified":1653129198524},{"_id":"source/_posts/资源均分.md","hash":"727411420fd0edf04395e3812e614b4affdb93f8","modified":1622818986884},{"_id":"source/_posts/模拟退火算法.md","hash":"bd15a633a13b2192864881b1472dd725dfabc511","modified":1641258061389},{"_id":"source/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1622812420076},{"_id":"source/images/entropy.png","hash":"595eae926dd97a9ed8d2493229d8a8fdb5d879da","modified":1641732423258},{"_id":"source/images/exp.gif","hash":"e64cac49e49a2af34a1496718adec20159101f22","modified":1635666034139},{"_id":"source/images/sa.png","hash":"b0d4043b33156f41b14db0a51f79ab562ac75af0","modified":1635664789003},{"_id":"source/categories/index.md","hash":"e2368480d2b74efe2773a3edcf6bf6b9ba7a48f2","modified":1622812420076},{"_id":"source/images/lgb_alg1_his.png","hash":"f7a80ddfe6b249db81f76129cb8108dfa7980f06","modified":1656239806893},{"_id":"source/images/xgb.png","hash":"814ca7ec8078efd99b7b956877c6b104532a9805","modified":1649123373061},{"_id":"source/images/lgb_alg2_goss.png","hash":"e40e34e7ee0348452551dd57e8c6ca121f3cb8dd","modified":1656239844497},{"_id":"source/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1622812420077},{"_id":"source/images/lgb_alg3_efb.png","hash":"790d8f0d6d4c55a7b3c988fb37d72f6291c6478e","modified":1656239908216},{"_id":"source/images/xgb2.png","hash":"eed7e290b17e05880de8760df383855f2c085615","modified":1649147723250},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640938356000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1640938356000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1640938356000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1640938356000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1640938356000},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1640938356000},{"_id":"themes/fluid/package.json","hash":"4e3992cacd64c6888218b0346283258e8f82a27d","modified":1640938356000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1640938356000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1640938356000},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1640938356000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1640938356000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1640938356000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1640938356000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1640938356000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1640938356000},{"_id":"themes/fluid/_config.yml","hash":"430ad2d90fb5ff208a0fd1e68d9cdbbdbb0913c3","modified":1641189807161},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1640938356000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1640938356000},{"_id":"themes/fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1640938356000},{"_id":"themes/fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1640938356000},{"_id":"themes/fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1640938356000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1640938356000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1640938356000},{"_id":"themes/fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1640938356000},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1640938356000},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1640938356000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1640938356000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1640938356000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1640938356000},{"_id":"themes/fluid/source/.DS_Store","hash":"c83f37aa9cf990b37469d78c0435636a7ab4aec2","modified":1641188499106},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1640938356000},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1640938356000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1640938356000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1640938356000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1640938356000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1640938356000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1640938356000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1640938356000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1640938356000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1640938356000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640938356000},{"_id":"themes/fluid/source/img/.DS_Store","hash":"5ab224c0daf5ea94f6ac1f703a7e882075a0624f","modified":1641189622773},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1640938356000},{"_id":"themes/fluid/source/img/default_bak.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640938356000},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1640938356000},{"_id":"themes/fluid/source/img/favicon_bak.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640938356000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1640938356000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640938356000},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1640938356000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1640938356000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640938356000},{"_id":"themes/fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1640938356000},{"_id":"themes/fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1640938356000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1640938356000},{"_id":"themes/fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1640938356000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"df6941bd3b860180d01fd39ee859ed2d42f4d1f0","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"fd5fcb6a61ad865197a778eeae889b80484227dd","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1640938356000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1640938356000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1640938356000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"08b455b848b21d57e0563b87071c4bae2b63bafe","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"c2d8bfd04bf0734b387c049402b46a06a05fc582","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"80098e8354069631bde8edcd1181a53091a92949","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"a2993f23701de9a83e3f428300e62c5c52b4ff4b","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"5e86487de0f16c30ca3e16460ab94b57620e31c5","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1640938356000},{"_id":"themes/fluid/.DS_Store","hash":"3084ae5aa28f24656ef2fce86e6a09f5f3e08585","modified":1641188492825},{"_id":"source/images/xgb1.png","hash":"404da26408959bc1ccdb7f7c0a9ac126db8f26ba","modified":1649147121520},{"_id":"themes/fluid/source/img/default.png","hash":"7100cdb0780457a27fd9fe21b1fd8946d7167f64","modified":1641188523611},{"_id":"themes/fluid/source/img/favicon.png","hash":"dcd98894e26f76ba85f55da48c0653d143d979d0","modified":1641188472057},{"_id":"public/local-search.xml","hash":"eaee15351197a2569c16d519671512d907b4c138","modified":1667141471661},{"_id":"public/about/index.html","hash":"400f869e13d4b8c5fafc1827f5a36961774a47c5","modified":1667141471661},{"_id":"public/categories/算法/index.html","hash":"bb8b817aa07c9a1bd9aa663108e4030b0f2fdea3","modified":1667141471661},{"_id":"public/categories/SQL/index.html","hash":"7356dac0d381772f4e464f7005ffc75702a4bae1","modified":1667141471661},{"_id":"public/categories/周报/index.html","hash":"45f87a523a54d7ecc54aac0248d7a922e193c175","modified":1667141471661},{"_id":"public/categories/机器学习/index.html","hash":"ddf7e8524a021be23b015a5f2ce90cbae32011aa","modified":1667141471661},{"_id":"public/categories/Linux/index.html","hash":"158d2e0f84f4ea5d8ea76c2ee4648f071f65ea53","modified":1667141471661},{"_id":"public/categories/总结/index.html","hash":"a3b4ef5d799d833159dddb9cc4ed1e81ba43d8d4","modified":1667141471661},{"_id":"public/categories/leetcode/index.html","hash":"1db1adc36900ede31f8dd25d8c131a16cd6da28b","modified":1667141471661},{"_id":"public/tags/周报/index.html","hash":"94c3b62f316f70f91118b194c9321de029630192","modified":1667141471661},{"_id":"public/tags/floyd/index.html","hash":"f4cd064dbd64d519c4a6fd6e95d482bb93437269","modified":1667141471661},{"_id":"public/tags/树模型/index.html","hash":"ea1f68c77141081b18d63f5f624d936f7e01dd80","modified":1667141471661},{"_id":"public/tags/prim/index.html","hash":"0ee4bbd3535aa36b42d604a959058601e4410675","modified":1667141471661},{"_id":"public/tags/spark/index.html","hash":"0b19473ecebd78a024f0564a6b4476ecae6e75f9","modified":1667141471661},{"_id":"public/tags/dijkstra/index.html","hash":"2f0b3f521db4af6f43d052e5d312ebfb37deffd7","modified":1667141471661},{"_id":"public/tags/late-acceptance/index.html","hash":"4dd412b9a72d36bfeae7a87731158cf17e885352","modified":1667141471661},{"_id":"public/tags/经验总结/index.html","hash":"d34364ee0406efa6fc6ccbdec4740bc48318bfc0","modified":1667141471661},{"_id":"public/tags/alogithm/index.html","hash":"86e14a5f065e0567cb8e131aab842b76bf91fdf2","modified":1667141471661},{"_id":"public/tags/模拟退火/index.html","hash":"9379f0f8d7cced05d63e222c4a95fee01220c5ac","modified":1667141471661},{"_id":"public/tags/资源均分/index.html","hash":"027d01fed4c0a52b33125003aa821e466ca03301","modified":1667141471661},{"_id":"public/archives/index.html","hash":"ab8a87c8b7cb998c2bf83a39b3347449d3b80a0d","modified":1667141471661},{"_id":"public/archives/page/2/index.html","hash":"427fd1f0b1931f7505a63f04bb967d8e6b0594b6","modified":1667141471661},{"_id":"public/archives/2020/index.html","hash":"c2f8d55e40d7e71510cb91a23ae3c829daf11bfb","modified":1667141471661},{"_id":"public/archives/2020/05/index.html","hash":"82ecd4fdb3ed3b68a7deb21b7d16ae05163a69b7","modified":1667141471661},{"_id":"public/archives/2021/index.html","hash":"c1f3890551ec519b5663480fc9c74b2f187d4f0e","modified":1667141471661},{"_id":"public/archives/2020/07/index.html","hash":"04b3a9c7b8f65fb14998e8460957b585fe7dc967","modified":1667141471661},{"_id":"public/archives/2021/01/index.html","hash":"b9e5da42ecda3fd59fb2216ee066f8fffaa3f81a","modified":1667141471661},{"_id":"public/archives/2021/04/index.html","hash":"e7e2b1ce6bc10985ec3528174adc78417ef1c740","modified":1667141471661},{"_id":"public/archives/2021/06/index.html","hash":"842d6455a710675fea43c440e626b5c519913669","modified":1667141471661},{"_id":"public/archives/2021/07/index.html","hash":"35f0d427db8e4225fc450c0c7fb5af80e3e0d106","modified":1667141471661},{"_id":"public/archives/2021/10/index.html","hash":"1f85274ccfd2ea8a033c87542475396a2942c959","modified":1667141471661},{"_id":"public/archives/2022/01/index.html","hash":"a88f8d9c1e1489b946e220c7d02d09e42be551a2","modified":1667141471661},{"_id":"public/archives/2022/index.html","hash":"01969f42ca8ca741a5afa6d82ecf4c4a6d0f16dc","modified":1667141471661},{"_id":"public/archives/2022/04/index.html","hash":"a2ccfe962c241b0d4833dcf261b9b92d7974ec23","modified":1667141471661},{"_id":"public/archives/2022/06/index.html","hash":"674f2ba574b0aa52766aecab85c2842ff7694c75","modified":1667141471661},{"_id":"public/archives/2022/05/index.html","hash":"33af7377ca006d57608e9e2945569900ad798619","modified":1667141471661},{"_id":"public/archives/2022/09/index.html","hash":"7bb40b9e89f6e6a5a9cc5f6121162088ecbce428","modified":1667141471661},{"_id":"public/tags/index.html","hash":"a4d066ef6efd13b2bd5fdc2d4cbb91e034554ff2","modified":1667141471661},{"_id":"public/404.html","hash":"2b6d9f8af8fda31daf609fb6404e297ca58ff74a","modified":1667141471661},{"_id":"public/links/index.html","hash":"eef3e9bd228aaaf2bbac66c52faf5cd64083fd34","modified":1667141471661},{"_id":"public/categories/index.html","hash":"4fefcb055cfda52a65e0b3331877317f50fad030","modified":1667141471661},{"_id":"public/2022/09/10/2022年周报-md/index.html","hash":"40512b00099d7d0d188fb15670e1c5403633e39d","modified":1667141471661},{"_id":"public/2022/01/03/决策树/index.html","hash":"d6a4d4a273ba0486b33faf75501a4e4271ac0189","modified":1667141471661},{"_id":"public/2022/06/26/LightGBM算法原理/index.html","hash":"196eb8a3cd1c882af802a36515a9c2bf976a79e8","modified":1667141471661},{"_id":"public/2022/05/21/Spark和Pandas结合使用-md/index.html","hash":"bceea62e35dcf3cbde716ec709c2a1d381c61e8b","modified":1667141471661},{"_id":"public/2022/04/05/XGBoost介绍/index.html","hash":"5d5dfc1bbd25e0609eb0c24fd4c1975d2a006663","modified":1667141471661},{"_id":"public/2021/10/30/模拟退火算法/index.html","hash":"4c3077f51c36969d0ee39d80ed9bada70053c0d7","modified":1667141471661},{"_id":"public/2021/07/20/Spark-使用总结/index.html","hash":"efea4f1058c047e6b81f7c5bab93335e9cc06219","modified":1667141471661},{"_id":"public/2021/07/10/工作心得总结/index.html","hash":"94c9847e835f926aa3c423a5cc42461a7e1f54cc","modified":1667141471661},{"_id":"public/2021/06/04/资源均分/index.html","hash":"b57043aa3fd5c91f1de1ef7156f0b92b49e8fe11","modified":1667141471661},{"_id":"public/2021/04/11/Floyd算法/index.html","hash":"c66f48b90f2d12ad72eabe9df99b7cd95738819b","modified":1667141471661},{"_id":"public/2021/04/11/Prim算法/index.html","hash":"6418b6095c0e97d3b0e902ec050ac391d2fc2090","modified":1667141471661},{"_id":"public/2021/01/10/排课程/index.html","hash":"c7d92f3ae765c64390a84d69d6eef6dca9d5b987","modified":1667141471661},{"_id":"public/2020/07/18/延迟接受算法/index.html","hash":"f98eea4f83a4813b25511856c42c72f48408a8ae","modified":1667141471661},{"_id":"public/2020/07/05/dijkstra算法/index.html","hash":"774ecd84379297a24ba8fe7fa1f16dbd7deff090","modified":1667141471661},{"_id":"public/2020/05/03/Linux下压缩隐藏文件/index.html","hash":"f39dcad3ded9f504733fe17e55dfb13ece984c4a","modified":1667141471661},{"_id":"public/2020/05/16/Hive-SQL日常总结/index.html","hash":"dd50f18aec190f384ae86da691da0df2203cf0f8","modified":1667141471661},{"_id":"public/index.html","hash":"5dde68d70b8a773bb33c3639a95de9e6a8dcbc50","modified":1667141471661},{"_id":"public/page/2/index.html","hash":"0618ba5c0b97463f950243c72bec7d332af73d19","modified":1667141471661},{"_id":"public/images/entropy.png","hash":"595eae926dd97a9ed8d2493229d8a8fdb5d879da","modified":1667141471661},{"_id":"public/images/exp.gif","hash":"e64cac49e49a2af34a1496718adec20159101f22","modified":1667141471661},{"_id":"public/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1667141471661},{"_id":"public/images/sa.png","hash":"b0d4043b33156f41b14db0a51f79ab562ac75af0","modified":1667141471661},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1667141471661},{"_id":"public/img/favicon_bak.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1667141471661},{"_id":"public/img/default_bak.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1667141471661},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1667141471661},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1667141471661},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1667141471661},{"_id":"public/images/lgb_alg1_his.png","hash":"f7a80ddfe6b249db81f76129cb8108dfa7980f06","modified":1667141471661},{"_id":"public/images/xgb.png","hash":"814ca7ec8078efd99b7b956877c6b104532a9805","modified":1667141471661},{"_id":"public/images/lgb_alg2_goss.png","hash":"e40e34e7ee0348452551dd57e8c6ca121f3cb8dd","modified":1667141471661},{"_id":"public/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1667141471661},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1667141471661},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1667141471661},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1667141471661},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1667141471661},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1667141471661},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1667141471661},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1667141471661},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1667141471661},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1667141471661},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1667141471661},{"_id":"public/images/lgb_alg3_efb.png","hash":"790d8f0d6d4c55a7b3c988fb37d72f6291c6478e","modified":1667141471661},{"_id":"public/img/default.png","hash":"7100cdb0780457a27fd9fe21b1fd8946d7167f64","modified":1667141471661},{"_id":"public/images/xgb2.png","hash":"eed7e290b17e05880de8760df383855f2c085615","modified":1667141471661},{"_id":"public/images/xgb1.png","hash":"404da26408959bc1ccdb7f7c0a9ac126db8f26ba","modified":1667141471661},{"_id":"public/img/favicon.png","hash":"dcd98894e26f76ba85f55da48c0653d143d979d0","modified":1667141471661}],"Category":[{"name":"周报","_id":"cl9vgzkrm0004j4h20o40arv0"},{"name":"算法","_id":"cl9vgzkrq0009j4h22v3c0jsz"},{"name":"SQL","_id":"cl9vgzkrs000fj4h294qj5f19"},{"name":"机器学习","_id":"cl9vgzkru000lj4h2f0qgb31m"},{"name":"Linux","_id":"cl9vgzkrw000sj4h2gga17kdm"},{"name":"总结","_id":"cl9vgzks00011j4h2fdg06usk"},{"name":"leetcode","_id":"cl9vgzks9001kj4h20h0mgc2v"}],"Data":[],"Page":[{"title":"about","date":"2020-05-03T08:39:31.000Z","name":"silencemao","email":"silencekxm@gmail.com","_content":"\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","source":"about/index.md","raw":"\ntitle: about\ndate: 2020-05-03 16:39:31\nname: silencemao\nemail: silencekxm@gmail.com\n---\n\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","updated":"2021-06-04T13:13:40.076Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl9vgzkrf0000j4h2hbja29ws","content":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: silencekxm@gmail.com</p>\n","site":{"data":{}},"wordcount":78,"excerpt":"","more":"<p>&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。<br>&emsp;&emsp;email: silencekxm@gmail.com</p>\n"},{"title":"categories","date":"2020-05-03T09:01:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-05-03 17:01:42\ntype: \"categories\"\n---\n","updated":"2021-06-04T13:13:40.076Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl9vgzkrl0002j4h2h9265ly4","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"2022年周报.md","date":"2022-09-10T14:08:00.000Z","_content":"\n## 前言\n\n&emsp;&emsp;2022年已过去半年多，年初给自己定下的目标都没有实现，越发的感觉这样下去不行，又会荒废一年。回想过去的8个多月，没有太多记忆点，自己没有什么成长，甚是懊恼。\n\n&emsp;&emsp;平时上班还每周都写周报，那虽然是应付老板，让老板有东西汇报，可是却无法给自己一个交代，浑浑噩噩的过下去不行。所以必须要做些总结复盘，这样自己才能回望过去一段时间哪些地方做的不好，要做出改进，哪些地方做的好，要继续努力下去。\n\n------\n\n### 第44周周报\n\n本周算是清闲但又不完全清闲的状态，个人的工作算是有一个阶段性的完成，后续需要思考如何继续推进优化。\n\n工作方面：有一件和个人工作不太相关的事情，自己又不得不去参与，而且需要投入不少时间，所以自己在抗拒又不得不去做的情绪下参与这项工作。最开始这件事情还挺影响心情，后来想通了，既然要投入时间就好好做吧。\n\n情绪方面：有些许的焦虑，不过在控制范围内。因为比较劳累，所以有时候会有些情绪低落，自我调节的一般。\n\n个人刷题：5-7道，每日一题，偶尔复习一下其它的。\n\n运动记录：本周算是懒到家了，没有进行日常锻炼，也没有抽出大块时间去运动。\n\n本周个人思考：\n\n- 既然不得不去投入时间去做一件事情，就好好做吧。抛弃自己抗拒的情绪，尽力去做好。\n\n- 时间管理做的并不好，看到其它人的复盘，每天可以刷很多题，复习很多知识还能推进工作，相比之下，自己还是欠缺了很多。下周需要好好规划下每天不同时间段的任务了。\n\n  \n\n------\n\n### 第42周周报\n\n国庆放假，虽说是休息，但是心还是很累，也没好好利用这段时间充电，反而是焦虑占据了一大半时间，整个假期过后感觉更累。\n\n放假回来，继续搬砖。\n\n工作方面：正常推进，有一个和我本职工作不相关的事情一直在心里，不想干却又不得不干，就一直拖着，而且越拖越焦虑。最后还是选择接受它，面对它，解决它，这样焦虑缓解了一些。\n\n情绪方面：\n\n- 焦虑是主旋律，不过好在自己最终面对它，行动起来，缓解了挺多。\n- 本周开始每日复盘，梳理自己每天的情绪，工作等。还是有些帮助的，可以缓解焦虑，知道自己的时间花在了哪里。\n\n个人刷题：8，算法也开始复习了。\n\n运动记录：骑行20km，俯卧撑30/天，另外还出去参与一些其它运动。\n\n本周个人思考：\n\n- 一旦开始焦虑，就要思考自己对待让自己焦虑的事情的态度。是接受 or 放弃(置之不理)，每一种选择都可以，自己内心能接受这种选择之后的结果就可以。即接受焦虑，面对焦虑，行动。\n- 和他人讨论问题时，认真听，提供自己的意见会让自己的参与感更强一些。\n- 不在乎他人的眼光，评价，不被这些外在的东西给束缚住了。\n\n------\n\n### 第39周周报\n\n工作方面：本周加班较多，每天工作到9:30，周六也加了一天班，整个人昏昏沉沉。\n\n- **问题1**：计算两个向量之间的相似度的问题，数据量百万级。但是不是两两之间，而是分组之后的两两向量之间。\n\n- 想法：1、采用spark内部机器学习包中的方法，但是无法做到分组之后再计算。2、采用spark和pandas结合之后，两两计算。\n\n- 方案：采用方法2。在使用numpy计算向量之间的距离时，遇到了版本问题，避免影响线上环境就没有变更依赖包的版本。只好采用较为粗暴的方式计算距离。\n\n- 心得：在做这个事情时，没有完全规划好，细节没有想太多，是做完了调试之后才发现有一些细节问题没有处理好，一遍一遍的改。\n\n  \n\n- **问题2**：方案中有一个优化点，评估改优化点带来的收益。\n\n- 想法：1、直接去人工看数，即人肉对比。2、制定几个指标，观察优化前后指标的变化。\n\n- 方案：最终选择方案2，但是自己其实在方案1上面花了很多时间，最后才转到方案2上面。\n\n情绪方面：情绪稳定\n\n个人刷题：5\n\n运动记录：骑行0km，俯卧撑30/天\n\n本周个人思考：\n\n- 想好再做，尽量多想一些细节。\n- 想好再说，不着急回答问题。\n- 有些事情可以后台(广义)运行，注意力不要被完全牵制。\n- 抛弃假想敌，不为还没发生的事情担心。\n\n------\n\n### 第38周周报\n\n工作方面：正常的项目推进，技术方面没有成长。\n\n情绪方面：没有控制好情绪，讨论问题时，若别人的想法和自己不一致，自己会莫名的代入你要改变我的想法，就会语气或表情有些不好，不过自己也快速的意识到了问题，快速的调整到正常交流沟通的状态。**未来要淡定，说话不急不躁，声音要洪亮。**\n\n个人成长：刷题10+。\n\n运动记录：骑行90km，俯卧撑50。\n\nTodo：输出一篇博客，可以是算法总结，也可以是刷题分享，一定要做，先做起来。\n\n\n\n","source":"_posts/2022年周报-md.md","raw":"---\ntitle: 2022年周报.md\ndate: 2022-09-10 22:08:00\ncategories: 周报\ntags: 周报\n---\n\n## 前言\n\n&emsp;&emsp;2022年已过去半年多，年初给自己定下的目标都没有实现，越发的感觉这样下去不行，又会荒废一年。回想过去的8个多月，没有太多记忆点，自己没有什么成长，甚是懊恼。\n\n&emsp;&emsp;平时上班还每周都写周报，那虽然是应付老板，让老板有东西汇报，可是却无法给自己一个交代，浑浑噩噩的过下去不行。所以必须要做些总结复盘，这样自己才能回望过去一段时间哪些地方做的不好，要做出改进，哪些地方做的好，要继续努力下去。\n\n------\n\n### 第44周周报\n\n本周算是清闲但又不完全清闲的状态，个人的工作算是有一个阶段性的完成，后续需要思考如何继续推进优化。\n\n工作方面：有一件和个人工作不太相关的事情，自己又不得不去参与，而且需要投入不少时间，所以自己在抗拒又不得不去做的情绪下参与这项工作。最开始这件事情还挺影响心情，后来想通了，既然要投入时间就好好做吧。\n\n情绪方面：有些许的焦虑，不过在控制范围内。因为比较劳累，所以有时候会有些情绪低落，自我调节的一般。\n\n个人刷题：5-7道，每日一题，偶尔复习一下其它的。\n\n运动记录：本周算是懒到家了，没有进行日常锻炼，也没有抽出大块时间去运动。\n\n本周个人思考：\n\n- 既然不得不去投入时间去做一件事情，就好好做吧。抛弃自己抗拒的情绪，尽力去做好。\n\n- 时间管理做的并不好，看到其它人的复盘，每天可以刷很多题，复习很多知识还能推进工作，相比之下，自己还是欠缺了很多。下周需要好好规划下每天不同时间段的任务了。\n\n  \n\n------\n\n### 第42周周报\n\n国庆放假，虽说是休息，但是心还是很累，也没好好利用这段时间充电，反而是焦虑占据了一大半时间，整个假期过后感觉更累。\n\n放假回来，继续搬砖。\n\n工作方面：正常推进，有一个和我本职工作不相关的事情一直在心里，不想干却又不得不干，就一直拖着，而且越拖越焦虑。最后还是选择接受它，面对它，解决它，这样焦虑缓解了一些。\n\n情绪方面：\n\n- 焦虑是主旋律，不过好在自己最终面对它，行动起来，缓解了挺多。\n- 本周开始每日复盘，梳理自己每天的情绪，工作等。还是有些帮助的，可以缓解焦虑，知道自己的时间花在了哪里。\n\n个人刷题：8，算法也开始复习了。\n\n运动记录：骑行20km，俯卧撑30/天，另外还出去参与一些其它运动。\n\n本周个人思考：\n\n- 一旦开始焦虑，就要思考自己对待让自己焦虑的事情的态度。是接受 or 放弃(置之不理)，每一种选择都可以，自己内心能接受这种选择之后的结果就可以。即接受焦虑，面对焦虑，行动。\n- 和他人讨论问题时，认真听，提供自己的意见会让自己的参与感更强一些。\n- 不在乎他人的眼光，评价，不被这些外在的东西给束缚住了。\n\n------\n\n### 第39周周报\n\n工作方面：本周加班较多，每天工作到9:30，周六也加了一天班，整个人昏昏沉沉。\n\n- **问题1**：计算两个向量之间的相似度的问题，数据量百万级。但是不是两两之间，而是分组之后的两两向量之间。\n\n- 想法：1、采用spark内部机器学习包中的方法，但是无法做到分组之后再计算。2、采用spark和pandas结合之后，两两计算。\n\n- 方案：采用方法2。在使用numpy计算向量之间的距离时，遇到了版本问题，避免影响线上环境就没有变更依赖包的版本。只好采用较为粗暴的方式计算距离。\n\n- 心得：在做这个事情时，没有完全规划好，细节没有想太多，是做完了调试之后才发现有一些细节问题没有处理好，一遍一遍的改。\n\n  \n\n- **问题2**：方案中有一个优化点，评估改优化点带来的收益。\n\n- 想法：1、直接去人工看数，即人肉对比。2、制定几个指标，观察优化前后指标的变化。\n\n- 方案：最终选择方案2，但是自己其实在方案1上面花了很多时间，最后才转到方案2上面。\n\n情绪方面：情绪稳定\n\n个人刷题：5\n\n运动记录：骑行0km，俯卧撑30/天\n\n本周个人思考：\n\n- 想好再做，尽量多想一些细节。\n- 想好再说，不着急回答问题。\n- 有些事情可以后台(广义)运行，注意力不要被完全牵制。\n- 抛弃假想敌，不为还没发生的事情担心。\n\n------\n\n### 第38周周报\n\n工作方面：正常的项目推进，技术方面没有成长。\n\n情绪方面：没有控制好情绪，讨论问题时，若别人的想法和自己不一致，自己会莫名的代入你要改变我的想法，就会语气或表情有些不好，不过自己也快速的意识到了问题，快速的调整到正常交流沟通的状态。**未来要淡定，说话不急不躁，声音要洪亮。**\n\n个人成长：刷题10+。\n\n运动记录：骑行90km，俯卧撑50。\n\nTodo：输出一篇博客，可以是算法总结，也可以是刷题分享，一定要做，先做起来。\n\n\n\n","slug":"2022年周报-md","published":1,"updated":"2022-10-30T14:47:53.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrj0001j4h2fd8z7qyy","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;2022年已过去半年多，年初给自己定下的目标都没有实现，越发的感觉这样下去不行，又会荒废一年。回想过去的8个多月，没有太多记忆点，自己没有什么成长，甚是懊恼。</p>\n<p>&emsp;&emsp;平时上班还每周都写周报，那虽然是应付老板，让老板有东西汇报，可是却无法给自己一个交代，浑浑噩噩的过下去不行。所以必须要做些总结复盘，这样自己才能回望过去一段时间哪些地方做的不好，要做出改进，哪些地方做的好，要继续努力下去。</p>\n<hr>\n<h3 id=\"第44周周报\"><a href=\"#第44周周报\" class=\"headerlink\" title=\"第44周周报\"></a>第44周周报</h3><p>本周算是清闲但又不完全清闲的状态，个人的工作算是有一个阶段性的完成，后续需要思考如何继续推进优化。</p>\n<p>工作方面：有一件和个人工作不太相关的事情，自己又不得不去参与，而且需要投入不少时间，所以自己在抗拒又不得不去做的情绪下参与这项工作。最开始这件事情还挺影响心情，后来想通了，既然要投入时间就好好做吧。</p>\n<p>情绪方面：有些许的焦虑，不过在控制范围内。因为比较劳累，所以有时候会有些情绪低落，自我调节的一般。</p>\n<p>个人刷题：5-7道，每日一题，偶尔复习一下其它的。</p>\n<p>运动记录：本周算是懒到家了，没有进行日常锻炼，也没有抽出大块时间去运动。</p>\n<p>本周个人思考：</p>\n<ul>\n<li><p>既然不得不去投入时间去做一件事情，就好好做吧。抛弃自己抗拒的情绪，尽力去做好。</p>\n</li>\n<li><p>时间管理做的并不好，看到其它人的复盘，每天可以刷很多题，复习很多知识还能推进工作，相比之下，自己还是欠缺了很多。下周需要好好规划下每天不同时间段的任务了。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"第42周周报\"><a href=\"#第42周周报\" class=\"headerlink\" title=\"第42周周报\"></a>第42周周报</h3><p>国庆放假，虽说是休息，但是心还是很累，也没好好利用这段时间充电，反而是焦虑占据了一大半时间，整个假期过后感觉更累。</p>\n<p>放假回来，继续搬砖。</p>\n<p>工作方面：正常推进，有一个和我本职工作不相关的事情一直在心里，不想干却又不得不干，就一直拖着，而且越拖越焦虑。最后还是选择接受它，面对它，解决它，这样焦虑缓解了一些。</p>\n<p>情绪方面：</p>\n<ul>\n<li>焦虑是主旋律，不过好在自己最终面对它，行动起来，缓解了挺多。</li>\n<li>本周开始每日复盘，梳理自己每天的情绪，工作等。还是有些帮助的，可以缓解焦虑，知道自己的时间花在了哪里。</li>\n</ul>\n<p>个人刷题：8，算法也开始复习了。</p>\n<p>运动记录：骑行20km，俯卧撑30/天，另外还出去参与一些其它运动。</p>\n<p>本周个人思考：</p>\n<ul>\n<li>一旦开始焦虑，就要思考自己对待让自己焦虑的事情的态度。是接受 or 放弃(置之不理)，每一种选择都可以，自己内心能接受这种选择之后的结果就可以。即接受焦虑，面对焦虑，行动。</li>\n<li>和他人讨论问题时，认真听，提供自己的意见会让自己的参与感更强一些。</li>\n<li>不在乎他人的眼光，评价，不被这些外在的东西给束缚住了。</li>\n</ul>\n<hr>\n<h3 id=\"第39周周报\"><a href=\"#第39周周报\" class=\"headerlink\" title=\"第39周周报\"></a>第39周周报</h3><p>工作方面：本周加班较多，每天工作到9:30，周六也加了一天班，整个人昏昏沉沉。</p>\n<ul>\n<li><p><strong>问题1</strong>：计算两个向量之间的相似度的问题，数据量百万级。但是不是两两之间，而是分组之后的两两向量之间。</p>\n</li>\n<li><p>想法：1、采用spark内部机器学习包中的方法，但是无法做到分组之后再计算。2、采用spark和pandas结合之后，两两计算。</p>\n</li>\n<li><p>方案：采用方法2。在使用numpy计算向量之间的距离时，遇到了版本问题，避免影响线上环境就没有变更依赖包的版本。只好采用较为粗暴的方式计算距离。</p>\n</li>\n<li><p>心得：在做这个事情时，没有完全规划好，细节没有想太多，是做完了调试之后才发现有一些细节问题没有处理好，一遍一遍的改。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>问题2</strong>：方案中有一个优化点，评估改优化点带来的收益。</p>\n</li>\n<li><p>想法：1、直接去人工看数，即人肉对比。2、制定几个指标，观察优化前后指标的变化。</p>\n</li>\n<li><p>方案：最终选择方案2，但是自己其实在方案1上面花了很多时间，最后才转到方案2上面。</p>\n</li>\n</ul>\n<p>情绪方面：情绪稳定</p>\n<p>个人刷题：5</p>\n<p>运动记录：骑行0km，俯卧撑30/天</p>\n<p>本周个人思考：</p>\n<ul>\n<li>想好再做，尽量多想一些细节。</li>\n<li>想好再说，不着急回答问题。</li>\n<li>有些事情可以后台(广义)运行，注意力不要被完全牵制。</li>\n<li>抛弃假想敌，不为还没发生的事情担心。</li>\n</ul>\n<hr>\n<h3 id=\"第38周周报\"><a href=\"#第38周周报\" class=\"headerlink\" title=\"第38周周报\"></a>第38周周报</h3><p>工作方面：正常的项目推进，技术方面没有成长。</p>\n<p>情绪方面：没有控制好情绪，讨论问题时，若别人的想法和自己不一致，自己会莫名的代入你要改变我的想法，就会语气或表情有些不好，不过自己也快速的意识到了问题，快速的调整到正常交流沟通的状态。<strong>未来要淡定，说话不急不躁，声音要洪亮。</strong></p>\n<p>个人成长：刷题10+。</p>\n<p>运动记录：骑行90km，俯卧撑50。</p>\n<p>Todo：输出一篇博客，可以是算法总结，也可以是刷题分享，一定要做，先做起来。</p>\n","site":{"data":{}},"wordcount":1760,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;2022年已过去半年多，年初给自己定下的目标都没有实现，越发的感觉这样下去不行，又会荒废一年。回想过去的8个多月，没有太多记忆点，自己没有什么成长，甚是懊恼。</p>\n<p>&emsp;&emsp;平时上班还每周都写周报，那虽然是应付老板，让老板有东西汇报，可是却无法给自己一个交代，浑浑噩噩的过下去不行。所以必须要做些总结复盘，这样自己才能回望过去一段时间哪些地方做的不好，要做出改进，哪些地方做的好，要继续努力下去。</p>\n<hr>\n<h3 id=\"第44周周报\"><a href=\"#第44周周报\" class=\"headerlink\" title=\"第44周周报\"></a>第44周周报</h3><p>本周算是清闲但又不完全清闲的状态，个人的工作算是有一个阶段性的完成，后续需要思考如何继续推进优化。</p>\n<p>工作方面：有一件和个人工作不太相关的事情，自己又不得不去参与，而且需要投入不少时间，所以自己在抗拒又不得不去做的情绪下参与这项工作。最开始这件事情还挺影响心情，后来想通了，既然要投入时间就好好做吧。</p>\n<p>情绪方面：有些许的焦虑，不过在控制范围内。因为比较劳累，所以有时候会有些情绪低落，自我调节的一般。</p>\n<p>个人刷题：5-7道，每日一题，偶尔复习一下其它的。</p>\n<p>运动记录：本周算是懒到家了，没有进行日常锻炼，也没有抽出大块时间去运动。</p>\n<p>本周个人思考：</p>\n<ul>\n<li><p>既然不得不去投入时间去做一件事情，就好好做吧。抛弃自己抗拒的情绪，尽力去做好。</p>\n</li>\n<li><p>时间管理做的并不好，看到其它人的复盘，每天可以刷很多题，复习很多知识还能推进工作，相比之下，自己还是欠缺了很多。下周需要好好规划下每天不同时间段的任务了。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"第42周周报\"><a href=\"#第42周周报\" class=\"headerlink\" title=\"第42周周报\"></a>第42周周报</h3><p>国庆放假，虽说是休息，但是心还是很累，也没好好利用这段时间充电，反而是焦虑占据了一大半时间，整个假期过后感觉更累。</p>\n<p>放假回来，继续搬砖。</p>\n<p>工作方面：正常推进，有一个和我本职工作不相关的事情一直在心里，不想干却又不得不干，就一直拖着，而且越拖越焦虑。最后还是选择接受它，面对它，解决它，这样焦虑缓解了一些。</p>\n<p>情绪方面：</p>\n<ul>\n<li>焦虑是主旋律，不过好在自己最终面对它，行动起来，缓解了挺多。</li>\n<li>本周开始每日复盘，梳理自己每天的情绪，工作等。还是有些帮助的，可以缓解焦虑，知道自己的时间花在了哪里。</li>\n</ul>\n<p>个人刷题：8，算法也开始复习了。</p>\n<p>运动记录：骑行20km，俯卧撑30/天，另外还出去参与一些其它运动。</p>\n<p>本周个人思考：</p>\n<ul>\n<li>一旦开始焦虑，就要思考自己对待让自己焦虑的事情的态度。是接受 or 放弃(置之不理)，每一种选择都可以，自己内心能接受这种选择之后的结果就可以。即接受焦虑，面对焦虑，行动。</li>\n<li>和他人讨论问题时，认真听，提供自己的意见会让自己的参与感更强一些。</li>\n<li>不在乎他人的眼光，评价，不被这些外在的东西给束缚住了。</li>\n</ul>\n<hr>\n<h3 id=\"第39周周报\"><a href=\"#第39周周报\" class=\"headerlink\" title=\"第39周周报\"></a>第39周周报</h3><p>工作方面：本周加班较多，每天工作到9:30，周六也加了一天班，整个人昏昏沉沉。</p>\n<ul>\n<li><p><strong>问题1</strong>：计算两个向量之间的相似度的问题，数据量百万级。但是不是两两之间，而是分组之后的两两向量之间。</p>\n</li>\n<li><p>想法：1、采用spark内部机器学习包中的方法，但是无法做到分组之后再计算。2、采用spark和pandas结合之后，两两计算。</p>\n</li>\n<li><p>方案：采用方法2。在使用numpy计算向量之间的距离时，遇到了版本问题，避免影响线上环境就没有变更依赖包的版本。只好采用较为粗暴的方式计算距离。</p>\n</li>\n<li><p>心得：在做这个事情时，没有完全规划好，细节没有想太多，是做完了调试之后才发现有一些细节问题没有处理好，一遍一遍的改。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>问题2</strong>：方案中有一个优化点，评估改优化点带来的收益。</p>\n</li>\n<li><p>想法：1、直接去人工看数，即人肉对比。2、制定几个指标，观察优化前后指标的变化。</p>\n</li>\n<li><p>方案：最终选择方案2，但是自己其实在方案1上面花了很多时间，最后才转到方案2上面。</p>\n</li>\n</ul>\n<p>情绪方面：情绪稳定</p>\n<p>个人刷题：5</p>\n<p>运动记录：骑行0km，俯卧撑30/天</p>\n<p>本周个人思考：</p>\n<ul>\n<li>想好再做，尽量多想一些细节。</li>\n<li>想好再说，不着急回答问题。</li>\n<li>有些事情可以后台(广义)运行，注意力不要被完全牵制。</li>\n<li>抛弃假想敌，不为还没发生的事情担心。</li>\n</ul>\n<hr>\n<h3 id=\"第38周周报\"><a href=\"#第38周周报\" class=\"headerlink\" title=\"第38周周报\"></a>第38周周报</h3><p>工作方面：正常的项目推进，技术方面没有成长。</p>\n<p>情绪方面：没有控制好情绪，讨论问题时，若别人的想法和自己不一致，自己会莫名的代入你要改变我的想法，就会语气或表情有些不好，不过自己也快速的意识到了问题，快速的调整到正常交流沟通的状态。<strong>未来要淡定，说话不急不躁，声音要洪亮。</strong></p>\n<p>个人成长：刷题10+。</p>\n<p>运动记录：骑行90km，俯卧撑50。</p>\n<p>Todo：输出一篇博客，可以是算法总结，也可以是刷题分享，一定要做，先做起来。</p>\n"},{"title":"Floyd算法","mathjax":true,"date":"2021-04-11T02:54:52.000Z","_content":"\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","source":"_posts/Floyd算法.md","raw":"---\ntitle: Floyd算法\nmathjax: true\ndate: 2021-04-11 10:54:52\ncategories: 算法\ntags: floyd\n---\n\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","slug":"Floyd算法","published":1,"updated":"2021-06-04T13:13:40.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrl0003j4h273wq3cyr","content":"<h2 id=\"Floyd-算法\"><a href=\"#Floyd-算法\" class=\"headerlink\" title=\"Floyd 算法\"></a>Floyd 算法</h2><p>&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>\n<span id=\"more\"></span>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;&ensp;代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>)<br><br><span class=\"hljs-comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span><br><br><span class=\"hljs-keyword\">type</span> Floyd <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttTwoPointDis [][]<span class=\"hljs-keyword\">int</span><br>\ttPath        [][]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tf.tTwoPointDis = tDis<br><br>\tr := <span class=\"hljs-built_in\">len</span>(tDis)<br><br>\tf.tPath = <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, r)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f.tPath &#123;<br>\t\tf.tPath[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, r)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\tf.tPath[i][j] = <span class=\"hljs-number\">-1</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;before&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br>\tr := <span class=\"hljs-built_in\">len</span>(f.tTwoPointDis)<br>\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; r; k++ &#123; <span class=\"hljs-comment\">// 媒介</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;<br>\t\t\t\t\tf.tPath[i][j] = k <span class=\"hljs-comment\">// 记录媒介</span><br>\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;after&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> i != j &#123;<br>\t\t\t\tfmt.Println(f.getPath(i, j))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">getPath</span><span class=\"hljs-params\">(i, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> &#123; <span class=\"hljs-comment\">// 打印路径</span><br>\t<span class=\"hljs-keyword\">if</span> f.tPath[i][j] == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(i) + <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(j)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tk := f.tPath[i][j]<br>\t\t<span class=\"hljs-keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\tf := <span class=\"hljs-built_in\">new</span>(Floyd)<br>\tf.Init(tDis)<br>\tf.solve()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>\n","site":{"data":{}},"wordcount":2294,"excerpt":"<h2 id=\"Floyd-算法\"><a href=\"#Floyd-算法\" class=\"headerlink\" title=\"Floyd 算法\"></a>Floyd 算法</h2><p>&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;&ensp;代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>)<br><br><span class=\"hljs-comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span><br><br><span class=\"hljs-keyword\">type</span> Floyd <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttTwoPointDis [][]<span class=\"hljs-keyword\">int</span><br>\ttPath        [][]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tf.tTwoPointDis = tDis<br><br>\tr := <span class=\"hljs-built_in\">len</span>(tDis)<br><br>\tf.tPath = <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, r)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f.tPath &#123;<br>\t\tf.tPath[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, r)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\tf.tPath[i][j] = <span class=\"hljs-number\">-1</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;before&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br>\tr := <span class=\"hljs-built_in\">len</span>(f.tTwoPointDis)<br>\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; r; k++ &#123; <span class=\"hljs-comment\">// 媒介</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;<br>\t\t\t\t\tf.tPath[i][j] = k <span class=\"hljs-comment\">// 记录媒介</span><br>\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;after&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> i != j &#123;<br>\t\t\t\tfmt.Println(f.getPath(i, j))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">getPath</span><span class=\"hljs-params\">(i, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> &#123; <span class=\"hljs-comment\">// 打印路径</span><br>\t<span class=\"hljs-keyword\">if</span> f.tPath[i][j] == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(i) + <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(j)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tk := f.tPath[i][j]<br>\t\t<span class=\"hljs-keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\tf := <span class=\"hljs-built_in\">new</span>(Floyd)<br>\tf.Init(tDis)<br>\tf.solve()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>"},{"title":"Hive/SQL日常总结","date":"2020-05-16T01:39:36.000Z","_content":"\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表字段处理\n\n### 1、增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n### 2、调整字段的位置\n\n&emsp;&emsp;有时候我们的表建好，写入数据之后，又想添加新的字段，或者想把一些物理意义较近的字段放在一起，所以我们需要调整字段，所以如何调整字段的位置呢？\n\n```sql\nalter table table_name c1 c1 float after c2 cascade;\n```\n\n&emsp;&emsp;上面的sql就是把float类型的c1字段移动到c2后面，对于分区表注意使用cascade哦。\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n&ensp;&ensp;直接写入一个分区内，相当于追加到对应的分区内。\n\n```sql\nInsert into table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n```\n\n\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n## 5、删除文件\n\n### 1、删除文件\n\n```shell\nhadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx\n\n```\n\n上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息\n\n```shell\nhadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx\n```\n\n### 2、删除分区\n\n```shell\nalter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);\n\n```\n\n上述命令需要在hive客户端中执行。\n\n## 6、时间处理\n\n### 1、转换为时间戳\n\n标准格式是指'2021-06-30 10:10:00'这种格式，即'yyyy-MM-dd HH:mm:ss'，\n\n```sql\nunix_timestamp('2021-06-30 10:10:10')\n```\n\n若时间不是标准格式的，比如 '20210630'这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的\n\n```sql\nunix_timestamp('20210630', 'yyyyMMdd')\n```\n\n### 2、时间戳转换为日期\n\n时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。\n\n```sql\nfrom_unixtime('1625839005', 'yyyy-MM-dd HH:mm:ss')/from_unixtime('1625839005', 'yyyy-MM-dd')\n```\n\n对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即**对字符串进行截取指定长度**，这个在mysql和hivesql中是由一些差异的。**在mysql中有left，right两个函数，但是在hive中可以使用substr来做**。\n\n```sql\nfrom_unixtime((cast(substr('1625839005000', 0, 10) as bigint)), 'yyyy-MM-dd HH:mm:ss')\n```\n\n## 7、分位数\n\n在hivesql中，取分位数还是比较简单，有两个函数可供使用，\n\n```sql\npercentile(col, p)\n```\n\ncol为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数\n\n```sql\npercentile_approx(col, array(0.2, 0.3), 9999)\n```\n\ncol也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数\n\n","source":"_posts/Hive-SQL日常总结.md","raw":"---\ntitle: Hive/SQL日常总结\ndate: 2020-05-16 09:39:36\ncategories: SQL\ntags:\n---\n\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表字段处理\n\n### 1、增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n### 2、调整字段的位置\n\n&emsp;&emsp;有时候我们的表建好，写入数据之后，又想添加新的字段，或者想把一些物理意义较近的字段放在一起，所以我们需要调整字段，所以如何调整字段的位置呢？\n\n```sql\nalter table table_name c1 c1 float after c2 cascade;\n```\n\n&emsp;&emsp;上面的sql就是把float类型的c1字段移动到c2后面，对于分区表注意使用cascade哦。\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n&ensp;&ensp;直接写入一个分区内，相当于追加到对应的分区内。\n\n```sql\nInsert into table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n```\n\n\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n## 5、删除文件\n\n### 1、删除文件\n\n```shell\nhadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx\n\n```\n\n上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息\n\n```shell\nhadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx\n```\n\n### 2、删除分区\n\n```shell\nalter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);\n\n```\n\n上述命令需要在hive客户端中执行。\n\n## 6、时间处理\n\n### 1、转换为时间戳\n\n标准格式是指'2021-06-30 10:10:00'这种格式，即'yyyy-MM-dd HH:mm:ss'，\n\n```sql\nunix_timestamp('2021-06-30 10:10:10')\n```\n\n若时间不是标准格式的，比如 '20210630'这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的\n\n```sql\nunix_timestamp('20210630', 'yyyyMMdd')\n```\n\n### 2、时间戳转换为日期\n\n时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。\n\n```sql\nfrom_unixtime('1625839005', 'yyyy-MM-dd HH:mm:ss')/from_unixtime('1625839005', 'yyyy-MM-dd')\n```\n\n对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即**对字符串进行截取指定长度**，这个在mysql和hivesql中是由一些差异的。**在mysql中有left，right两个函数，但是在hive中可以使用substr来做**。\n\n```sql\nfrom_unixtime((cast(substr('1625839005000', 0, 10) as bigint)), 'yyyy-MM-dd HH:mm:ss')\n```\n\n## 7、分位数\n\n在hivesql中，取分位数还是比较简单，有两个函数可供使用，\n\n```sql\npercentile(col, p)\n```\n\ncol为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数\n\n```sql\npercentile_approx(col, array(0.2, 0.3), 9999)\n```\n\ncol也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数\n\n","slug":"Hive-SQL日常总结","published":1,"updated":"2022-01-16T14:56:27.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkro0006j4h22jefae1v","content":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>\n<span id=\"more\"></span>\n<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xx1</td>\n<td style=\"text-align:center\">Tom</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xx2</td>\n<td style=\"text-align:center\">Jone</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs sql\">对t1进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t1 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>对t2进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t2 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>使用t1 <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> t2<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <br>  (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>  <span class=\"hljs-keyword\">from</span> t1 <br>  <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp1<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>   (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>    <span class=\"hljs-keyword\">from</span> t2 <br>    <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp2<br> <span class=\"hljs-keyword\">on</span> tmp1.id<span class=\"hljs-operator\">=</span>tmp2.id <span class=\"hljs-keyword\">and</span> tmp1.name<span class=\"hljs-operator\">=</span>tmp2.name;<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1<br>minus <br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2;<br><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2<br>minus<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1;<br></code></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\"></a></p>\n<h2 id=\"2、分区表字段处理\"><a href=\"#2、分区表字段处理\" class=\"headerlink\" title=\"2、分区表字段处理\"></a>2、分区表字段处理</h2><h3 id=\"1、增加新的字段\"><a href=\"#1、增加新的字段\" class=\"headerlink\" title=\"1、增加新的字段\"></a>1、增加新的字段</h3><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_nam <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>);<br></code></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>) cascade;<br></code></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\"></a></p>\n<h3 id=\"2、调整字段的位置\"><a href=\"#2、调整字段的位置\" class=\"headerlink\" title=\"2、调整字段的位置\"></a>2、调整字段的位置</h3><p>&emsp;&emsp;有时候我们的表建好，写入数据之后，又想添加新的字段，或者想把一些物理意义较近的字段放在一起，所以我们需要调整字段，所以如何调整字段的位置呢？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name c1 c1 <span class=\"hljs-type\">float</span> after c2 cascade;<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面的sql就是把float类型的c1字段移动到c2后面，对于分区表注意使用cascade哦。</p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> overwrite <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br><br></code></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p>&ensp;&ensp;直接写入一个分区内，相当于追加到对应的分区内。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1(<br>    id      <span class=\"hljs-type\">int</span>,<br>    name    string,<br>    hobby   <span class=\"hljs-keyword\">array</span><span class=\"hljs-operator\">&lt;</span>string<span class=\"hljs-operator\">&gt;</span>,<br>    <span class=\"hljs-keyword\">add</span>     map<span class=\"hljs-operator\">&lt;</span>String,string<span class=\"hljs-operator\">&gt;</span><br>)<br><span class=\"hljs-type\">row</span> format delimited<br>fields terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;,&#x27;</span><br>collection items terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;-&#x27;</span><br>map keys terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;:&#x27;</span><br>;<br></code></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">load data <span class=\"hljs-keyword\">local</span> inpath <span class=\"hljs-string\">&#x27;/user/hive/warehouse/...data&#x27;</span> overwrite <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> t1;<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1 <span class=\"hljs-keyword\">as</span><br><span class=\"hljs-keyword\">select</span><br>    id,<br>    name<br><span class=\"hljs-keyword\">from</span> t2;<br></code></pre></td></tr></table></figure>\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1<br><span class=\"hljs-keyword\">like</span> t2;<br></code></pre></td></tr></table></figure>\n<h2 id=\"5、删除文件\"><a href=\"#5、删除文件\" class=\"headerlink\" title=\"5、删除文件\"></a>5、删除文件</h2><h3 id=\"1、删除文件\"><a href=\"#1、删除文件\" class=\"headerlink\" title=\"1、删除文件\"></a>1、删除文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx<br><br></code></pre></td></tr></table></figure>\n<p>上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、删除分区\"><a href=\"#2、删除分区\" class=\"headerlink\" title=\"2、删除分区\"></a>2、删除分区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);<br><br></code></pre></td></tr></table></figure>\n<p>上述命令需要在hive客户端中执行。</p>\n<h2 id=\"6、时间处理\"><a href=\"#6、时间处理\" class=\"headerlink\" title=\"6、时间处理\"></a>6、时间处理</h2><h3 id=\"1、转换为时间戳\"><a href=\"#1、转换为时间戳\" class=\"headerlink\" title=\"1、转换为时间戳\"></a>1、转换为时间戳</h3><p>标准格式是指’2021-06-30 10:10:00’这种格式，即’yyyy-MM-dd HH:mm:ss’，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;2021-06-30 10:10:10&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>若时间不是标准格式的，比如 ‘20210630’这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;20210630&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyyMMdd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、时间戳转换为日期\"><a href=\"#2、时间戳转换为日期\" class=\"headerlink\" title=\"2、时间戳转换为日期\"></a>2、时间戳转换为日期</h3><p>时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<span class=\"hljs-operator\">/</span>from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即<strong>对字符串进行截取指定长度</strong>，这个在mysql和hivesql中是由一些差异的。<strong>在mysql中有left，right两个函数，但是在hive中可以使用substr来做</strong>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime((<span class=\"hljs-built_in\">cast</span>(substr(<span class=\"hljs-string\">&#x27;1625839005000&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">bigint</span>)), <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"7、分位数\"><a href=\"#7、分位数\" class=\"headerlink\" title=\"7、分位数\"></a>7、分位数</h2><p>在hivesql中，取分位数还是比较简单，有两个函数可供使用，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile(col, p)<br></code></pre></td></tr></table></figure>\n<p>col为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile_approx(col, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">0.3</span>), <span class=\"hljs-number\">9999</span>)<br></code></pre></td></tr></table></figure>\n<p>col也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数</p>\n","site":{"data":{}},"wordcount":3743,"excerpt":"<h1 id=\"Hive-SQL日常总结\"><a href=\"#Hive-SQL日常总结\" class=\"headerlink\" title=\"Hive/SQL日常总结\"></a>Hive/SQL日常总结</h1><p>&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>","more":"<h2 id=\"1、如何比较两个表的内容是否完全一致\"><a href=\"#1、如何比较两个表的内容是否完全一致\" class=\"headerlink\" title=\"1、如何比较两个表的内容是否完全一致\"></a>1、如何比较两个表的内容是否完全一致</h2><h3 id=\"（1）、分组-inner-join\"><a href=\"#（1）、分组-inner-join\" class=\"headerlink\" title=\"（1）、分组 inner join\"></a>（1）、分组 inner join</h3><p>&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。</p>\n<p>&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。</p>\n<p>&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>&emsp;&emsp;假设表结构如下所示，只有两列</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xx1</td>\n<td style=\"text-align:center\">Tom</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xx2</td>\n<td style=\"text-align:center\">Jone</td>\n</tr>\n</tbody>\n</table>\n</div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">对t1进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t1 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>对t2进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t2 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>使用t1 <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> t2<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <br>  (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>  <span class=\"hljs-keyword\">from</span> t1 <br>  <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp1<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>   (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>    <span class=\"hljs-keyword\">from</span> t2 <br>    <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp2<br> <span class=\"hljs-keyword\">on</span> tmp1.id<span class=\"hljs-operator\">=</span>tmp2.id <span class=\"hljs-keyword\">and</span> tmp1.name<span class=\"hljs-operator\">=</span>tmp2.name;<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"（2）、minus-做减法\"><a href=\"#（2）、minus-做减法\" class=\"headerlink\" title=\"（2）、minus 做减法\"></a>（2）、minus 做减法</h3><p>&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1<br>minus <br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2;<br><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2<br>minus<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1;<br></code></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\"></a></p>\n<h2 id=\"2、分区表字段处理\"><a href=\"#2、分区表字段处理\" class=\"headerlink\" title=\"2、分区表字段处理\"></a>2、分区表字段处理</h2><h3 id=\"1、增加新的字段\"><a href=\"#1、增加新的字段\" class=\"headerlink\" title=\"1、增加新的字段\"></a>1、增加新的字段</h3><p>&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_nam <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>);<br></code></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>) cascade;<br></code></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\"></a></p>\n<h3 id=\"2、调整字段的位置\"><a href=\"#2、调整字段的位置\" class=\"headerlink\" title=\"2、调整字段的位置\"></a>2、调整字段的位置</h3><p>&emsp;&emsp;有时候我们的表建好，写入数据之后，又想添加新的字段，或者想把一些物理意义较近的字段放在一起，所以我们需要调整字段，所以如何调整字段的位置呢？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name c1 c1 <span class=\"hljs-type\">float</span> after c2 cascade;<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面的sql就是把float类型的c1字段移动到c2后面，对于分区表注意使用cascade哦。</p>\n<h2 id=\"3、将一个表的内容写入到另一个表中\"><a href=\"#3、将一个表的内容写入到另一个表中\" class=\"headerlink\" title=\"3、将一个表的内容写入到另一个表中\"></a>3、将一个表的内容写入到另一个表中</h2><p>&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> overwrite <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br><br></code></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p>&ensp;&ensp;直接写入一个分区内，相当于追加到对应的分区内。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​      选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"4、创建表的方式\"><a href=\"#4、创建表的方式\" class=\"headerlink\" title=\"4、创建表的方式\"></a>4、创建表的方式</h2><h3 id=\"1、直接建表法\"><a href=\"#1、直接建表法\" class=\"headerlink\" title=\"1、直接建表法\"></a>1、直接建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1(<br>    id      <span class=\"hljs-type\">int</span>,<br>    name    string,<br>    hobby   <span class=\"hljs-keyword\">array</span><span class=\"hljs-operator\">&lt;</span>string<span class=\"hljs-operator\">&gt;</span>,<br>    <span class=\"hljs-keyword\">add</span>     map<span class=\"hljs-operator\">&lt;</span>String,string<span class=\"hljs-operator\">&gt;</span><br>)<br><span class=\"hljs-type\">row</span> format delimited<br>fields terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;,&#x27;</span><br>collection items terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;-&#x27;</span><br>map keys terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;:&#x27;</span><br>;<br></code></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">load data <span class=\"hljs-keyword\">local</span> inpath <span class=\"hljs-string\">&#x27;/user/hive/warehouse/...data&#x27;</span> overwrite <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> t1;<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、select-方法\"><a href=\"#2、select-方法\" class=\"headerlink\" title=\"2、select 方法\"></a>2、select 方法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1 <span class=\"hljs-keyword\">as</span><br><span class=\"hljs-keyword\">select</span><br>    id,<br>    name<br><span class=\"hljs-keyword\">from</span> t2;<br></code></pre></td></tr></table></figure>\n<h3 id=\"3、like建表法\"><a href=\"#3、like建表法\" class=\"headerlink\" title=\"3、like建表法\"></a>3、like建表法</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1<br><span class=\"hljs-keyword\">like</span> t2;<br></code></pre></td></tr></table></figure>\n<h2 id=\"5、删除文件\"><a href=\"#5、删除文件\" class=\"headerlink\" title=\"5、删除文件\"></a>5、删除文件</h2><h3 id=\"1、删除文件\"><a href=\"#1、删除文件\" class=\"headerlink\" title=\"1、删除文件\"></a>1、删除文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx<br><br></code></pre></td></tr></table></figure>\n<p>上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、删除分区\"><a href=\"#2、删除分区\" class=\"headerlink\" title=\"2、删除分区\"></a>2、删除分区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);<br><br></code></pre></td></tr></table></figure>\n<p>上述命令需要在hive客户端中执行。</p>\n<h2 id=\"6、时间处理\"><a href=\"#6、时间处理\" class=\"headerlink\" title=\"6、时间处理\"></a>6、时间处理</h2><h3 id=\"1、转换为时间戳\"><a href=\"#1、转换为时间戳\" class=\"headerlink\" title=\"1、转换为时间戳\"></a>1、转换为时间戳</h3><p>标准格式是指’2021-06-30 10:10:00’这种格式，即’yyyy-MM-dd HH:mm:ss’，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;2021-06-30 10:10:10&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>若时间不是标准格式的，比如 ‘20210630’这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;20210630&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyyMMdd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、时间戳转换为日期\"><a href=\"#2、时间戳转换为日期\" class=\"headerlink\" title=\"2、时间戳转换为日期\"></a>2、时间戳转换为日期</h3><p>时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<span class=\"hljs-operator\">/</span>from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即<strong>对字符串进行截取指定长度</strong>，这个在mysql和hivesql中是由一些差异的。<strong>在mysql中有left，right两个函数，但是在hive中可以使用substr来做</strong>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime((<span class=\"hljs-built_in\">cast</span>(substr(<span class=\"hljs-string\">&#x27;1625839005000&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">bigint</span>)), <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"7、分位数\"><a href=\"#7、分位数\" class=\"headerlink\" title=\"7、分位数\"></a>7、分位数</h2><p>在hivesql中，取分位数还是比较简单，有两个函数可供使用，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile(col, p)<br></code></pre></td></tr></table></figure>\n<p>col为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile_approx(col, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">0.3</span>), <span class=\"hljs-number\">9999</span>)<br></code></pre></td></tr></table></figure>\n<p>col也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数</p>"},{"title":"LightGBM算法原理","date":"2022-06-26T02:21:02.000Z","_content":"\n&emsp;&emsp;在 [XGBoost介绍](https://silencemao.github.io/2022/04/05/XGBoost%E4%BB%8B%E7%BB%8D/)中，我们讲述了xgb的运行原理，节点分裂方式。在xgb出现之后，迅速的应用在工业界中并取得了非常好的效果。但是仍然存在一些问题，比如当数据规模巨大的情况下，运行速度慢，不能直接支持类别特征等。在2017年，微软发布了一个新的GBDT算法框架**LightGBM**，与xgb相比，达到相同的算法效果，运行速度更快，并且支持类别特征。lgb的主要改进点是提升模型速度，从两个维度进行了优化，分别是样本维度和特征维度。本文基于lgb的论文进行总结归纳，以便时常温习回顾。\n\n### 一、主要改进点\n\n1. 直方图算法（histogram-based algorithm）：基于连续特征值进行分桶bin，然后基于不同的bin进行分裂。相比于预排序算法，节省内存和提升速度。\n2. 单边梯度采样算法GOSS（Gradient-based One-Side Sampling）：计算增益过程中，不再使用全部样本，而是筛选出一部分梯度大的样本和部分梯度小的样本计算增益。减少样本数量，提升计算速度。\n3. 互斥特征绑定算法EFB（Exclusive Feature Bundling）：在高维稀疏特征中，部分特征并不会同时非零，所以可以将其中几个特征绑定为一个特征，进行分裂。减少特征数量，提升计算速度。\n4. 叶子节点生长策略（leaf-wise tree growth strategy）：xgb在树的生成过程中，每次都是一层的所有节点都进行分裂，lgb是每次选择所有叶节点中收益最大的节点分裂，有利有弊，利：降低模型误差，弊：树生长过深，可能会过拟合。\n\n<!--more-->\n\n### 二、直方图算法\n\n**寻找最佳分割点，如何才能更高效？**这就是直方图算法要解决的问题。GBDT算法是基于决策树的ensemble模型，树的每次生长都是要寻找分割点，将数据分到左子树和右子树中，如何寻找这个分割点是非常耗时的。一种是预排序算法，即将特征f的所有取值从小到大排序，然后遍历每一个特征取值$f_{i}$，分别以$f_{i}$为分割点，计算增益，选取最大的增益对应的分割点作为当前的分割节点。一种方法是直方图算法，即将连续特征离散化，分到指定的几个bin内，比如特征取值1-10分到bin=1内，10-20分到bin=2内....。寻找最佳分割点时直接根据bin的取值来分割即可。二者相比时间复杂度分别为O(data*feature)和O(bin*fenture)，feature表示特征维度，data表示样本数量，bin表示桶数量。\n\n![直方图算法](/images/lgb_alg1_his.png)\n\n上图就是直方图算法的主题逻辑。\n\n### 三、GOSS采样策略\n\n**GOSS采样策略的灵感来自于Adaboost**，在adaboost中，样本是有权重的，样本的误差越大，权重越高，在下次训练时模型会更加关注误差更大的样本。但是在GBDT算法中样本是没有权重的，无法直接将Adaboost的方式迁移过来。但是在GBDT算法中，样本的梯度越小，则误差越小，表示该样本被训练的更好，所以误差和梯度之间也是有一定关系的。因此是否可以考虑将这部分训练的很好地样本丢掉，但是直接丢掉样本会影响分布。所以LightGBM提出依据样本梯度进行采样的策略。思路很简单，\n\n1. 按照样本梯度绝对值从大到小排序\n\n2. 选取topa%梯度较大的样本，然后再选取b%梯度较小的样本（b是指全部样本的b%）\n\n3. 对采样出来的小梯度样本乘以(1-a)/b，提升小梯度样本的权重（1-a是表示小梯度样本的分布，大梯度样本的分布是a，1/b是将小梯度样本的比例放大b倍）。\n\n   \n\n   ![GOSS算法](/images/lgb_alg2_goss.png)\n\n   \n\n上图是GOSS算法的整体逻辑。\n\n### 四、互斥特征绑定算法\n\n互斥特征绑定的目的是降低特征维度，减少计算量，其实也有点类似于列采样。在高维稀疏特征中，很多特征并不会同时非零。即多个特征可以合并成一维特征，LightGBM采用了互斥特征绑定算法（EFB）来降低特征维数。将特征进行分桶，桶内特征是互斥的，然后将桶内特征合并成一个特征再去进行分裂。这样可以将数据从O(data*feature)降低到O(data*buddle)。该方法实现起来存在两大难点：\n\n1. 哪些特征可以放在一起\n2. 如何构建buddle\n\n#### 4.1哪些特征可以绑定\n\n对于第一个问题，EFB算法是构建了一个图G=(V,E)，图的顶点E是特征，顶点之间的边V表示特征之间的冲突数，将存在冲突的两个顶点构建一条边。然后将不存在冲突的顶点放到一个集合内，构成一个特征包。在LightGBM中，为了提升效率，它是允许一部分特征之间存在一定的冲突的，即允许存在$gamma$个冲突。通过控制$gamma$的大小，可以让算法精度和效率有一定的平衡。算法思路为：\n\n1. 构建加权图，V表示两个特征之间的冲突数\n2. 将特征按照冲突数降序排列，分配特征到不同的特征包内\n3. 通过控制特征包内最大冲突数K来决定该特征是放入已有特征包内还是新建特征包\n4. 这样算法思路为O(feature*feature)，因为要两两遍历特征之间的冲突\n\n这样做对于特征维度较小时还可以完成，维度一旦百万级就无法承受了。\n\n![efb算法](/images/lgb_alg3_efb.png)\n\n因此为了简化上述计算特征冲突数的过程，采样一个特征下非0的样本数量，一个特征下非0值特征越多，则越容易冲突。\n\n#### 4.2如何构建buddle\n\n上面解决了如何判断哪些特征要被绑定在一起，那么EFB算法如何绑定特征呢？如何既减少了特征维度，又保证原始的特征值可以在特征包中被识别出来呢？由于LightGBM是采用直方图算法减少对于寻找最佳分裂点的算法复杂度，直方图算法将特征值离散到若干个bin中。这里EFB算法为了保留特征，将bundle内不同的特征加上一个偏移常量，使不同特征的值分布到bundle的不同bin内。例如：特征A的取值范围为[0,10)，特征B的原始取值范围为[0，20)，对特征B的取值上加一个偏置常量10，将其取值范围变为[10,30)，这样就可以将特征A和B绑定在一起了。具体的算法流程上图Algorithm4所示。\n\n### 五、按叶子生长（leaf-wise）\n\n在xgb中，决策树的构建是按照层生长的。每次都是把一层的节点都进行分裂，这种操作复杂度会高，而且一层中未必所有节点都有很高的收益。所以在LightGBM中是按照叶子节点生长的，每次选择所有叶子节点中收益最大的那个节点进行分裂，依次循环下去。和xgb相比，优点是lgb减少了一部分收益较小的节点分裂开销，生成的树较深，更容易降低误差，缺点是树较深，有可能会过拟合，所以lgb有一个控制树的深度的参数，防止过拟合。\n\n### 六、总结\n\nlgb效率更高主要得益于它的几个优化点，\n\n1. 分裂的时候采用直方图算法，相当于减少计算的样本数\n2. 计算增益的时候的采用GOSS算法，对样本采样，也是减少样本数\n3. 对于高维稀疏特征采用EFB算法，相当于降低特征维度\n4. 树的生长采用按叶子生长，减少不必要的计算开销\n\n万变不离其宗，主题核心就是**减少样本数或者减少特征数两个点展开**，结果也验证了作者的想法。\n\n\n\nRef:\n\n[https://zhuanlan.zhihu.com/p/59631419](/images/lgb_alg1_his.png)\n\n[http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/](http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/)\n\n\n\n","source":"_posts/LightGBM算法原理.md","raw":"---\ntitle: LightGBM算法原理\ndate: 2022-06-26 10:21:02\ncategories: 机器学习\ntags: 树模型\n---\n\n&emsp;&emsp;在 [XGBoost介绍](https://silencemao.github.io/2022/04/05/XGBoost%E4%BB%8B%E7%BB%8D/)中，我们讲述了xgb的运行原理，节点分裂方式。在xgb出现之后，迅速的应用在工业界中并取得了非常好的效果。但是仍然存在一些问题，比如当数据规模巨大的情况下，运行速度慢，不能直接支持类别特征等。在2017年，微软发布了一个新的GBDT算法框架**LightGBM**，与xgb相比，达到相同的算法效果，运行速度更快，并且支持类别特征。lgb的主要改进点是提升模型速度，从两个维度进行了优化，分别是样本维度和特征维度。本文基于lgb的论文进行总结归纳，以便时常温习回顾。\n\n### 一、主要改进点\n\n1. 直方图算法（histogram-based algorithm）：基于连续特征值进行分桶bin，然后基于不同的bin进行分裂。相比于预排序算法，节省内存和提升速度。\n2. 单边梯度采样算法GOSS（Gradient-based One-Side Sampling）：计算增益过程中，不再使用全部样本，而是筛选出一部分梯度大的样本和部分梯度小的样本计算增益。减少样本数量，提升计算速度。\n3. 互斥特征绑定算法EFB（Exclusive Feature Bundling）：在高维稀疏特征中，部分特征并不会同时非零，所以可以将其中几个特征绑定为一个特征，进行分裂。减少特征数量，提升计算速度。\n4. 叶子节点生长策略（leaf-wise tree growth strategy）：xgb在树的生成过程中，每次都是一层的所有节点都进行分裂，lgb是每次选择所有叶节点中收益最大的节点分裂，有利有弊，利：降低模型误差，弊：树生长过深，可能会过拟合。\n\n<!--more-->\n\n### 二、直方图算法\n\n**寻找最佳分割点，如何才能更高效？**这就是直方图算法要解决的问题。GBDT算法是基于决策树的ensemble模型，树的每次生长都是要寻找分割点，将数据分到左子树和右子树中，如何寻找这个分割点是非常耗时的。一种是预排序算法，即将特征f的所有取值从小到大排序，然后遍历每一个特征取值$f_{i}$，分别以$f_{i}$为分割点，计算增益，选取最大的增益对应的分割点作为当前的分割节点。一种方法是直方图算法，即将连续特征离散化，分到指定的几个bin内，比如特征取值1-10分到bin=1内，10-20分到bin=2内....。寻找最佳分割点时直接根据bin的取值来分割即可。二者相比时间复杂度分别为O(data*feature)和O(bin*fenture)，feature表示特征维度，data表示样本数量，bin表示桶数量。\n\n![直方图算法](/images/lgb_alg1_his.png)\n\n上图就是直方图算法的主题逻辑。\n\n### 三、GOSS采样策略\n\n**GOSS采样策略的灵感来自于Adaboost**，在adaboost中，样本是有权重的，样本的误差越大，权重越高，在下次训练时模型会更加关注误差更大的样本。但是在GBDT算法中样本是没有权重的，无法直接将Adaboost的方式迁移过来。但是在GBDT算法中，样本的梯度越小，则误差越小，表示该样本被训练的更好，所以误差和梯度之间也是有一定关系的。因此是否可以考虑将这部分训练的很好地样本丢掉，但是直接丢掉样本会影响分布。所以LightGBM提出依据样本梯度进行采样的策略。思路很简单，\n\n1. 按照样本梯度绝对值从大到小排序\n\n2. 选取topa%梯度较大的样本，然后再选取b%梯度较小的样本（b是指全部样本的b%）\n\n3. 对采样出来的小梯度样本乘以(1-a)/b，提升小梯度样本的权重（1-a是表示小梯度样本的分布，大梯度样本的分布是a，1/b是将小梯度样本的比例放大b倍）。\n\n   \n\n   ![GOSS算法](/images/lgb_alg2_goss.png)\n\n   \n\n上图是GOSS算法的整体逻辑。\n\n### 四、互斥特征绑定算法\n\n互斥特征绑定的目的是降低特征维度，减少计算量，其实也有点类似于列采样。在高维稀疏特征中，很多特征并不会同时非零。即多个特征可以合并成一维特征，LightGBM采用了互斥特征绑定算法（EFB）来降低特征维数。将特征进行分桶，桶内特征是互斥的，然后将桶内特征合并成一个特征再去进行分裂。这样可以将数据从O(data*feature)降低到O(data*buddle)。该方法实现起来存在两大难点：\n\n1. 哪些特征可以放在一起\n2. 如何构建buddle\n\n#### 4.1哪些特征可以绑定\n\n对于第一个问题，EFB算法是构建了一个图G=(V,E)，图的顶点E是特征，顶点之间的边V表示特征之间的冲突数，将存在冲突的两个顶点构建一条边。然后将不存在冲突的顶点放到一个集合内，构成一个特征包。在LightGBM中，为了提升效率，它是允许一部分特征之间存在一定的冲突的，即允许存在$gamma$个冲突。通过控制$gamma$的大小，可以让算法精度和效率有一定的平衡。算法思路为：\n\n1. 构建加权图，V表示两个特征之间的冲突数\n2. 将特征按照冲突数降序排列，分配特征到不同的特征包内\n3. 通过控制特征包内最大冲突数K来决定该特征是放入已有特征包内还是新建特征包\n4. 这样算法思路为O(feature*feature)，因为要两两遍历特征之间的冲突\n\n这样做对于特征维度较小时还可以完成，维度一旦百万级就无法承受了。\n\n![efb算法](/images/lgb_alg3_efb.png)\n\n因此为了简化上述计算特征冲突数的过程，采样一个特征下非0的样本数量，一个特征下非0值特征越多，则越容易冲突。\n\n#### 4.2如何构建buddle\n\n上面解决了如何判断哪些特征要被绑定在一起，那么EFB算法如何绑定特征呢？如何既减少了特征维度，又保证原始的特征值可以在特征包中被识别出来呢？由于LightGBM是采用直方图算法减少对于寻找最佳分裂点的算法复杂度，直方图算法将特征值离散到若干个bin中。这里EFB算法为了保留特征，将bundle内不同的特征加上一个偏移常量，使不同特征的值分布到bundle的不同bin内。例如：特征A的取值范围为[0,10)，特征B的原始取值范围为[0，20)，对特征B的取值上加一个偏置常量10，将其取值范围变为[10,30)，这样就可以将特征A和B绑定在一起了。具体的算法流程上图Algorithm4所示。\n\n### 五、按叶子生长（leaf-wise）\n\n在xgb中，决策树的构建是按照层生长的。每次都是把一层的节点都进行分裂，这种操作复杂度会高，而且一层中未必所有节点都有很高的收益。所以在LightGBM中是按照叶子节点生长的，每次选择所有叶子节点中收益最大的那个节点进行分裂，依次循环下去。和xgb相比，优点是lgb减少了一部分收益较小的节点分裂开销，生成的树较深，更容易降低误差，缺点是树较深，有可能会过拟合，所以lgb有一个控制树的深度的参数，防止过拟合。\n\n### 六、总结\n\nlgb效率更高主要得益于它的几个优化点，\n\n1. 分裂的时候采用直方图算法，相当于减少计算的样本数\n2. 计算增益的时候的采用GOSS算法，对样本采样，也是减少样本数\n3. 对于高维稀疏特征采用EFB算法，相当于降低特征维度\n4. 树的生长采用按叶子生长，减少不必要的计算开销\n\n万变不离其宗，主题核心就是**减少样本数或者减少特征数两个点展开**，结果也验证了作者的想法。\n\n\n\nRef:\n\n[https://zhuanlan.zhihu.com/p/59631419](/images/lgb_alg1_his.png)\n\n[http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/](http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/)\n\n\n\n","slug":"LightGBM算法原理","published":1,"updated":"2022-06-26T10:48:18.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrp0007j4h20rmkge8x","content":"<p>&emsp;&emsp;在 <a href=\"https://silencemao.github.io/2022/04/05/XGBoost%E4%BB%8B%E7%BB%8D/\">XGBoost介绍</a>中，我们讲述了xgb的运行原理，节点分裂方式。在xgb出现之后，迅速的应用在工业界中并取得了非常好的效果。但是仍然存在一些问题，比如当数据规模巨大的情况下，运行速度慢，不能直接支持类别特征等。在2017年，微软发布了一个新的GBDT算法框架<strong>LightGBM</strong>，与xgb相比，达到相同的算法效果，运行速度更快，并且支持类别特征。lgb的主要改进点是提升模型速度，从两个维度进行了优化，分别是样本维度和特征维度。本文基于lgb的论文进行总结归纳，以便时常温习回顾。</p>\n<h3 id=\"一、主要改进点\"><a href=\"#一、主要改进点\" class=\"headerlink\" title=\"一、主要改进点\"></a>一、主要改进点</h3><ol>\n<li>直方图算法（histogram-based algorithm）：基于连续特征值进行分桶bin，然后基于不同的bin进行分裂。相比于预排序算法，节省内存和提升速度。</li>\n<li>单边梯度采样算法GOSS（Gradient-based One-Side Sampling）：计算增益过程中，不再使用全部样本，而是筛选出一部分梯度大的样本和部分梯度小的样本计算增益。减少样本数量，提升计算速度。</li>\n<li>互斥特征绑定算法EFB（Exclusive Feature Bundling）：在高维稀疏特征中，部分特征并不会同时非零，所以可以将其中几个特征绑定为一个特征，进行分裂。减少特征数量，提升计算速度。</li>\n<li>叶子节点生长策略（leaf-wise tree growth strategy）：xgb在树的生成过程中，每次都是一层的所有节点都进行分裂，lgb是每次选择所有叶节点中收益最大的节点分裂，有利有弊，利：降低模型误差，弊：树生长过深，可能会过拟合。</li>\n</ol>\n<span id=\"more\"></span>\n<h3 id=\"二、直方图算法\"><a href=\"#二、直方图算法\" class=\"headerlink\" title=\"二、直方图算法\"></a>二、直方图算法</h3><p><strong>寻找最佳分割点，如何才能更高效？</strong>这就是直方图算法要解决的问题。GBDT算法是基于决策树的ensemble模型，树的每次生长都是要寻找分割点，将数据分到左子树和右子树中，如何寻找这个分割点是非常耗时的。一种是预排序算法，即将特征f的所有取值从小到大排序，然后遍历每一个特征取值$f_{i}$，分别以$f_{i}$为分割点，计算增益，选取最大的增益对应的分割点作为当前的分割节点。一种方法是直方图算法，即将连续特征离散化，分到指定的几个bin内，比如特征取值1-10分到bin=1内，10-20分到bin=2内….。寻找最佳分割点时直接根据bin的取值来分割即可。二者相比时间复杂度分别为O(data<em>feature)和O(bin</em>fenture)，feature表示特征维度，data表示样本数量，bin表示桶数量。</p>\n<p><img src=\"/images/lgb_alg1_his.png\" alt=\"直方图算法\"></p>\n<p>上图就是直方图算法的主题逻辑。</p>\n<h3 id=\"三、GOSS采样策略\"><a href=\"#三、GOSS采样策略\" class=\"headerlink\" title=\"三、GOSS采样策略\"></a>三、GOSS采样策略</h3><p><strong>GOSS采样策略的灵感来自于Adaboost</strong>，在adaboost中，样本是有权重的，样本的误差越大，权重越高，在下次训练时模型会更加关注误差更大的样本。但是在GBDT算法中样本是没有权重的，无法直接将Adaboost的方式迁移过来。但是在GBDT算法中，样本的梯度越小，则误差越小，表示该样本被训练的更好，所以误差和梯度之间也是有一定关系的。因此是否可以考虑将这部分训练的很好地样本丢掉，但是直接丢掉样本会影响分布。所以LightGBM提出依据样本梯度进行采样的策略。思路很简单，</p>\n<ol>\n<li><p>按照样本梯度绝对值从大到小排序</p>\n</li>\n<li><p>选取topa%梯度较大的样本，然后再选取b%梯度较小的样本（b是指全部样本的b%）</p>\n</li>\n<li><p>对采样出来的小梯度样本乘以(1-a)/b，提升小梯度样本的权重（1-a是表示小梯度样本的分布，大梯度样本的分布是a，1/b是将小梯度样本的比例放大b倍）。</p>\n</li>\n</ol>\n<p>   <img src=\"/images/lgb_alg2_goss.png\" alt=\"GOSS算法\"></p>\n<p>上图是GOSS算法的整体逻辑。</p>\n<h3 id=\"四、互斥特征绑定算法\"><a href=\"#四、互斥特征绑定算法\" class=\"headerlink\" title=\"四、互斥特征绑定算法\"></a>四、互斥特征绑定算法</h3><p>互斥特征绑定的目的是降低特征维度，减少计算量，其实也有点类似于列采样。在高维稀疏特征中，很多特征并不会同时非零。即多个特征可以合并成一维特征，LightGBM采用了互斥特征绑定算法（EFB）来降低特征维数。将特征进行分桶，桶内特征是互斥的，然后将桶内特征合并成一个特征再去进行分裂。这样可以将数据从O(data<em>feature)降低到O(data</em>buddle)。该方法实现起来存在两大难点：</p>\n<ol>\n<li>哪些特征可以放在一起</li>\n<li>如何构建buddle</li>\n</ol>\n<h4 id=\"4-1哪些特征可以绑定\"><a href=\"#4-1哪些特征可以绑定\" class=\"headerlink\" title=\"4.1哪些特征可以绑定\"></a>4.1哪些特征可以绑定</h4><p>对于第一个问题，EFB算法是构建了一个图G=(V,E)，图的顶点E是特征，顶点之间的边V表示特征之间的冲突数，将存在冲突的两个顶点构建一条边。然后将不存在冲突的顶点放到一个集合内，构成一个特征包。在LightGBM中，为了提升效率，它是允许一部分特征之间存在一定的冲突的，即允许存在$gamma$个冲突。通过控制$gamma$的大小，可以让算法精度和效率有一定的平衡。算法思路为：</p>\n<ol>\n<li>构建加权图，V表示两个特征之间的冲突数</li>\n<li>将特征按照冲突数降序排列，分配特征到不同的特征包内</li>\n<li>通过控制特征包内最大冲突数K来决定该特征是放入已有特征包内还是新建特征包</li>\n<li>这样算法思路为O(feature*feature)，因为要两两遍历特征之间的冲突</li>\n</ol>\n<p>这样做对于特征维度较小时还可以完成，维度一旦百万级就无法承受了。</p>\n<p><img src=\"/images/lgb_alg3_efb.png\" alt=\"efb算法\"></p>\n<p>因此为了简化上述计算特征冲突数的过程，采样一个特征下非0的样本数量，一个特征下非0值特征越多，则越容易冲突。</p>\n<h4 id=\"4-2如何构建buddle\"><a href=\"#4-2如何构建buddle\" class=\"headerlink\" title=\"4.2如何构建buddle\"></a>4.2如何构建buddle</h4><p>上面解决了如何判断哪些特征要被绑定在一起，那么EFB算法如何绑定特征呢？如何既减少了特征维度，又保证原始的特征值可以在特征包中被识别出来呢？由于LightGBM是采用直方图算法减少对于寻找最佳分裂点的算法复杂度，直方图算法将特征值离散到若干个bin中。这里EFB算法为了保留特征，将bundle内不同的特征加上一个偏移常量，使不同特征的值分布到bundle的不同bin内。例如：特征A的取值范围为[0,10)，特征B的原始取值范围为[0，20)，对特征B的取值上加一个偏置常量10，将其取值范围变为[10,30)，这样就可以将特征A和B绑定在一起了。具体的算法流程上图Algorithm4所示。</p>\n<h3 id=\"五、按叶子生长（leaf-wise）\"><a href=\"#五、按叶子生长（leaf-wise）\" class=\"headerlink\" title=\"五、按叶子生长（leaf-wise）\"></a>五、按叶子生长（leaf-wise）</h3><p>在xgb中，决策树的构建是按照层生长的。每次都是把一层的节点都进行分裂，这种操作复杂度会高，而且一层中未必所有节点都有很高的收益。所以在LightGBM中是按照叶子节点生长的，每次选择所有叶子节点中收益最大的那个节点进行分裂，依次循环下去。和xgb相比，优点是lgb减少了一部分收益较小的节点分裂开销，生成的树较深，更容易降低误差，缺点是树较深，有可能会过拟合，所以lgb有一个控制树的深度的参数，防止过拟合。</p>\n<h3 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h3><p>lgb效率更高主要得益于它的几个优化点，</p>\n<ol>\n<li>分裂的时候采用直方图算法，相当于减少计算的样本数</li>\n<li>计算增益的时候的采用GOSS算法，对样本采样，也是减少样本数</li>\n<li>对于高维稀疏特征采用EFB算法，相当于降低特征维度</li>\n<li>树的生长采用按叶子生长，减少不必要的计算开销</li>\n</ol>\n<p>万变不离其宗，主题核心就是<strong>减少样本数或者减少特征数两个点展开</strong>，结果也验证了作者的想法。</p>\n<p>Ref:</p>\n<p><a href=\"/images/lgb_alg1_his.png\">https://zhuanlan.zhihu.com/p/59631419</a></p>\n<p><a href=\"http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/\">http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/</a></p>\n","site":{"data":{}},"wordcount":2889,"excerpt":"<p>&emsp;&emsp;在 <a href=\"https://silencemao.github.io/2022/04/05/XGBoost%E4%BB%8B%E7%BB%8D/\">XGBoost介绍</a>中，我们讲述了xgb的运行原理，节点分裂方式。在xgb出现之后，迅速的应用在工业界中并取得了非常好的效果。但是仍然存在一些问题，比如当数据规模巨大的情况下，运行速度慢，不能直接支持类别特征等。在2017年，微软发布了一个新的GBDT算法框架<strong>LightGBM</strong>，与xgb相比，达到相同的算法效果，运行速度更快，并且支持类别特征。lgb的主要改进点是提升模型速度，从两个维度进行了优化，分别是样本维度和特征维度。本文基于lgb的论文进行总结归纳，以便时常温习回顾。</p>\n<h3 id=\"一、主要改进点\"><a href=\"#一、主要改进点\" class=\"headerlink\" title=\"一、主要改进点\"></a>一、主要改进点</h3><ol>\n<li>直方图算法（histogram-based algorithm）：基于连续特征值进行分桶bin，然后基于不同的bin进行分裂。相比于预排序算法，节省内存和提升速度。</li>\n<li>单边梯度采样算法GOSS（Gradient-based One-Side Sampling）：计算增益过程中，不再使用全部样本，而是筛选出一部分梯度大的样本和部分梯度小的样本计算增益。减少样本数量，提升计算速度。</li>\n<li>互斥特征绑定算法EFB（Exclusive Feature Bundling）：在高维稀疏特征中，部分特征并不会同时非零，所以可以将其中几个特征绑定为一个特征，进行分裂。减少特征数量，提升计算速度。</li>\n<li>叶子节点生长策略（leaf-wise tree growth strategy）：xgb在树的生成过程中，每次都是一层的所有节点都进行分裂，lgb是每次选择所有叶节点中收益最大的节点分裂，有利有弊，利：降低模型误差，弊：树生长过深，可能会过拟合。</li>\n</ol>","more":"<h3 id=\"二、直方图算法\"><a href=\"#二、直方图算法\" class=\"headerlink\" title=\"二、直方图算法\"></a>二、直方图算法</h3><p><strong>寻找最佳分割点，如何才能更高效？</strong>这就是直方图算法要解决的问题。GBDT算法是基于决策树的ensemble模型，树的每次生长都是要寻找分割点，将数据分到左子树和右子树中，如何寻找这个分割点是非常耗时的。一种是预排序算法，即将特征f的所有取值从小到大排序，然后遍历每一个特征取值$f_{i}$，分别以$f_{i}$为分割点，计算增益，选取最大的增益对应的分割点作为当前的分割节点。一种方法是直方图算法，即将连续特征离散化，分到指定的几个bin内，比如特征取值1-10分到bin=1内，10-20分到bin=2内….。寻找最佳分割点时直接根据bin的取值来分割即可。二者相比时间复杂度分别为O(data<em>feature)和O(bin</em>fenture)，feature表示特征维度，data表示样本数量，bin表示桶数量。</p>\n<p><img src=\"/images/lgb_alg1_his.png\" alt=\"直方图算法\"></p>\n<p>上图就是直方图算法的主题逻辑。</p>\n<h3 id=\"三、GOSS采样策略\"><a href=\"#三、GOSS采样策略\" class=\"headerlink\" title=\"三、GOSS采样策略\"></a>三、GOSS采样策略</h3><p><strong>GOSS采样策略的灵感来自于Adaboost</strong>，在adaboost中，样本是有权重的，样本的误差越大，权重越高，在下次训练时模型会更加关注误差更大的样本。但是在GBDT算法中样本是没有权重的，无法直接将Adaboost的方式迁移过来。但是在GBDT算法中，样本的梯度越小，则误差越小，表示该样本被训练的更好，所以误差和梯度之间也是有一定关系的。因此是否可以考虑将这部分训练的很好地样本丢掉，但是直接丢掉样本会影响分布。所以LightGBM提出依据样本梯度进行采样的策略。思路很简单，</p>\n<ol>\n<li><p>按照样本梯度绝对值从大到小排序</p>\n</li>\n<li><p>选取topa%梯度较大的样本，然后再选取b%梯度较小的样本（b是指全部样本的b%）</p>\n</li>\n<li><p>对采样出来的小梯度样本乘以(1-a)/b，提升小梯度样本的权重（1-a是表示小梯度样本的分布，大梯度样本的分布是a，1/b是将小梯度样本的比例放大b倍）。</p>\n</li>\n</ol>\n<p>   <img src=\"/images/lgb_alg2_goss.png\" alt=\"GOSS算法\"></p>\n<p>上图是GOSS算法的整体逻辑。</p>\n<h3 id=\"四、互斥特征绑定算法\"><a href=\"#四、互斥特征绑定算法\" class=\"headerlink\" title=\"四、互斥特征绑定算法\"></a>四、互斥特征绑定算法</h3><p>互斥特征绑定的目的是降低特征维度，减少计算量，其实也有点类似于列采样。在高维稀疏特征中，很多特征并不会同时非零。即多个特征可以合并成一维特征，LightGBM采用了互斥特征绑定算法（EFB）来降低特征维数。将特征进行分桶，桶内特征是互斥的，然后将桶内特征合并成一个特征再去进行分裂。这样可以将数据从O(data<em>feature)降低到O(data</em>buddle)。该方法实现起来存在两大难点：</p>\n<ol>\n<li>哪些特征可以放在一起</li>\n<li>如何构建buddle</li>\n</ol>\n<h4 id=\"4-1哪些特征可以绑定\"><a href=\"#4-1哪些特征可以绑定\" class=\"headerlink\" title=\"4.1哪些特征可以绑定\"></a>4.1哪些特征可以绑定</h4><p>对于第一个问题，EFB算法是构建了一个图G=(V,E)，图的顶点E是特征，顶点之间的边V表示特征之间的冲突数，将存在冲突的两个顶点构建一条边。然后将不存在冲突的顶点放到一个集合内，构成一个特征包。在LightGBM中，为了提升效率，它是允许一部分特征之间存在一定的冲突的，即允许存在$gamma$个冲突。通过控制$gamma$的大小，可以让算法精度和效率有一定的平衡。算法思路为：</p>\n<ol>\n<li>构建加权图，V表示两个特征之间的冲突数</li>\n<li>将特征按照冲突数降序排列，分配特征到不同的特征包内</li>\n<li>通过控制特征包内最大冲突数K来决定该特征是放入已有特征包内还是新建特征包</li>\n<li>这样算法思路为O(feature*feature)，因为要两两遍历特征之间的冲突</li>\n</ol>\n<p>这样做对于特征维度较小时还可以完成，维度一旦百万级就无法承受了。</p>\n<p><img src=\"/images/lgb_alg3_efb.png\" alt=\"efb算法\"></p>\n<p>因此为了简化上述计算特征冲突数的过程，采样一个特征下非0的样本数量，一个特征下非0值特征越多，则越容易冲突。</p>\n<h4 id=\"4-2如何构建buddle\"><a href=\"#4-2如何构建buddle\" class=\"headerlink\" title=\"4.2如何构建buddle\"></a>4.2如何构建buddle</h4><p>上面解决了如何判断哪些特征要被绑定在一起，那么EFB算法如何绑定特征呢？如何既减少了特征维度，又保证原始的特征值可以在特征包中被识别出来呢？由于LightGBM是采用直方图算法减少对于寻找最佳分裂点的算法复杂度，直方图算法将特征值离散到若干个bin中。这里EFB算法为了保留特征，将bundle内不同的特征加上一个偏移常量，使不同特征的值分布到bundle的不同bin内。例如：特征A的取值范围为[0,10)，特征B的原始取值范围为[0，20)，对特征B的取值上加一个偏置常量10，将其取值范围变为[10,30)，这样就可以将特征A和B绑定在一起了。具体的算法流程上图Algorithm4所示。</p>\n<h3 id=\"五、按叶子生长（leaf-wise）\"><a href=\"#五、按叶子生长（leaf-wise）\" class=\"headerlink\" title=\"五、按叶子生长（leaf-wise）\"></a>五、按叶子生长（leaf-wise）</h3><p>在xgb中，决策树的构建是按照层生长的。每次都是把一层的节点都进行分裂，这种操作复杂度会高，而且一层中未必所有节点都有很高的收益。所以在LightGBM中是按照叶子节点生长的，每次选择所有叶子节点中收益最大的那个节点进行分裂，依次循环下去。和xgb相比，优点是lgb减少了一部分收益较小的节点分裂开销，生成的树较深，更容易降低误差，缺点是树较深，有可能会过拟合，所以lgb有一个控制树的深度的参数，防止过拟合。</p>\n<h3 id=\"六、总结\"><a href=\"#六、总结\" class=\"headerlink\" title=\"六、总结\"></a>六、总结</h3><p>lgb效率更高主要得益于它的几个优化点，</p>\n<ol>\n<li>分裂的时候采用直方图算法，相当于减少计算的样本数</li>\n<li>计算增益的时候的采用GOSS算法，对样本采样，也是减少样本数</li>\n<li>对于高维稀疏特征采用EFB算法，相当于降低特征维度</li>\n<li>树的生长采用按叶子生长，减少不必要的计算开销</li>\n</ol>\n<p>万变不离其宗，主题核心就是<strong>减少样本数或者减少特征数两个点展开</strong>，结果也验证了作者的想法。</p>\n<p>Ref:</p>\n<p><a href=\"/images/lgb_alg1_his.png\">https://zhuanlan.zhihu.com/p/59631419</a></p>\n<p><a href=\"http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/\">http://www.csuldw.com/2019/07/24/2019-07-24-an-introduction-tolightGBM-explained/</a></p>"},{"title":"Linux下压缩隐藏文件","date":"2020-05-03T10:28:53.000Z","_content":"\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","source":"_posts/Linux下压缩隐藏文件.md","raw":"---\ntitle: Linux下压缩隐藏文件\ndate: 2020-05-03 18:28:53\ncategories: Linux\ntags:\n---\n\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","slug":"Linux下压缩隐藏文件","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrp0008j4h25ud48xjv","content":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz abc/*   // 压缩<br>tar zxvf abc.tar.gz         // 解压<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>\n<span id=\"more\"></span>\n<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz *       <br></code></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹&quot;.&quot;和“..”   <br></code></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  <br></code></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>\n","site":{"data":{}},"wordcount":789,"excerpt":"<h1 id=\"Linux下压缩文件\"><a href=\"#Linux下压缩文件\" class=\"headerlink\" title=\"Linux下压缩文件\"></a>Linux下压缩文件</h1><p>&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz abc/*   // 压缩<br>tar zxvf abc.tar.gz         // 解压<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>","more":"<h2 id=\"压缩非隐藏文件\"><a href=\"#压缩非隐藏文件\" class=\"headerlink\" title=\"压缩非隐藏文件\"></a>压缩非隐藏文件</h2><p>&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹<br></code></pre></td></tr></table></figure>\n<p>&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz *       <br></code></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\"><a href=\"#压缩隐藏文件\" class=\"headerlink\" title=\"压缩隐藏文件\"></a>压缩隐藏文件</h2><p>&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>&emsp;&emsp;压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹&quot;.&quot;和“..”   <br></code></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是”.”，第三个以及后面可以是任意字符。</p>\n<p>&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  <br></code></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>"},{"title":"Prim算法","mathjax":true,"date":"2021-04-11T08:17:50.000Z","caytegories":"算法","_content":"\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","source":"_posts/Prim算法.md","raw":"---\ntitle: Prim算法\nmathjax: true\ndate: 2021-04-11 16:17:50\ncaytegories: 算法\ntags: prim\n---\n\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","slug":"Prim算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrr000cj4h25hjoh58f","content":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><p>&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持”连通性”的前提下的最小子图，子图各个边的权重之和最小。</p>\n<span id=\"more\"></span>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3><p>&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将$u_k$从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>  m := <span class=\"hljs-built_in\">len</span>(matrix)<br>  V := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>  <span class=\"hljs-keyword\">var</span> U []<span class=\"hljs-keyword\">int</span><br>  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; m; i++ &#123;<br>    U = <span class=\"hljs-built_in\">append</span>(U, i)<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; m<span class=\"hljs-number\">-1</span>; k++ &#123;<br>    min := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">31</span> - <span class=\"hljs-number\">1</span><br>    ind1, ind2 := <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> V &#123;<br>      <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> U &#123;<br>        <span class=\"hljs-keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;<br>          min = matrix[V[i]][U[j]]<br>          ind1, ind2 = i, j<br>        &#125;<br>      &#125;<br>    &#125;<br>    fmt.Println(V[ind1], U[ind2], min)<br>    V = <span class=\"hljs-built_in\">append</span>(V, U[ind2])<br>    U = <span class=\"hljs-built_in\">append</span>(U[:ind2], U[ind2+<span class=\"hljs-number\">1</span>:]...)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>  matrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>    &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>    &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>    &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>    &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>  &#125;<br>  prim(matrix)<br>  fmt.Println()<br>  prim1(matrix)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim1</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tm := <span class=\"hljs-built_in\">len</span>(matrix)<br>\tdis := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, m)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m; i++ &#123;<br>\t\tdis[i] = matrix[<span class=\"hljs-number\">0</span>][i]<br>\t&#125;<br>\tstatus := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">bool</span>, m)<br><br>\tres := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m<span class=\"hljs-number\">-1</span>; i++ &#123; <span class=\"hljs-comment\">// 需要找剩余的点</span><br>\t\tt := <span class=\"hljs-number\">-1</span><br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123; <span class=\"hljs-comment\">// 每次遍历剩余的所有点</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"hljs-number\">-1</span> || dis[t] &gt; dis[j]) &#123;<br>\t\t\t\tt = j<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tres += dis[t]<br>\t\tfmt.Println(i, t, dis[t])<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;<br>\t\t\t\tdis[j] = matrix[t][j]<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tstatus[t] = <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tfmt.Println(res)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tmatrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>\t&#125;<br>\tprim(matrix)<br>\tfmt.Println()<br>\tprim1(matrix)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2288,"excerpt":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><p>&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持”连通性”的前提下的最小子图，子图各个边的权重之和最小。</p>","more":"<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3><p>&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将$u_k$从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>  m := <span class=\"hljs-built_in\">len</span>(matrix)<br>  V := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>  <span class=\"hljs-keyword\">var</span> U []<span class=\"hljs-keyword\">int</span><br>  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; m; i++ &#123;<br>    U = <span class=\"hljs-built_in\">append</span>(U, i)<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; m<span class=\"hljs-number\">-1</span>; k++ &#123;<br>    min := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">31</span> - <span class=\"hljs-number\">1</span><br>    ind1, ind2 := <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> V &#123;<br>      <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> U &#123;<br>        <span class=\"hljs-keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;<br>          min = matrix[V[i]][U[j]]<br>          ind1, ind2 = i, j<br>        &#125;<br>      &#125;<br>    &#125;<br>    fmt.Println(V[ind1], U[ind2], min)<br>    V = <span class=\"hljs-built_in\">append</span>(V, U[ind2])<br>    U = <span class=\"hljs-built_in\">append</span>(U[:ind2], U[ind2+<span class=\"hljs-number\">1</span>:]...)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>  matrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>    &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>    &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>    &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>    &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>  &#125;<br>  prim(matrix)<br>  fmt.Println()<br>  prim1(matrix)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim1</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tm := <span class=\"hljs-built_in\">len</span>(matrix)<br>\tdis := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, m)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m; i++ &#123;<br>\t\tdis[i] = matrix[<span class=\"hljs-number\">0</span>][i]<br>\t&#125;<br>\tstatus := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">bool</span>, m)<br><br>\tres := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m<span class=\"hljs-number\">-1</span>; i++ &#123; <span class=\"hljs-comment\">// 需要找剩余的点</span><br>\t\tt := <span class=\"hljs-number\">-1</span><br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123; <span class=\"hljs-comment\">// 每次遍历剩余的所有点</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"hljs-number\">-1</span> || dis[t] &gt; dis[j]) &#123;<br>\t\t\t\tt = j<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tres += dis[t]<br>\t\tfmt.Println(i, t, dis[t])<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;<br>\t\t\t\tdis[j] = matrix[t][j]<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tstatus[t] = <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tfmt.Println(res)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tmatrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>\t&#125;<br>\tprim(matrix)<br>\tfmt.Println()<br>\tprim1(matrix)<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"Spark-使用总结","date":"2021-07-20T15:14:26.000Z","_content":"\n&emsp;&emsp;在使用spark的过程中经常会遇到一些问题，有的是自己对api不熟悉引起的，还有一些问题是spark本身存在的bug，为了避免在同一个位置摔倒两次，所以要把平时遇到的问题记录下来。其实自己之前积攒了很多问题，想着一一把它记录下来（代码已经有了），可是随着时间的推移，之前的一些问题现在看上去还是自己太过初级了，就一直都没有动笔。Anyway，好记性不如烂笔头，还是要行动起来。\n\n<!--more-->\n\n### 1、\"org.apache.spark.sql.AnalysisException: resolved attribute(s)\"\n\n&emsp;&emsp;这个问题我还真是遇到了两次，其实它后面还跟着一些报错，\"missing column xxx from col1, col2, col3\"等，具体的报错我记不太清楚了。**主要问题是**，当两个dataframe df1, df2 join时，比如关联的字段是[a1, a2]，明明关联字段在左右两个表中都存在，但是**关联的时候就是会报错找不到字段**。很奇怪的问题，对df1，df2追本溯源，他们都来自同一张表，经过不同的变换之后，想把df1，df2关联起来时，就会报上面这个错误。\n\n#### 解决方案\n\n&emsp;&emsp;解决方案很简单，把关联字段[a1,a2]分别改成别的名字，比如都变成[a11,a22]，这个操作要在df1和df2中都执行一次。然后进行关联即可。\n\n> Ref：https://gankrin.org/how-to-fix-spark-error-analysisexception-resolved-attributes/\n\n","source":"_posts/Spark-使用总结.md","raw":"---\ntitle: Spark-使用总结\ndate: 2021-07-20 23:14:26\ncategories: 总结\ntags: spark\n---\n\n&emsp;&emsp;在使用spark的过程中经常会遇到一些问题，有的是自己对api不熟悉引起的，还有一些问题是spark本身存在的bug，为了避免在同一个位置摔倒两次，所以要把平时遇到的问题记录下来。其实自己之前积攒了很多问题，想着一一把它记录下来（代码已经有了），可是随着时间的推移，之前的一些问题现在看上去还是自己太过初级了，就一直都没有动笔。Anyway，好记性不如烂笔头，还是要行动起来。\n\n<!--more-->\n\n### 1、\"org.apache.spark.sql.AnalysisException: resolved attribute(s)\"\n\n&emsp;&emsp;这个问题我还真是遇到了两次，其实它后面还跟着一些报错，\"missing column xxx from col1, col2, col3\"等，具体的报错我记不太清楚了。**主要问题是**，当两个dataframe df1, df2 join时，比如关联的字段是[a1, a2]，明明关联字段在左右两个表中都存在，但是**关联的时候就是会报错找不到字段**。很奇怪的问题，对df1，df2追本溯源，他们都来自同一张表，经过不同的变换之后，想把df1，df2关联起来时，就会报上面这个错误。\n\n#### 解决方案\n\n&emsp;&emsp;解决方案很简单，把关联字段[a1,a2]分别改成别的名字，比如都变成[a11,a22]，这个操作要在df1和df2中都执行一次。然后进行关联即可。\n\n> Ref：https://gankrin.org/how-to-fix-spark-error-analysisexception-resolved-attributes/\n\n","slug":"Spark-使用总结","published":1,"updated":"2022-05-21T10:33:18.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrr000dj4h27e9kcw6a","content":"<p>&emsp;&emsp;在使用spark的过程中经常会遇到一些问题，有的是自己对api不熟悉引起的，还有一些问题是spark本身存在的bug，为了避免在同一个位置摔倒两次，所以要把平时遇到的问题记录下来。其实自己之前积攒了很多问题，想着一一把它记录下来（代码已经有了），可是随着时间的推移，之前的一些问题现在看上去还是自己太过初级了，就一直都没有动笔。Anyway，好记性不如烂笔头，还是要行动起来。</p>\n<span id=\"more\"></span>\n<h3 id=\"1、”org-apache-spark-sql-AnalysisException-resolved-attribute-s-”\"><a href=\"#1、”org-apache-spark-sql-AnalysisException-resolved-attribute-s-”\" class=\"headerlink\" title=\"1、”org.apache.spark.sql.AnalysisException: resolved attribute(s)”\"></a>1、”org.apache.spark.sql.AnalysisException: resolved attribute(s)”</h3><p>&emsp;&emsp;这个问题我还真是遇到了两次，其实它后面还跟着一些报错，”missing column xxx from col1, col2, col3”等，具体的报错我记不太清楚了。<strong>主要问题是</strong>，当两个dataframe df1, df2 join时，比如关联的字段是[a1, a2]，明明关联字段在左右两个表中都存在，但是<strong>关联的时候就是会报错找不到字段</strong>。很奇怪的问题，对df1，df2追本溯源，他们都来自同一张表，经过不同的变换之后，想把df1，df2关联起来时，就会报上面这个错误。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>&emsp;&emsp;解决方案很简单，把关联字段[a1,a2]分别改成别的名字，比如都变成[a11,a22]，这个操作要在df1和df2中都执行一次。然后进行关联即可。</p>\n<blockquote>\n<p>Ref：<a href=\"https://gankrin.org/how-to-fix-spark-error-analysisexception-resolved-attributes/\">https://gankrin.org/how-to-fix-spark-error-analysisexception-resolved-attributes/</a></p>\n</blockquote>\n","site":{"data":{}},"wordcount":674,"excerpt":"<p>&emsp;&emsp;在使用spark的过程中经常会遇到一些问题，有的是自己对api不熟悉引起的，还有一些问题是spark本身存在的bug，为了避免在同一个位置摔倒两次，所以要把平时遇到的问题记录下来。其实自己之前积攒了很多问题，想着一一把它记录下来（代码已经有了），可是随着时间的推移，之前的一些问题现在看上去还是自己太过初级了，就一直都没有动笔。Anyway，好记性不如烂笔头，还是要行动起来。</p>","more":"<h3 id=\"1、”org-apache-spark-sql-AnalysisException-resolved-attribute-s-”\"><a href=\"#1、”org-apache-spark-sql-AnalysisException-resolved-attribute-s-”\" class=\"headerlink\" title=\"1、”org.apache.spark.sql.AnalysisException: resolved attribute(s)”\"></a>1、”org.apache.spark.sql.AnalysisException: resolved attribute(s)”</h3><p>&emsp;&emsp;这个问题我还真是遇到了两次，其实它后面还跟着一些报错，”missing column xxx from col1, col2, col3”等，具体的报错我记不太清楚了。<strong>主要问题是</strong>，当两个dataframe df1, df2 join时，比如关联的字段是[a1, a2]，明明关联字段在左右两个表中都存在，但是<strong>关联的时候就是会报错找不到字段</strong>。很奇怪的问题，对df1，df2追本溯源，他们都来自同一张表，经过不同的变换之后，想把df1，df2关联起来时，就会报上面这个错误。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>&emsp;&emsp;解决方案很简单，把关联字段[a1,a2]分别改成别的名字，比如都变成[a11,a22]，这个操作要在df1和df2中都执行一次。然后进行关联即可。</p>\n<blockquote>\n<p>Ref：<a href=\"https://gankrin.org/how-to-fix-spark-error-analysisexception-resolved-attributes/\">https://gankrin.org/how-to-fix-spark-error-analysisexception-resolved-attributes/</a></p>\n</blockquote>"},{"title":"Spark和Pandas结合使用.md","date":"2022-05-21T10:35:01.000Z","_content":"\n&emsp;&emsp;本篇文章主要讲解spark和pandas结合应用的一个例子，我之前在工作中总是单纯的使用spark，有时候会将DataFrame转换为临时表，然后使用Hive-sql处理，或者是写Udf做稍微复杂一些的处理。在前段时间接触到spark可以和pandas结合使用，还真是又涨了点知识。\n\n&emsp;&emsp;举一个例子，一个DataFrame的size是[m,n]，我想对其进行groupby操作，然后返对每个分组内的上下两个row进行一些操作，最后返回一个和和原DataFrame大小一致的新df，最初我想到的一个方案是对组内每两行先打一个相同的tag，然后再结合window进行操作，不过这种方案比较麻烦，不直观，而且对每两行之间做一些复杂的运算可能也不是很友好。或者另一个场景，一个df，第一列是id，第二列是不同的品牌，想要统计某个id下各个品牌的数量(可以有重复)，这时一种常规的方案是对每个品牌进行映射到一个新的列，然后若这一行是品牌1，则打标记为1，其它为0，品牌2的列同理，这样处理起来略显麻烦，pandas就可以很简单的处理。\n\n&emsp;&emsp;再举一个例子，我想对df分组，计算组内分位数，但是我要求分位数必须是组内出现的数字，而不是插值之后的数字，并且还要对一些异常值进行判断。你可能会想到使用hivesql中的percentile来做，但是它返回的未必是组内的值，而且对异常值判断不是很方便。\n\n&emsp;&emsp;对于上面两个例子，单纯的使用spark和hivesql都不是最优雅的方案，这时候pandas就出现了，它可以很好地解决这两类问题。\n\n<!--more-->\n\n## 一、环境介绍\n\n&emsp;&emsp;简单介绍下我所应用的环境：首先是要安装pyarrow这个库，其次python版本不要高于3.7，最后spark环境，我之前使用的是2.4，一直报错，折腾了好久，后来发现是环境问题，切换到3.2就可以了。\n\n```shell\nspark:spark-3.2.0-bin-hadoop2.7\npython:3.7\npyarrow:8.0.0\n```\n\n## 二、Spark与Pandas结合\n\n&emsp;&emsp;spark和pandas结合其实就是把一部分sparkdataframe，转换为pandas dataframe，然后可以比较方便的进行数值计算，就像写单机pandas操作一样。\n\n&emsp;&emsp;我们需要用到 **pyspark.sql.functions import pandas_udf, PandasUDFType**，这两个函数，顾名思义，pandas_udf就是用户自定义的pandas函数\n\n```python\ndef pandas_udf(\n    f: PandasScalarToScalarFunction,\n    returnType: Union[AtomicDataTypeOrString, ArrayType],\n    functionType: PandasScalarUDFType,\n) -> UserDefinedFunctionLike: ...\n\n```\n\n\n\npandas_udf就三个参数：\n\n- f：即用户自定义的func\n\n- returnType：自定义的func返回的值类型\n\n- functionType：枚举值，包含下面四种方式，表示的是我们的函数是按照什么样的方式进行映射，即返回值和输入是怎样的映射关系:\n\n  SCALAR: PandasScalarUDFType          ：标量，即返回一个值\n  SCALAR_ITER: PandasScalarIterUDFType ：迭代器，这个还需要我探索一下\n  GROUPED_MAP: PandasGroupedMapUDFType ：分组映射，分组之后返回df，可以和原df大小一致，也可不一致，用户自己可以控制\n  GROUPED_AGG: PandasGroupedAggUDFType ：分组聚合，分组之后返回一个常量值\n\n  \n\n&emsp;**&emsp;今天主要介绍一下GROUPED_MAP和GROUP_AGG的用法。**\n\n\n\n| 方法        | 输入       | 输出      | 配合使用方式 |      |      |\n| ----------- | ---------- | --------- | ------------ | ---- | ---- |\n| GROUPED_MAP | Datafram   | Dataframe | Apply        |      |      |\n| GROUPED_AGG | 一列或多列 | 常量      | agg          |      |      |\n|             |            |           |              |      |      |\n\n\n\n\n\n### 1、GROUPED_AGG\n\n&emsp;&emsp;就拿上面那个计算组内分位数的例子来做，\n\n```python\nimport findspark\nfindspark.init(\"/usr/local/spark-3.2.0-bin-hadoop2.7\")\n\nimport pandas as pd\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as F\nfrom pyspark.sql import types as T\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\n\n\nspark = SparkSession.builder.appName('xxx').config(\"spark.driver.host\", \"xxx\").config(\"spark.driver.bindAddress\", \"xxxx\").getOrCreate()\n\n\nclass M(object):\n\n    def f(self):\n        df = spark.createDataFrame(\n            [(\"a1\", 2.2, 5), (\"a1\", 3.16, 1), (\"a1\", 2.168, 3), (\"a1\", 2.5, 4), (\"a2\", 1.915, 2), (\"a2\", 2.0, 4),\n             (\"a2\", 1.509, 1), (\"a2\", 2.1, 2)],\n            [\"id\", \"max_wheel\", \"cnt\"])\n        df.show()\n        # 定义pandas_udf，输入函数、返回值类型，聚合类型\n        mean_udf = F.pandas_udf(M.__t_agg, \"string\", F.PandasUDFType.GROUPED_AGG)\n        # 应用udf，注意是使用agg，传入两列\n        df = df.groupBy([\"id\"]).agg(mean_udf(df[\"max_wheel\"], df[\"cnt\"]).alias(\"res\"))\n        df.show()\n\n        df = df.withColumn(\"res\", F.split(df[\"res\"], \",\"))\n        df = df.withColumn(\"r1\", df[\"res\"].getItem(0)).withColumn(\"r2\", df[\"res\"].getItem(1))\n        df.show()\n        df.filter(df[\"id\"] == 'a1').show()\n\n    # 定义具体的函数\n    @staticmethod\n    def __t_agg(v1, v2):\n        df = pd.DataFrame(list(zip(v1, v2)), columns=[\"max_wheel\", \"cnt\"])  # 传入两列，转换为df\n        a1 = round(df[\"max_wheel\"].quantile(q=0.5, interpolation=\"lower\"), 2) # 不插值\n        a2 = round(df[\"cnt\"].quantile(q=0.5, interpolation=\"lower\"), 2)\n        return \",\".join([str(a1), str(a2)])\n\nif __name__ == '__main__':\n    m = M()\n    m.f()\n\n--------------------------------------------------------------\n输入\n+---+---------+---+\n| id|max_wheel|cnt|\n+---+---------+---+\n| a1|      2.2|  5|\n| a1|     3.16|  1|\n| a1|    2.168|  3|\n| a1|      2.5|  4|\n| a2|    1.915|  2|\n| a2|      2.0|  4|\n| a2|    1.509|  1|\n| a2|      2.1|  2|\n+---+---------+---+\n\n--------------------------------------------------------------\n输出\n+---+---------+----+---+\n| id|      res|  r1| r2|\n+---+---------+----+---+\n| a1| [2.2, 3]| 2.2|  3|\n| a2|[1.92, 2]|1.92|  2|\n+---+---------+----+---+\n```\n\n### 2、GROUPED_MAP\n\n&emsp;&emsp;就拿上面计算每个id下不同品牌的数量的例子来看：\n\n```python\nclass M(object):\n\n    def f1(self):\n        df = spark.createDataFrame(\n            [('a1', 'a'), ('a1', 'b'), ('a1', 'c'), ('a1', 'a'), ('a1', 'd'),('a1', 'a'), ('a1', 'd'),\n             ('a2', 'c'), ('a2', 'b'), ('a2', 'c'), ('a2', 'b'), ('a2', 'd'),('a2', 'a'), ('a2', 'c')],\n            [\"id\", \"brand\"])\n        df.show()\n        # 设置返回类型，包括返回的列名，每列值的类型\n        schema = T.StructType()\n        schema.add(T.StructField(\"id\", T.StringType(), True))\n        for col in [\"a\", \"b\", \"c\", \"d\"]:\n            schema.add(T.StructField(col, T.IntegerType(), True))\n        print(schema)\n        \n        # 构建pandas_udf\n        cnt_udf = F.pandas_udf(M.__t_map, schema, F.PandasUDFType.GROUPED_MAP)\n        # 引用udf，传入的相当于整个df，注意使用的是apply\n        df1 = df.groupBy([\"id\"]).apply(cnt_udf)\n        df1.show()\n\n    @staticmethod\n    def __t_map(df):\n        res = {\"id\": [], \"a\": [],  \"b\": [],  \"c\": [],  \"d\": []}\n        for index, row in df.iterrows():\n            if index > 0:  # 返回的df是groupby之后的，若没有此操作，则返回的df是和原df大小一致的\n                break\n            res[\"id\"].append(row[\"id\"])\n\n        res[\"a\"].append(df[df[\"brand\"] == 'a'].shape[0])\n        res[\"b\"].append(df[df[\"brand\"] == 'b'].shape[0])\n        res[\"c\"].append(df[df[\"brand\"] == 'c'].shape[0])\n        res[\"d\"].append(df[df[\"brand\"] == 'd'].shape[0])\n\n        res_df = pd.DataFrame(res)\n        return res_df\nif __name__ == '__main__':\n    m = M()\n    # m.f()\n    m.f1()\n    \n--------------------------------------------------------------\n输入\n+---+-----+\n| id|brand|\n+---+-----+\n| a1|    a|\n| a1|    b|\n| a1|    c|\n| a1|    a|\n| a1|    d|\n| a1|    a|\n| a1|    d|\n| a2|    c|\n| a2|    b|\n| a2|    c|\n| a2|    b|\n| a2|    d|\n| a2|    a|\n| a2|    c|\n+---+-----+\n--------------------------------------------------------------\n输出\n+---+---+---+---+---+\n| id|  a|  b|  c|  d|\n+---+---+---+---+---+\n| a1|  3|  1|  1|  2|\n| a2|  1|  2|  3|  1|\n+---+---+---+---+---+\n```\n\n\n\n## 三、总结\n\n&emsp;&emsp;好了，这就是本篇文章对pyspark和pandas一起应用的一个例子，分别介绍了GROUP_AGG和GROUP_MAP两个场景，后续还需要再补充一个SCALAR_ITER的应用，希望能对您有用。\n\n\n\n[Ref]: https://spark.apache.org/docs/2.4.4/sql-pyspark-pandas-with-arrow.html\n\n","source":"_posts/Spark和Pandas结合使用-md.md","raw":"---\ntitle: Spark和Pandas结合使用.md\ndate: 2022-05-21 18:35:01\ncategories: 总结\ntags: spark\n---\n\n&emsp;&emsp;本篇文章主要讲解spark和pandas结合应用的一个例子，我之前在工作中总是单纯的使用spark，有时候会将DataFrame转换为临时表，然后使用Hive-sql处理，或者是写Udf做稍微复杂一些的处理。在前段时间接触到spark可以和pandas结合使用，还真是又涨了点知识。\n\n&emsp;&emsp;举一个例子，一个DataFrame的size是[m,n]，我想对其进行groupby操作，然后返对每个分组内的上下两个row进行一些操作，最后返回一个和和原DataFrame大小一致的新df，最初我想到的一个方案是对组内每两行先打一个相同的tag，然后再结合window进行操作，不过这种方案比较麻烦，不直观，而且对每两行之间做一些复杂的运算可能也不是很友好。或者另一个场景，一个df，第一列是id，第二列是不同的品牌，想要统计某个id下各个品牌的数量(可以有重复)，这时一种常规的方案是对每个品牌进行映射到一个新的列，然后若这一行是品牌1，则打标记为1，其它为0，品牌2的列同理，这样处理起来略显麻烦，pandas就可以很简单的处理。\n\n&emsp;&emsp;再举一个例子，我想对df分组，计算组内分位数，但是我要求分位数必须是组内出现的数字，而不是插值之后的数字，并且还要对一些异常值进行判断。你可能会想到使用hivesql中的percentile来做，但是它返回的未必是组内的值，而且对异常值判断不是很方便。\n\n&emsp;&emsp;对于上面两个例子，单纯的使用spark和hivesql都不是最优雅的方案，这时候pandas就出现了，它可以很好地解决这两类问题。\n\n<!--more-->\n\n## 一、环境介绍\n\n&emsp;&emsp;简单介绍下我所应用的环境：首先是要安装pyarrow这个库，其次python版本不要高于3.7，最后spark环境，我之前使用的是2.4，一直报错，折腾了好久，后来发现是环境问题，切换到3.2就可以了。\n\n```shell\nspark:spark-3.2.0-bin-hadoop2.7\npython:3.7\npyarrow:8.0.0\n```\n\n## 二、Spark与Pandas结合\n\n&emsp;&emsp;spark和pandas结合其实就是把一部分sparkdataframe，转换为pandas dataframe，然后可以比较方便的进行数值计算，就像写单机pandas操作一样。\n\n&emsp;&emsp;我们需要用到 **pyspark.sql.functions import pandas_udf, PandasUDFType**，这两个函数，顾名思义，pandas_udf就是用户自定义的pandas函数\n\n```python\ndef pandas_udf(\n    f: PandasScalarToScalarFunction,\n    returnType: Union[AtomicDataTypeOrString, ArrayType],\n    functionType: PandasScalarUDFType,\n) -> UserDefinedFunctionLike: ...\n\n```\n\n\n\npandas_udf就三个参数：\n\n- f：即用户自定义的func\n\n- returnType：自定义的func返回的值类型\n\n- functionType：枚举值，包含下面四种方式，表示的是我们的函数是按照什么样的方式进行映射，即返回值和输入是怎样的映射关系:\n\n  SCALAR: PandasScalarUDFType          ：标量，即返回一个值\n  SCALAR_ITER: PandasScalarIterUDFType ：迭代器，这个还需要我探索一下\n  GROUPED_MAP: PandasGroupedMapUDFType ：分组映射，分组之后返回df，可以和原df大小一致，也可不一致，用户自己可以控制\n  GROUPED_AGG: PandasGroupedAggUDFType ：分组聚合，分组之后返回一个常量值\n\n  \n\n&emsp;**&emsp;今天主要介绍一下GROUPED_MAP和GROUP_AGG的用法。**\n\n\n\n| 方法        | 输入       | 输出      | 配合使用方式 |      |      |\n| ----------- | ---------- | --------- | ------------ | ---- | ---- |\n| GROUPED_MAP | Datafram   | Dataframe | Apply        |      |      |\n| GROUPED_AGG | 一列或多列 | 常量      | agg          |      |      |\n|             |            |           |              |      |      |\n\n\n\n\n\n### 1、GROUPED_AGG\n\n&emsp;&emsp;就拿上面那个计算组内分位数的例子来做，\n\n```python\nimport findspark\nfindspark.init(\"/usr/local/spark-3.2.0-bin-hadoop2.7\")\n\nimport pandas as pd\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as F\nfrom pyspark.sql import types as T\nfrom pyspark.sql.functions import pandas_udf, PandasUDFType\n\n\nspark = SparkSession.builder.appName('xxx').config(\"spark.driver.host\", \"xxx\").config(\"spark.driver.bindAddress\", \"xxxx\").getOrCreate()\n\n\nclass M(object):\n\n    def f(self):\n        df = spark.createDataFrame(\n            [(\"a1\", 2.2, 5), (\"a1\", 3.16, 1), (\"a1\", 2.168, 3), (\"a1\", 2.5, 4), (\"a2\", 1.915, 2), (\"a2\", 2.0, 4),\n             (\"a2\", 1.509, 1), (\"a2\", 2.1, 2)],\n            [\"id\", \"max_wheel\", \"cnt\"])\n        df.show()\n        # 定义pandas_udf，输入函数、返回值类型，聚合类型\n        mean_udf = F.pandas_udf(M.__t_agg, \"string\", F.PandasUDFType.GROUPED_AGG)\n        # 应用udf，注意是使用agg，传入两列\n        df = df.groupBy([\"id\"]).agg(mean_udf(df[\"max_wheel\"], df[\"cnt\"]).alias(\"res\"))\n        df.show()\n\n        df = df.withColumn(\"res\", F.split(df[\"res\"], \",\"))\n        df = df.withColumn(\"r1\", df[\"res\"].getItem(0)).withColumn(\"r2\", df[\"res\"].getItem(1))\n        df.show()\n        df.filter(df[\"id\"] == 'a1').show()\n\n    # 定义具体的函数\n    @staticmethod\n    def __t_agg(v1, v2):\n        df = pd.DataFrame(list(zip(v1, v2)), columns=[\"max_wheel\", \"cnt\"])  # 传入两列，转换为df\n        a1 = round(df[\"max_wheel\"].quantile(q=0.5, interpolation=\"lower\"), 2) # 不插值\n        a2 = round(df[\"cnt\"].quantile(q=0.5, interpolation=\"lower\"), 2)\n        return \",\".join([str(a1), str(a2)])\n\nif __name__ == '__main__':\n    m = M()\n    m.f()\n\n--------------------------------------------------------------\n输入\n+---+---------+---+\n| id|max_wheel|cnt|\n+---+---------+---+\n| a1|      2.2|  5|\n| a1|     3.16|  1|\n| a1|    2.168|  3|\n| a1|      2.5|  4|\n| a2|    1.915|  2|\n| a2|      2.0|  4|\n| a2|    1.509|  1|\n| a2|      2.1|  2|\n+---+---------+---+\n\n--------------------------------------------------------------\n输出\n+---+---------+----+---+\n| id|      res|  r1| r2|\n+---+---------+----+---+\n| a1| [2.2, 3]| 2.2|  3|\n| a2|[1.92, 2]|1.92|  2|\n+---+---------+----+---+\n```\n\n### 2、GROUPED_MAP\n\n&emsp;&emsp;就拿上面计算每个id下不同品牌的数量的例子来看：\n\n```python\nclass M(object):\n\n    def f1(self):\n        df = spark.createDataFrame(\n            [('a1', 'a'), ('a1', 'b'), ('a1', 'c'), ('a1', 'a'), ('a1', 'd'),('a1', 'a'), ('a1', 'd'),\n             ('a2', 'c'), ('a2', 'b'), ('a2', 'c'), ('a2', 'b'), ('a2', 'd'),('a2', 'a'), ('a2', 'c')],\n            [\"id\", \"brand\"])\n        df.show()\n        # 设置返回类型，包括返回的列名，每列值的类型\n        schema = T.StructType()\n        schema.add(T.StructField(\"id\", T.StringType(), True))\n        for col in [\"a\", \"b\", \"c\", \"d\"]:\n            schema.add(T.StructField(col, T.IntegerType(), True))\n        print(schema)\n        \n        # 构建pandas_udf\n        cnt_udf = F.pandas_udf(M.__t_map, schema, F.PandasUDFType.GROUPED_MAP)\n        # 引用udf，传入的相当于整个df，注意使用的是apply\n        df1 = df.groupBy([\"id\"]).apply(cnt_udf)\n        df1.show()\n\n    @staticmethod\n    def __t_map(df):\n        res = {\"id\": [], \"a\": [],  \"b\": [],  \"c\": [],  \"d\": []}\n        for index, row in df.iterrows():\n            if index > 0:  # 返回的df是groupby之后的，若没有此操作，则返回的df是和原df大小一致的\n                break\n            res[\"id\"].append(row[\"id\"])\n\n        res[\"a\"].append(df[df[\"brand\"] == 'a'].shape[0])\n        res[\"b\"].append(df[df[\"brand\"] == 'b'].shape[0])\n        res[\"c\"].append(df[df[\"brand\"] == 'c'].shape[0])\n        res[\"d\"].append(df[df[\"brand\"] == 'd'].shape[0])\n\n        res_df = pd.DataFrame(res)\n        return res_df\nif __name__ == '__main__':\n    m = M()\n    # m.f()\n    m.f1()\n    \n--------------------------------------------------------------\n输入\n+---+-----+\n| id|brand|\n+---+-----+\n| a1|    a|\n| a1|    b|\n| a1|    c|\n| a1|    a|\n| a1|    d|\n| a1|    a|\n| a1|    d|\n| a2|    c|\n| a2|    b|\n| a2|    c|\n| a2|    b|\n| a2|    d|\n| a2|    a|\n| a2|    c|\n+---+-----+\n--------------------------------------------------------------\n输出\n+---+---+---+---+---+\n| id|  a|  b|  c|  d|\n+---+---+---+---+---+\n| a1|  3|  1|  1|  2|\n| a2|  1|  2|  3|  1|\n+---+---+---+---+---+\n```\n\n\n\n## 三、总结\n\n&emsp;&emsp;好了，这就是本篇文章对pyspark和pandas一起应用的一个例子，分别介绍了GROUP_AGG和GROUP_MAP两个场景，后续还需要再补充一个SCALAR_ITER的应用，希望能对您有用。\n\n\n\n[Ref]: https://spark.apache.org/docs/2.4.4/sql-pyspark-pandas-with-arrow.html\n\n","slug":"Spark和Pandas结合使用-md","published":1,"updated":"2022-05-21T12:16:57.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrt000hj4h2451oedr5","content":"<p>&emsp;&emsp;本篇文章主要讲解spark和pandas结合应用的一个例子，我之前在工作中总是单纯的使用spark，有时候会将DataFrame转换为临时表，然后使用Hive-sql处理，或者是写Udf做稍微复杂一些的处理。在前段时间接触到spark可以和pandas结合使用，还真是又涨了点知识。</p>\n<p>&emsp;&emsp;举一个例子，一个DataFrame的size是[m,n]，我想对其进行groupby操作，然后返对每个分组内的上下两个row进行一些操作，最后返回一个和和原DataFrame大小一致的新df，最初我想到的一个方案是对组内每两行先打一个相同的tag，然后再结合window进行操作，不过这种方案比较麻烦，不直观，而且对每两行之间做一些复杂的运算可能也不是很友好。或者另一个场景，一个df，第一列是id，第二列是不同的品牌，想要统计某个id下各个品牌的数量(可以有重复)，这时一种常规的方案是对每个品牌进行映射到一个新的列，然后若这一行是品牌1，则打标记为1，其它为0，品牌2的列同理，这样处理起来略显麻烦，pandas就可以很简单的处理。</p>\n<p>&emsp;&emsp;再举一个例子，我想对df分组，计算组内分位数，但是我要求分位数必须是组内出现的数字，而不是插值之后的数字，并且还要对一些异常值进行判断。你可能会想到使用hivesql中的percentile来做，但是它返回的未必是组内的值，而且对异常值判断不是很方便。</p>\n<p>&emsp;&emsp;对于上面两个例子，单纯的使用spark和hivesql都不是最优雅的方案，这时候pandas就出现了，它可以很好地解决这两类问题。</p>\n<span id=\"more\"></span>\n<h2 id=\"一、环境介绍\"><a href=\"#一、环境介绍\" class=\"headerlink\" title=\"一、环境介绍\"></a>一、环境介绍</h2><p>&emsp;&emsp;简单介绍下我所应用的环境：首先是要安装pyarrow这个库，其次python版本不要高于3.7，最后spark环境，我之前使用的是2.4，一直报错，折腾了好久，后来发现是环境问题，切换到3.2就可以了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs shell\">spark:spark-3.2.0-bin-hadoop2.7<br>python:3.7<br>pyarrow:8.0.0<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、Spark与Pandas结合\"><a href=\"#二、Spark与Pandas结合\" class=\"headerlink\" title=\"二、Spark与Pandas结合\"></a>二、Spark与Pandas结合</h2><p>&emsp;&emsp;spark和pandas结合其实就是把一部分sparkdataframe，转换为pandas dataframe，然后可以比较方便的进行数值计算，就像写单机pandas操作一样。</p>\n<p>&emsp;&emsp;我们需要用到 <strong>pyspark.sql.functions import pandas_udf, PandasUDFType</strong>，这两个函数，顾名思义，pandas_udf就是用户自定义的pandas函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pandas_udf</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    f: PandasScalarToScalarFunction,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    returnType: <span class=\"hljs-type\">Union</span>[AtomicDataTypeOrString, ArrayType],</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    functionType: PandasScalarUDFType,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>) -&gt; UserDefinedFunctionLike:</span> ...<br><br></code></pre></td></tr></table></figure>\n<p>pandas_udf就三个参数：</p>\n<ul>\n<li><p>f：即用户自定义的func</p>\n</li>\n<li><p>returnType：自定义的func返回的值类型</p>\n</li>\n<li><p>functionType：枚举值，包含下面四种方式，表示的是我们的函数是按照什么样的方式进行映射，即返回值和输入是怎样的映射关系:</p>\n<p>SCALAR: PandasScalarUDFType          ：标量，即返回一个值<br>SCALAR_ITER: PandasScalarIterUDFType ：迭代器，这个还需要我探索一下<br>GROUPED_MAP: PandasGroupedMapUDFType ：分组映射，分组之后返回df，可以和原df大小一致，也可不一致，用户自己可以控制<br>GROUPED_AGG: PandasGroupedAggUDFType ：分组聚合，分组之后返回一个常量值</p>\n</li>\n</ul>\n<p>&emsp;<strong>&emsp;今天主要介绍一下GROUPED_MAP和GROUP_AGG的用法。</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>输入</th>\n<th>输出</th>\n<th>配合使用方式</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GROUPED_MAP</td>\n<td>Datafram</td>\n<td>Dataframe</td>\n<td>Apply</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GROUPED_AGG</td>\n<td>一列或多列</td>\n<td>常量</td>\n<td>agg</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"1、GROUPED-AGG\"><a href=\"#1、GROUPED-AGG\" class=\"headerlink\" title=\"1、GROUPED_AGG\"></a>1、GROUPED_AGG</h3><p>&emsp;&emsp;就拿上面那个计算组内分位数的例子来做，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> findspark<br>findspark.init(<span class=\"hljs-string\">&quot;/usr/local/spark-3.2.0-bin-hadoop2.7&quot;</span>)<br><br><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">from</span> pyspark.sql <span class=\"hljs-keyword\">import</span> SparkSession<br><span class=\"hljs-keyword\">from</span> pyspark.sql <span class=\"hljs-keyword\">import</span> functions <span class=\"hljs-keyword\">as</span> F<br><span class=\"hljs-keyword\">from</span> pyspark.sql <span class=\"hljs-keyword\">import</span> types <span class=\"hljs-keyword\">as</span> T<br><span class=\"hljs-keyword\">from</span> pyspark.sql.functions <span class=\"hljs-keyword\">import</span> pandas_udf, PandasUDFType<br><br><br>spark = SparkSession.builder.appName(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>).config(<span class=\"hljs-string\">&quot;spark.driver.host&quot;</span>, <span class=\"hljs-string\">&quot;xxx&quot;</span>).config(<span class=\"hljs-string\">&quot;spark.driver.bindAddress&quot;</span>, <span class=\"hljs-string\">&quot;xxxx&quot;</span>).getOrCreate()<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">M</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">self</span>):</span><br>        df = spark.createDataFrame(<br>            [(<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">2.2</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">3.16</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">2.168</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">1.915</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4</span>),<br>             (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">1.509</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">2.1</span>, <span class=\"hljs-number\">2</span>)],<br>            [<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-string\">&quot;max_wheel&quot;</span>, <span class=\"hljs-string\">&quot;cnt&quot;</span>])<br>        df.show()<br>        <span class=\"hljs-comment\"># 定义pandas_udf，输入函数、返回值类型，聚合类型</span><br>        mean_udf = F.pandas_udf(M.__t_agg, <span class=\"hljs-string\">&quot;string&quot;</span>, F.PandasUDFType.GROUPED_AGG)<br>        <span class=\"hljs-comment\"># 应用udf，注意是使用agg，传入两列</span><br>        df = df.groupBy([<span class=\"hljs-string\">&quot;id&quot;</span>]).agg(mean_udf(df[<span class=\"hljs-string\">&quot;max_wheel&quot;</span>], df[<span class=\"hljs-string\">&quot;cnt&quot;</span>]).alias(<span class=\"hljs-string\">&quot;res&quot;</span>))<br>        df.show()<br><br>        df = df.withColumn(<span class=\"hljs-string\">&quot;res&quot;</span>, F.split(df[<span class=\"hljs-string\">&quot;res&quot;</span>], <span class=\"hljs-string\">&quot;,&quot;</span>))<br>        df = df.withColumn(<span class=\"hljs-string\">&quot;r1&quot;</span>, df[<span class=\"hljs-string\">&quot;res&quot;</span>].getItem(<span class=\"hljs-number\">0</span>)).withColumn(<span class=\"hljs-string\">&quot;r2&quot;</span>, df[<span class=\"hljs-string\">&quot;res&quot;</span>].getItem(<span class=\"hljs-number\">1</span>))<br>        df.show()<br>        df.<span class=\"hljs-built_in\">filter</span>(df[<span class=\"hljs-string\">&quot;id&quot;</span>] == <span class=\"hljs-string\">&#x27;a1&#x27;</span>).show()<br><br>    <span class=\"hljs-comment\"># 定义具体的函数</span><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__t_agg</span>(<span class=\"hljs-params\">v1, v2</span>):</span><br>        df = pd.DataFrame(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">zip</span>(v1, v2)), columns=[<span class=\"hljs-string\">&quot;max_wheel&quot;</span>, <span class=\"hljs-string\">&quot;cnt&quot;</span>])  <span class=\"hljs-comment\"># 传入两列，转换为df</span><br>        a1 = <span class=\"hljs-built_in\">round</span>(df[<span class=\"hljs-string\">&quot;max_wheel&quot;</span>].quantile(q=<span class=\"hljs-number\">0.5</span>, interpolation=<span class=\"hljs-string\">&quot;lower&quot;</span>), <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\"># 不插值</span><br>        a2 = <span class=\"hljs-built_in\">round</span>(df[<span class=\"hljs-string\">&quot;cnt&quot;</span>].quantile(q=<span class=\"hljs-number\">0.5</span>, interpolation=<span class=\"hljs-string\">&quot;lower&quot;</span>), <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;,&quot;</span>.join([<span class=\"hljs-built_in\">str</span>(a1), <span class=\"hljs-built_in\">str</span>(a2)])<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    m = M()<br>    m.f()<br><br>--------------------------------------------------------------<br>输入<br>+---+---------+---+<br>| <span class=\"hljs-built_in\">id</span>|max_wheel|cnt|<br>+---+---------+---+<br>| a1|      <span class=\"hljs-number\">2.2</span>|  <span class=\"hljs-number\">5</span>|<br>| a1|     <span class=\"hljs-number\">3.16</span>|  <span class=\"hljs-number\">1</span>|<br>| a1|    <span class=\"hljs-number\">2.168</span>|  <span class=\"hljs-number\">3</span>|<br>| a1|      <span class=\"hljs-number\">2.5</span>|  <span class=\"hljs-number\">4</span>|<br>| a2|    <span class=\"hljs-number\">1.915</span>|  <span class=\"hljs-number\">2</span>|<br>| a2|      <span class=\"hljs-number\">2.0</span>|  <span class=\"hljs-number\">4</span>|<br>| a2|    <span class=\"hljs-number\">1.509</span>|  <span class=\"hljs-number\">1</span>|<br>| a2|      <span class=\"hljs-number\">2.1</span>|  <span class=\"hljs-number\">2</span>|<br>+---+---------+---+<br><br>--------------------------------------------------------------<br>输出<br>+---+---------+----+---+<br>| <span class=\"hljs-built_in\">id</span>|      res|  r1| r2|<br>+---+---------+----+---+<br>| a1| [<span class=\"hljs-number\">2.2</span>, <span class=\"hljs-number\">3</span>]| <span class=\"hljs-number\">2.2</span>|  <span class=\"hljs-number\">3</span>|<br>| a2|[<span class=\"hljs-number\">1.92</span>, <span class=\"hljs-number\">2</span>]|<span class=\"hljs-number\">1.92</span>|  <span class=\"hljs-number\">2</span>|<br>+---+---------+----+---+<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、GROUPED-MAP\"><a href=\"#2、GROUPED-MAP\" class=\"headerlink\" title=\"2、GROUPED_MAP\"></a>2、GROUPED_MAP</h3><p>&emsp;&emsp;就拿上面计算每个id下不同品牌的数量的例子来看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">M</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">self</span>):</span><br>        df = spark.createDataFrame(<br>            [(<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>),(<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>),<br>             (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>),(<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>)],<br>            [<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-string\">&quot;brand&quot;</span>])<br>        df.show()<br>        <span class=\"hljs-comment\"># 设置返回类型，包括返回的列名，每列值的类型</span><br>        schema = T.StructType()<br>        schema.add(T.StructField(<span class=\"hljs-string\">&quot;id&quot;</span>, T.StringType(), <span class=\"hljs-literal\">True</span>))<br>        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>]:<br>            schema.add(T.StructField(col, T.IntegerType(), <span class=\"hljs-literal\">True</span>))<br>        <span class=\"hljs-built_in\">print</span>(schema)<br>        <br>        <span class=\"hljs-comment\"># 构建pandas_udf</span><br>        cnt_udf = F.pandas_udf(M.__t_map, schema, F.PandasUDFType.GROUPED_MAP)<br>        <span class=\"hljs-comment\"># 引用udf，传入的相当于整个df，注意使用的是apply</span><br>        df1 = df.groupBy([<span class=\"hljs-string\">&quot;id&quot;</span>]).apply(cnt_udf)<br>        df1.show()<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__t_map</span>(<span class=\"hljs-params\">df</span>):</span><br>        res = &#123;<span class=\"hljs-string\">&quot;id&quot;</span>: [], <span class=\"hljs-string\">&quot;a&quot;</span>: [],  <span class=\"hljs-string\">&quot;b&quot;</span>: [],  <span class=\"hljs-string\">&quot;c&quot;</span>: [],  <span class=\"hljs-string\">&quot;d&quot;</span>: []&#125;<br>        <span class=\"hljs-keyword\">for</span> index, row <span class=\"hljs-keyword\">in</span> df.iterrows():<br>            <span class=\"hljs-keyword\">if</span> index &gt; <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># 返回的df是groupby之后的，若没有此操作，则返回的df是和原df大小一致的</span><br>                <span class=\"hljs-keyword\">break</span><br>            res[<span class=\"hljs-string\">&quot;id&quot;</span>].append(row[<span class=\"hljs-string\">&quot;id&quot;</span>])<br><br>        res[<span class=\"hljs-string\">&quot;a&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;a&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br>        res[<span class=\"hljs-string\">&quot;b&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;b&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br>        res[<span class=\"hljs-string\">&quot;c&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;c&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br>        res[<span class=\"hljs-string\">&quot;d&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;d&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br><br>        res_df = pd.DataFrame(res)<br>        <span class=\"hljs-keyword\">return</span> res_df<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    m = M()<br>    <span class=\"hljs-comment\"># m.f()</span><br>    m.f1()<br>    <br>--------------------------------------------------------------<br>输入<br>+---+-----+<br>| <span class=\"hljs-built_in\">id</span>|brand|<br>+---+-----+<br>| a1|    a|<br>| a1|    b|<br>| a1|    c|<br>| a1|    a|<br>| a1|    d|<br>| a1|    a|<br>| a1|    d|<br>| a2|    c|<br>| a2|    b|<br>| a2|    c|<br>| a2|    b|<br>| a2|    d|<br>| a2|    a|<br>| a2|    c|<br>+---+-----+<br>--------------------------------------------------------------<br>输出<br>+---+---+---+---+---+<br>| <span class=\"hljs-built_in\">id</span>|  a|  b|  c|  d|<br>+---+---+---+---+---+<br>| a1|  <span class=\"hljs-number\">3</span>|  <span class=\"hljs-number\">1</span>|  <span class=\"hljs-number\">1</span>|  <span class=\"hljs-number\">2</span>|<br>| a2|  <span class=\"hljs-number\">1</span>|  <span class=\"hljs-number\">2</span>|  <span class=\"hljs-number\">3</span>|  <span class=\"hljs-number\">1</span>|<br>+---+---+---+---+---+<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>&emsp;&emsp;好了，这就是本篇文章对pyspark和pandas一起应用的一个例子，分别介绍了GROUP_AGG和GROUP_MAP两个场景，后续还需要再补充一个SCALAR_ITER的应用，希望能对您有用。</p>\n","site":{"data":{}},"wordcount":6149,"excerpt":"<p>&emsp;&emsp;本篇文章主要讲解spark和pandas结合应用的一个例子，我之前在工作中总是单纯的使用spark，有时候会将DataFrame转换为临时表，然后使用Hive-sql处理，或者是写Udf做稍微复杂一些的处理。在前段时间接触到spark可以和pandas结合使用，还真是又涨了点知识。</p>\n<p>&emsp;&emsp;举一个例子，一个DataFrame的size是[m,n]，我想对其进行groupby操作，然后返对每个分组内的上下两个row进行一些操作，最后返回一个和和原DataFrame大小一致的新df，最初我想到的一个方案是对组内每两行先打一个相同的tag，然后再结合window进行操作，不过这种方案比较麻烦，不直观，而且对每两行之间做一些复杂的运算可能也不是很友好。或者另一个场景，一个df，第一列是id，第二列是不同的品牌，想要统计某个id下各个品牌的数量(可以有重复)，这时一种常规的方案是对每个品牌进行映射到一个新的列，然后若这一行是品牌1，则打标记为1，其它为0，品牌2的列同理，这样处理起来略显麻烦，pandas就可以很简单的处理。</p>\n<p>&emsp;&emsp;再举一个例子，我想对df分组，计算组内分位数，但是我要求分位数必须是组内出现的数字，而不是插值之后的数字，并且还要对一些异常值进行判断。你可能会想到使用hivesql中的percentile来做，但是它返回的未必是组内的值，而且对异常值判断不是很方便。</p>\n<p>&emsp;&emsp;对于上面两个例子，单纯的使用spark和hivesql都不是最优雅的方案，这时候pandas就出现了，它可以很好地解决这两类问题。</p>","more":"<h2 id=\"一、环境介绍\"><a href=\"#一、环境介绍\" class=\"headerlink\" title=\"一、环境介绍\"></a>一、环境介绍</h2><p>&emsp;&emsp;简单介绍下我所应用的环境：首先是要安装pyarrow这个库，其次python版本不要高于3.7，最后spark环境，我之前使用的是2.4，一直报错，折腾了好久，后来发现是环境问题，切换到3.2就可以了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">spark:spark-3.2.0-bin-hadoop2.7<br>python:3.7<br>pyarrow:8.0.0<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、Spark与Pandas结合\"><a href=\"#二、Spark与Pandas结合\" class=\"headerlink\" title=\"二、Spark与Pandas结合\"></a>二、Spark与Pandas结合</h2><p>&emsp;&emsp;spark和pandas结合其实就是把一部分sparkdataframe，转换为pandas dataframe，然后可以比较方便的进行数值计算，就像写单机pandas操作一样。</p>\n<p>&emsp;&emsp;我们需要用到 <strong>pyspark.sql.functions import pandas_udf, PandasUDFType</strong>，这两个函数，顾名思义，pandas_udf就是用户自定义的pandas函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pandas_udf</span>(<span class=\"hljs-params\"></span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    f: PandasScalarToScalarFunction,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    returnType: <span class=\"hljs-type\">Union</span>[AtomicDataTypeOrString, ArrayType],</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    functionType: PandasScalarUDFType,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\"></span>) -&gt; UserDefinedFunctionLike:</span> ...<br><br></code></pre></td></tr></table></figure>\n<p>pandas_udf就三个参数：</p>\n<ul>\n<li><p>f：即用户自定义的func</p>\n</li>\n<li><p>returnType：自定义的func返回的值类型</p>\n</li>\n<li><p>functionType：枚举值，包含下面四种方式，表示的是我们的函数是按照什么样的方式进行映射，即返回值和输入是怎样的映射关系:</p>\n<p>SCALAR: PandasScalarUDFType          ：标量，即返回一个值<br>SCALAR_ITER: PandasScalarIterUDFType ：迭代器，这个还需要我探索一下<br>GROUPED_MAP: PandasGroupedMapUDFType ：分组映射，分组之后返回df，可以和原df大小一致，也可不一致，用户自己可以控制<br>GROUPED_AGG: PandasGroupedAggUDFType ：分组聚合，分组之后返回一个常量值</p>\n</li>\n</ul>\n<p>&emsp;<strong>&emsp;今天主要介绍一下GROUPED_MAP和GROUP_AGG的用法。</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>输入</th>\n<th>输出</th>\n<th>配合使用方式</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GROUPED_MAP</td>\n<td>Datafram</td>\n<td>Dataframe</td>\n<td>Apply</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GROUPED_AGG</td>\n<td>一列或多列</td>\n<td>常量</td>\n<td>agg</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"1、GROUPED-AGG\"><a href=\"#1、GROUPED-AGG\" class=\"headerlink\" title=\"1、GROUPED_AGG\"></a>1、GROUPED_AGG</h3><p>&emsp;&emsp;就拿上面那个计算组内分位数的例子来做，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> findspark<br>findspark.init(<span class=\"hljs-string\">&quot;/usr/local/spark-3.2.0-bin-hadoop2.7&quot;</span>)<br><br><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">from</span> pyspark.sql <span class=\"hljs-keyword\">import</span> SparkSession<br><span class=\"hljs-keyword\">from</span> pyspark.sql <span class=\"hljs-keyword\">import</span> functions <span class=\"hljs-keyword\">as</span> F<br><span class=\"hljs-keyword\">from</span> pyspark.sql <span class=\"hljs-keyword\">import</span> types <span class=\"hljs-keyword\">as</span> T<br><span class=\"hljs-keyword\">from</span> pyspark.sql.functions <span class=\"hljs-keyword\">import</span> pandas_udf, PandasUDFType<br><br><br>spark = SparkSession.builder.appName(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>).config(<span class=\"hljs-string\">&quot;spark.driver.host&quot;</span>, <span class=\"hljs-string\">&quot;xxx&quot;</span>).config(<span class=\"hljs-string\">&quot;spark.driver.bindAddress&quot;</span>, <span class=\"hljs-string\">&quot;xxxx&quot;</span>).getOrCreate()<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">M</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">self</span>):</span><br>        df = spark.createDataFrame(<br>            [(<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">2.2</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">3.16</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">2.168</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-string\">&quot;a1&quot;</span>, <span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">1.915</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">4</span>),<br>             (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">1.509</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-string\">&quot;a2&quot;</span>, <span class=\"hljs-number\">2.1</span>, <span class=\"hljs-number\">2</span>)],<br>            [<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-string\">&quot;max_wheel&quot;</span>, <span class=\"hljs-string\">&quot;cnt&quot;</span>])<br>        df.show()<br>        <span class=\"hljs-comment\"># 定义pandas_udf，输入函数、返回值类型，聚合类型</span><br>        mean_udf = F.pandas_udf(M.__t_agg, <span class=\"hljs-string\">&quot;string&quot;</span>, F.PandasUDFType.GROUPED_AGG)<br>        <span class=\"hljs-comment\"># 应用udf，注意是使用agg，传入两列</span><br>        df = df.groupBy([<span class=\"hljs-string\">&quot;id&quot;</span>]).agg(mean_udf(df[<span class=\"hljs-string\">&quot;max_wheel&quot;</span>], df[<span class=\"hljs-string\">&quot;cnt&quot;</span>]).alias(<span class=\"hljs-string\">&quot;res&quot;</span>))<br>        df.show()<br><br>        df = df.withColumn(<span class=\"hljs-string\">&quot;res&quot;</span>, F.split(df[<span class=\"hljs-string\">&quot;res&quot;</span>], <span class=\"hljs-string\">&quot;,&quot;</span>))<br>        df = df.withColumn(<span class=\"hljs-string\">&quot;r1&quot;</span>, df[<span class=\"hljs-string\">&quot;res&quot;</span>].getItem(<span class=\"hljs-number\">0</span>)).withColumn(<span class=\"hljs-string\">&quot;r2&quot;</span>, df[<span class=\"hljs-string\">&quot;res&quot;</span>].getItem(<span class=\"hljs-number\">1</span>))<br>        df.show()<br>        df.<span class=\"hljs-built_in\">filter</span>(df[<span class=\"hljs-string\">&quot;id&quot;</span>] == <span class=\"hljs-string\">&#x27;a1&#x27;</span>).show()<br><br>    <span class=\"hljs-comment\"># 定义具体的函数</span><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__t_agg</span>(<span class=\"hljs-params\">v1, v2</span>):</span><br>        df = pd.DataFrame(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">zip</span>(v1, v2)), columns=[<span class=\"hljs-string\">&quot;max_wheel&quot;</span>, <span class=\"hljs-string\">&quot;cnt&quot;</span>])  <span class=\"hljs-comment\"># 传入两列，转换为df</span><br>        a1 = <span class=\"hljs-built_in\">round</span>(df[<span class=\"hljs-string\">&quot;max_wheel&quot;</span>].quantile(q=<span class=\"hljs-number\">0.5</span>, interpolation=<span class=\"hljs-string\">&quot;lower&quot;</span>), <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\"># 不插值</span><br>        a2 = <span class=\"hljs-built_in\">round</span>(df[<span class=\"hljs-string\">&quot;cnt&quot;</span>].quantile(q=<span class=\"hljs-number\">0.5</span>, interpolation=<span class=\"hljs-string\">&quot;lower&quot;</span>), <span class=\"hljs-number\">2</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;,&quot;</span>.join([<span class=\"hljs-built_in\">str</span>(a1), <span class=\"hljs-built_in\">str</span>(a2)])<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    m = M()<br>    m.f()<br><br>--------------------------------------------------------------<br>输入<br>+---+---------+---+<br>| <span class=\"hljs-built_in\">id</span>|max_wheel|cnt|<br>+---+---------+---+<br>| a1|      <span class=\"hljs-number\">2.2</span>|  <span class=\"hljs-number\">5</span>|<br>| a1|     <span class=\"hljs-number\">3.16</span>|  <span class=\"hljs-number\">1</span>|<br>| a1|    <span class=\"hljs-number\">2.168</span>|  <span class=\"hljs-number\">3</span>|<br>| a1|      <span class=\"hljs-number\">2.5</span>|  <span class=\"hljs-number\">4</span>|<br>| a2|    <span class=\"hljs-number\">1.915</span>|  <span class=\"hljs-number\">2</span>|<br>| a2|      <span class=\"hljs-number\">2.0</span>|  <span class=\"hljs-number\">4</span>|<br>| a2|    <span class=\"hljs-number\">1.509</span>|  <span class=\"hljs-number\">1</span>|<br>| a2|      <span class=\"hljs-number\">2.1</span>|  <span class=\"hljs-number\">2</span>|<br>+---+---------+---+<br><br>--------------------------------------------------------------<br>输出<br>+---+---------+----+---+<br>| <span class=\"hljs-built_in\">id</span>|      res|  r1| r2|<br>+---+---------+----+---+<br>| a1| [<span class=\"hljs-number\">2.2</span>, <span class=\"hljs-number\">3</span>]| <span class=\"hljs-number\">2.2</span>|  <span class=\"hljs-number\">3</span>|<br>| a2|[<span class=\"hljs-number\">1.92</span>, <span class=\"hljs-number\">2</span>]|<span class=\"hljs-number\">1.92</span>|  <span class=\"hljs-number\">2</span>|<br>+---+---------+----+---+<br></code></pre></td></tr></table></figure>\n<h3 id=\"2、GROUPED-MAP\"><a href=\"#2、GROUPED-MAP\" class=\"headerlink\" title=\"2、GROUPED_MAP\"></a>2、GROUPED_MAP</h3><p>&emsp;&emsp;就拿上面计算每个id下不同品牌的数量的例子来看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">M</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span></span>):</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">self</span>):</span><br>        df = spark.createDataFrame(<br>            [(<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>),(<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a1&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>),<br>             (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>),(<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>), (<span class=\"hljs-string\">&#x27;a2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>)],<br>            [<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-string\">&quot;brand&quot;</span>])<br>        df.show()<br>        <span class=\"hljs-comment\"># 设置返回类型，包括返回的列名，每列值的类型</span><br>        schema = T.StructType()<br>        schema.add(T.StructField(<span class=\"hljs-string\">&quot;id&quot;</span>, T.StringType(), <span class=\"hljs-literal\">True</span>))<br>        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>]:<br>            schema.add(T.StructField(col, T.IntegerType(), <span class=\"hljs-literal\">True</span>))<br>        <span class=\"hljs-built_in\">print</span>(schema)<br>        <br>        <span class=\"hljs-comment\"># 构建pandas_udf</span><br>        cnt_udf = F.pandas_udf(M.__t_map, schema, F.PandasUDFType.GROUPED_MAP)<br>        <span class=\"hljs-comment\"># 引用udf，传入的相当于整个df，注意使用的是apply</span><br>        df1 = df.groupBy([<span class=\"hljs-string\">&quot;id&quot;</span>]).apply(cnt_udf)<br>        df1.show()<br><br><span class=\"hljs-meta\">    @staticmethod</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__t_map</span>(<span class=\"hljs-params\">df</span>):</span><br>        res = &#123;<span class=\"hljs-string\">&quot;id&quot;</span>: [], <span class=\"hljs-string\">&quot;a&quot;</span>: [],  <span class=\"hljs-string\">&quot;b&quot;</span>: [],  <span class=\"hljs-string\">&quot;c&quot;</span>: [],  <span class=\"hljs-string\">&quot;d&quot;</span>: []&#125;<br>        <span class=\"hljs-keyword\">for</span> index, row <span class=\"hljs-keyword\">in</span> df.iterrows():<br>            <span class=\"hljs-keyword\">if</span> index &gt; <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># 返回的df是groupby之后的，若没有此操作，则返回的df是和原df大小一致的</span><br>                <span class=\"hljs-keyword\">break</span><br>            res[<span class=\"hljs-string\">&quot;id&quot;</span>].append(row[<span class=\"hljs-string\">&quot;id&quot;</span>])<br><br>        res[<span class=\"hljs-string\">&quot;a&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;a&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br>        res[<span class=\"hljs-string\">&quot;b&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;b&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br>        res[<span class=\"hljs-string\">&quot;c&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;c&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br>        res[<span class=\"hljs-string\">&quot;d&quot;</span>].append(df[df[<span class=\"hljs-string\">&quot;brand&quot;</span>] == <span class=\"hljs-string\">&#x27;d&#x27;</span>].shape[<span class=\"hljs-number\">0</span>])<br><br>        res_df = pd.DataFrame(res)<br>        <span class=\"hljs-keyword\">return</span> res_df<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    m = M()<br>    <span class=\"hljs-comment\"># m.f()</span><br>    m.f1()<br>    <br>--------------------------------------------------------------<br>输入<br>+---+-----+<br>| <span class=\"hljs-built_in\">id</span>|brand|<br>+---+-----+<br>| a1|    a|<br>| a1|    b|<br>| a1|    c|<br>| a1|    a|<br>| a1|    d|<br>| a1|    a|<br>| a1|    d|<br>| a2|    c|<br>| a2|    b|<br>| a2|    c|<br>| a2|    b|<br>| a2|    d|<br>| a2|    a|<br>| a2|    c|<br>+---+-----+<br>--------------------------------------------------------------<br>输出<br>+---+---+---+---+---+<br>| <span class=\"hljs-built_in\">id</span>|  a|  b|  c|  d|<br>+---+---+---+---+---+<br>| a1|  <span class=\"hljs-number\">3</span>|  <span class=\"hljs-number\">1</span>|  <span class=\"hljs-number\">1</span>|  <span class=\"hljs-number\">2</span>|<br>| a2|  <span class=\"hljs-number\">1</span>|  <span class=\"hljs-number\">2</span>|  <span class=\"hljs-number\">3</span>|  <span class=\"hljs-number\">1</span>|<br>+---+---+---+---+---+<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>&emsp;&emsp;好了，这就是本篇文章对pyspark和pandas一起应用的一个例子，分别介绍了GROUP_AGG和GROUP_MAP两个场景，后续还需要再补充一个SCALAR_ITER的应用，希望能对您有用。</p>"},{"title":"XGBoost介绍","date":"2022-04-05T01:41:18.000Z","math":true,"_content":"\n#  一、简介\n\n&emsp;&emsp;XGBoost(eXtreme Gradient Boosting)又叫极度梯度提升树，是boosting算法的一种实现方式。针对分类或回归问题，效果非常好。在各种数据竞赛中大放异彩，而且在工业界也是应用广泛，主要是因为其效果优异，使用简单，速度快等优点。本文主要从以下几个方面介绍该算法模型：\n\n![](/images/xgb.png)\n\n# 二、基本原理\n\n&emsp;&emsp;xgb是boosting算法的一种实现方式，主要是降低偏差，也就是降低模型的误差。因此它是采用多个基学习器，每个基学习器都比较简单，避免过拟合，下一个学习器是学习前面基学习器的结果$y^{t}_{i}$和实际值$y_{i}$的差值，通过多个学习器的学习，不断降低模型值和实际值的差。\n$$y_{i}^{0} = 0$$\n$$y_{i}^{1} = f_{1}(x_{i}) = y_{i}^{0}+f_{1}(x_{i})$$\n$$$y_{i}^{2}=f_{1}(x_{i})+f_{2}(x_{i})=y_{i}^{1}+f_{2}(x_{i})$$\n$$y_{i}^{t}=\\sum_{k=1}^{t}f_{k}(x_{i})=y_{i}^{t-1}+f_{t}(x_{i})$$\n基本思路就是不断生成新的树，每棵树都是基于上一颗树和目标值的差值来进行学习，从而降低模型的偏差。最终模型结果的输出如下：$y_{i}=\\sum_{k=1}^{t}f_{k}(x_{i})$，即所有树的结果累加起来才是模型对一个样本的预测值。那在每一步如何选择/生成一个较优的树呢？那就是由我们的**目标函数**来决定。\n\n# 三、目标函数\n&emsp;&emsp;目标函数由两部分组成，一是模型误差，即样本真实值和预测值之间的差值，二是模型的结构误差，即正则项，用于限制模型的复杂度。\n$$Obj(\\theta)=L(\\theta)+\\Omega(\\theta)=L(y_{i},y_{i}^{t})+\\sum_{k=1}^{t}\\Omega(f_{k}(x_{i}))$$\n因为$y_{i}^{t}=y_{i}^{t-1}+f_{t}(x_{i})$，所以将其带入上面的公式中转换为：\n$Obj^{t}=\\sum_{n=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t})$，第t颗树的误差由三部分组成，n个样本在第t颗树的误差求和，以及第t颗树的结构误差和前t-1颗树的结构误差。其中前t-1颗树的结构误差是常数，因为我们已经知道前t-1颗树的结构了。\n&emsp;&emsp;**假设**我们的损失函数是平方损失函数(mse)，则上述目标函数转换为：\n$$Obj^{t}=\\sum_{i=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t}) \\\\ =\\sum_{i=1}^{n}(y_{i}-(y_{i}^{t-1}+f_{t}(x_{i})))^2+\\Omega(f_{t})+constant$$\n上述公式即为损失函数为mse时xgb第t步的目标函数。唯一的变量即为$f_{t}$，此处的损失函数仍然是一个相对复杂的表达式，所以为了简化它，采用二阶泰勒展开来近似表达，即$$f(x+\\Delta x)=f(x)+f^{'}(x)\\Delta x+1/2f^{''}(x)\\Delta x^2$$，所以另$g_{i}=\\partial _{y_{i}^{t-1}}l(y_{i},y_{i}^{t-1})$，$h_{i}=\\partial _{y_{i}^{t-1}} ^ 2 l(y_{i},y_{i}^{t-1})$，即分别是$l(y_{i},y_{i}^{t-1})$的一阶导和二阶导。则上述损失函数转换为二阶导之后，$$Obj^{t}=\\sum_{i=1}^{n}[l(y_{i},y_{i}^{t-1})+g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant$$，\n&emsp;&emsp;所以当损失函数是mse时，$g_{i}=2(y_{i}^{t-1}-y_{i})$，$h_{i}=2$。\n&emsp;&emsp;经过转换之后，其中第一项是所有样本与第t-1颗树的误差之和，因为第t-1颗树是已知的，所以可以将其视为常数项，我们暂时在目标函数中将其舍去，我们的目标函数变为关于$f_{t}(x)$的函数了。而$f_{t}(x)$则是关于叶子节点输出$w$的函数，所以我们的目标函数全部转换为关于$w$的函数，$$Obj^{t}=\\sum_{i=1}^{n}[g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant \\\\ =\\sum_{i=1}^{n}[g_{i}w_{q}(x_{i})+1/2h_{i}w_{q}^2(x_{i})]+\\gamma T+1/2\\lambda\\sum_{j=1}^{T}w_{j}^{2} \\\\ =\\sum_{j=1}^{T}[\\sum_{i \\in I_{j}}(g_{i})*w_{j}+1/2*\\sum_{i \\in I_{j}}(h_{i}+\\lambda)w_{j}^2]+\\gamma T$$。我们令$G_{j}=\\sum_{i \\in I_{j}}(g_{i})$，令$H_{j}=\\sum i \\in I_{j}(h_{i})$，则我们的目标函数转换为$$Obj^{t}=\\sum_{j=1}^{T}G_{j}*w_{j}+1/2(H_{j}+\\lambda)*w_{j}^{2}+\\lambda T$$。在上述表达式中，$j表示第j个节点$，$i表示第i个样本$。所以整个目标函数转换成了关于$w$即叶节点分数的一元二次函数，想要优化目标函数，就是求解最优的w，因此我们对目标求导，得到$$w^{*}=-G_{i}/(H_{i}+\\lambda)$$，将$w^{*}$代入目标函数中，则目标函数变为$$Obj^{t}=-1/2\\sum_{j=1}^{T}G_{j}^{2}/(H_{j}+\\lambda)+\\lambda T$$。如此简单，所以在求解二叉树的目标函数时，只要知道损失函数的一阶导、二阶导，以及样本落在哪个叶子节点上，我们只要求出在每个叶子节点上，该样本的一阶导和二阶导就能求出目标函数。也就能决定是否分裂该节点，依据哪个节点的特征值来进行分裂。\n\n## 三、节点分裂\n&emsp;&emsp; xgb节点是否分裂取决于信息增益的变化，若分裂当前节点，信息增益>0，则进行分裂，若不大于0则不分裂，如何判断分列前后信息增益的变化呢。那就可以使用我们的目标函数来表示了。\n$$Gain=G_{L}^{2}/(H_{L}+\\lambda)+G_{R}^{2}/(H_{R}+\\lambda)-(G_{L}+G_{R})^2/(H_{L}+H_{R}+\\lambda)+\\gamma$$\n&emsp;&emsp;节点分裂有两种方式：1、贪心算法，2、近似算法。\n\n### 3.1 贪心算法\n&emsp;&emsp;贪心算法分裂的方式就是一种暴力搜索的方式，遍历每一个特征，遍历该特征的每一个取值，计算分裂前后的增益，选择增益最大的特征取值作为分裂点。\n![贪心算法](/images/xgb1.png)\n分裂流程如上图所示。\n\n### 3.2 近似算法\n&emsp;&emsp; 近似算法，其实就是分桶，目的是为了提升计算速度，降低遍历的次数，所以对特征进行分桶。就是将每一个特征的取值按照分位数划分到不同的桶中，利用桶的边界值作为分裂节点的候选集，每次遍历时不再是遍历所有特征取值，而是仅遍历该特征的几个桶（每个桶可以理解为该特征取值的分位数）就可以，这样可以降低遍历特征取值的次数。\n\n![近似算法](/images/xgb2.png)\n\n&emsp;&emsp;分桶算法分为global模式和local模式，global模式就是在第一次划分桶之后，不再更新桶，一直使用划分完成的桶进行后续的分裂。这样做就是计算复杂度降低，但是经过多次划分之后，可能会存在一些桶是空的，即该桶中已经没有了数据。\n&emsp;&emsp;local模式就是在每次分列前都重新划分桶，优点是每次分桶都能保证各桶中的样本数量都是均匀的，不足的地方就是计算量大。\n\n\n\n## 四、其它特点\n### 4.1 缺失值处理\n&emsp;&emsp; 对于存在某一维特征缺失的样本，xgb会尝试将其放到左子树计算一次增益，再放到右子树计算一次增益，对比放在左右子树增益的大小决定放在哪个子树。\n\n### 4.2 防止过拟合\n\n&emsp;&emsp; xgb提出了两种防止过拟合的方法：第一种称为Shrinkage，即学习率，在每次迭代一棵树的时候对每个叶子结点的权重乘上一个缩减系数，使每棵树的影响不会过大，并且给后面的树留下更大的空间优化。另一个方法称为Column Subsampling，类似于随机森林选区部分特征值进行建树，其中又分为两个方式:方式一按层随机采样，在对同一层结点分裂前，随机选取部分特征值进行遍历，计算信息增益；方式二在建一棵树前随机采样部分特征值，然后这棵树的所有结点分裂都遍历这些特征值，计算信息增益。\n\n\n## 五、总结\n&emsp;&emsp;以上是对xgb的一些理解，大多是观看了很多大神的博客，通过不断的看别人总结的部分以及公式的推导，才让我逐渐理解xgb的各种特征。本文还是有很多不足的地方，后续逐渐补充，完善。\n","source":"_posts/XGBoost介绍.md","raw":"---\ntitle: XGBoost介绍\ndate: 2022-04-05 09:41:18\nmath: true\ncategories: 机器学习\ntags: 树模型\n---\n\n#  一、简介\n\n&emsp;&emsp;XGBoost(eXtreme Gradient Boosting)又叫极度梯度提升树，是boosting算法的一种实现方式。针对分类或回归问题，效果非常好。在各种数据竞赛中大放异彩，而且在工业界也是应用广泛，主要是因为其效果优异，使用简单，速度快等优点。本文主要从以下几个方面介绍该算法模型：\n\n![](/images/xgb.png)\n\n# 二、基本原理\n\n&emsp;&emsp;xgb是boosting算法的一种实现方式，主要是降低偏差，也就是降低模型的误差。因此它是采用多个基学习器，每个基学习器都比较简单，避免过拟合，下一个学习器是学习前面基学习器的结果$y^{t}_{i}$和实际值$y_{i}$的差值，通过多个学习器的学习，不断降低模型值和实际值的差。\n$$y_{i}^{0} = 0$$\n$$y_{i}^{1} = f_{1}(x_{i}) = y_{i}^{0}+f_{1}(x_{i})$$\n$$$y_{i}^{2}=f_{1}(x_{i})+f_{2}(x_{i})=y_{i}^{1}+f_{2}(x_{i})$$\n$$y_{i}^{t}=\\sum_{k=1}^{t}f_{k}(x_{i})=y_{i}^{t-1}+f_{t}(x_{i})$$\n基本思路就是不断生成新的树，每棵树都是基于上一颗树和目标值的差值来进行学习，从而降低模型的偏差。最终模型结果的输出如下：$y_{i}=\\sum_{k=1}^{t}f_{k}(x_{i})$，即所有树的结果累加起来才是模型对一个样本的预测值。那在每一步如何选择/生成一个较优的树呢？那就是由我们的**目标函数**来决定。\n\n# 三、目标函数\n&emsp;&emsp;目标函数由两部分组成，一是模型误差，即样本真实值和预测值之间的差值，二是模型的结构误差，即正则项，用于限制模型的复杂度。\n$$Obj(\\theta)=L(\\theta)+\\Omega(\\theta)=L(y_{i},y_{i}^{t})+\\sum_{k=1}^{t}\\Omega(f_{k}(x_{i}))$$\n因为$y_{i}^{t}=y_{i}^{t-1}+f_{t}(x_{i})$，所以将其带入上面的公式中转换为：\n$Obj^{t}=\\sum_{n=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t})$，第t颗树的误差由三部分组成，n个样本在第t颗树的误差求和，以及第t颗树的结构误差和前t-1颗树的结构误差。其中前t-1颗树的结构误差是常数，因为我们已经知道前t-1颗树的结构了。\n&emsp;&emsp;**假设**我们的损失函数是平方损失函数(mse)，则上述目标函数转换为：\n$$Obj^{t}=\\sum_{i=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t}) \\\\ =\\sum_{i=1}^{n}(y_{i}-(y_{i}^{t-1}+f_{t}(x_{i})))^2+\\Omega(f_{t})+constant$$\n上述公式即为损失函数为mse时xgb第t步的目标函数。唯一的变量即为$f_{t}$，此处的损失函数仍然是一个相对复杂的表达式，所以为了简化它，采用二阶泰勒展开来近似表达，即$$f(x+\\Delta x)=f(x)+f^{'}(x)\\Delta x+1/2f^{''}(x)\\Delta x^2$$，所以另$g_{i}=\\partial _{y_{i}^{t-1}}l(y_{i},y_{i}^{t-1})$，$h_{i}=\\partial _{y_{i}^{t-1}} ^ 2 l(y_{i},y_{i}^{t-1})$，即分别是$l(y_{i},y_{i}^{t-1})$的一阶导和二阶导。则上述损失函数转换为二阶导之后，$$Obj^{t}=\\sum_{i=1}^{n}[l(y_{i},y_{i}^{t-1})+g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant$$，\n&emsp;&emsp;所以当损失函数是mse时，$g_{i}=2(y_{i}^{t-1}-y_{i})$，$h_{i}=2$。\n&emsp;&emsp;经过转换之后，其中第一项是所有样本与第t-1颗树的误差之和，因为第t-1颗树是已知的，所以可以将其视为常数项，我们暂时在目标函数中将其舍去，我们的目标函数变为关于$f_{t}(x)$的函数了。而$f_{t}(x)$则是关于叶子节点输出$w$的函数，所以我们的目标函数全部转换为关于$w$的函数，$$Obj^{t}=\\sum_{i=1}^{n}[g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant \\\\ =\\sum_{i=1}^{n}[g_{i}w_{q}(x_{i})+1/2h_{i}w_{q}^2(x_{i})]+\\gamma T+1/2\\lambda\\sum_{j=1}^{T}w_{j}^{2} \\\\ =\\sum_{j=1}^{T}[\\sum_{i \\in I_{j}}(g_{i})*w_{j}+1/2*\\sum_{i \\in I_{j}}(h_{i}+\\lambda)w_{j}^2]+\\gamma T$$。我们令$G_{j}=\\sum_{i \\in I_{j}}(g_{i})$，令$H_{j}=\\sum i \\in I_{j}(h_{i})$，则我们的目标函数转换为$$Obj^{t}=\\sum_{j=1}^{T}G_{j}*w_{j}+1/2(H_{j}+\\lambda)*w_{j}^{2}+\\lambda T$$。在上述表达式中，$j表示第j个节点$，$i表示第i个样本$。所以整个目标函数转换成了关于$w$即叶节点分数的一元二次函数，想要优化目标函数，就是求解最优的w，因此我们对目标求导，得到$$w^{*}=-G_{i}/(H_{i}+\\lambda)$$，将$w^{*}$代入目标函数中，则目标函数变为$$Obj^{t}=-1/2\\sum_{j=1}^{T}G_{j}^{2}/(H_{j}+\\lambda)+\\lambda T$$。如此简单，所以在求解二叉树的目标函数时，只要知道损失函数的一阶导、二阶导，以及样本落在哪个叶子节点上，我们只要求出在每个叶子节点上，该样本的一阶导和二阶导就能求出目标函数。也就能决定是否分裂该节点，依据哪个节点的特征值来进行分裂。\n\n## 三、节点分裂\n&emsp;&emsp; xgb节点是否分裂取决于信息增益的变化，若分裂当前节点，信息增益>0，则进行分裂，若不大于0则不分裂，如何判断分列前后信息增益的变化呢。那就可以使用我们的目标函数来表示了。\n$$Gain=G_{L}^{2}/(H_{L}+\\lambda)+G_{R}^{2}/(H_{R}+\\lambda)-(G_{L}+G_{R})^2/(H_{L}+H_{R}+\\lambda)+\\gamma$$\n&emsp;&emsp;节点分裂有两种方式：1、贪心算法，2、近似算法。\n\n### 3.1 贪心算法\n&emsp;&emsp;贪心算法分裂的方式就是一种暴力搜索的方式，遍历每一个特征，遍历该特征的每一个取值，计算分裂前后的增益，选择增益最大的特征取值作为分裂点。\n![贪心算法](/images/xgb1.png)\n分裂流程如上图所示。\n\n### 3.2 近似算法\n&emsp;&emsp; 近似算法，其实就是分桶，目的是为了提升计算速度，降低遍历的次数，所以对特征进行分桶。就是将每一个特征的取值按照分位数划分到不同的桶中，利用桶的边界值作为分裂节点的候选集，每次遍历时不再是遍历所有特征取值，而是仅遍历该特征的几个桶（每个桶可以理解为该特征取值的分位数）就可以，这样可以降低遍历特征取值的次数。\n\n![近似算法](/images/xgb2.png)\n\n&emsp;&emsp;分桶算法分为global模式和local模式，global模式就是在第一次划分桶之后，不再更新桶，一直使用划分完成的桶进行后续的分裂。这样做就是计算复杂度降低，但是经过多次划分之后，可能会存在一些桶是空的，即该桶中已经没有了数据。\n&emsp;&emsp;local模式就是在每次分列前都重新划分桶，优点是每次分桶都能保证各桶中的样本数量都是均匀的，不足的地方就是计算量大。\n\n\n\n## 四、其它特点\n### 4.1 缺失值处理\n&emsp;&emsp; 对于存在某一维特征缺失的样本，xgb会尝试将其放到左子树计算一次增益，再放到右子树计算一次增益，对比放在左右子树增益的大小决定放在哪个子树。\n\n### 4.2 防止过拟合\n\n&emsp;&emsp; xgb提出了两种防止过拟合的方法：第一种称为Shrinkage，即学习率，在每次迭代一棵树的时候对每个叶子结点的权重乘上一个缩减系数，使每棵树的影响不会过大，并且给后面的树留下更大的空间优化。另一个方法称为Column Subsampling，类似于随机森林选区部分特征值进行建树，其中又分为两个方式:方式一按层随机采样，在对同一层结点分裂前，随机选取部分特征值进行遍历，计算信息增益；方式二在建一棵树前随机采样部分特征值，然后这棵树的所有结点分裂都遍历这些特征值，计算信息增益。\n\n\n## 五、总结\n&emsp;&emsp;以上是对xgb的一些理解，大多是观看了很多大神的博客，通过不断的看别人总结的部分以及公式的推导，才让我逐渐理解xgb的各种特征。本文还是有很多不足的地方，后续逐渐补充，完善。\n","slug":"XGBoost介绍","published":1,"updated":"2022-06-26T10:45:11.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrt000jj4h2550zdjrm","content":"<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><p>&emsp;&emsp;XGBoost(eXtreme Gradient Boosting)又叫极度梯度提升树，是boosting算法的一种实现方式。针对分类或回归问题，效果非常好。在各种数据竞赛中大放异彩，而且在工业界也是应用广泛，主要是因为其效果优异，使用简单，速度快等优点。本文主要从以下几个方面介绍该算法模型：</p>\n<p><img src=\"/images/xgb.png\" alt=\"\"></p>\n<h1 id=\"二、基本原理\"><a href=\"#二、基本原理\" class=\"headerlink\" title=\"二、基本原理\"></a>二、基本原理</h1><p>&emsp;&emsp;xgb是boosting算法的一种实现方式，主要是降低偏差，也就是降低模型的误差。因此它是采用多个基学习器，每个基学习器都比较简单，避免过拟合，下一个学习器是学习前面基学习器的结果$y^{t}_{i}$和实际值$y_{i}$的差值，通过多个学习器的学习，不断降低模型值和实际值的差。</p>\n<script type=\"math/tex; mode=display\">y_{i}^{0} = 0</script><script type=\"math/tex; mode=display\">y_{i}^{1} = f_{1}(x_{i}) = y_{i}^{0}+f_{1}(x_{i})</script><script type=\"math/tex; mode=display\">$y_{i}^{2}=f_{1}(x_{i})+f_{2}(x_{i})=y_{i}^{1}+f_{2}(x_{i})</script><script type=\"math/tex; mode=display\">y_{i}^{t}=\\sum_{k=1}^{t}f_{k}(x_{i})=y_{i}^{t-1}+f_{t}(x_{i})</script><p>基本思路就是不断生成新的树，每棵树都是基于上一颗树和目标值的差值来进行学习，从而降低模型的偏差。最终模型结果的输出如下：$y_{i}=\\sum_{k=1}^{t}f_{k}(x_{i})$，即所有树的结果累加起来才是模型对一个样本的预测值。那在每一步如何选择/生成一个较优的树呢？那就是由我们的<strong>目标函数</strong>来决定。</p>\n<h1 id=\"三、目标函数\"><a href=\"#三、目标函数\" class=\"headerlink\" title=\"三、目标函数\"></a>三、目标函数</h1><p>&emsp;&emsp;目标函数由两部分组成，一是模型误差，即样本真实值和预测值之间的差值，二是模型的结构误差，即正则项，用于限制模型的复杂度。</p>\n<script type=\"math/tex; mode=display\">Obj(\\theta)=L(\\theta)+\\Omega(\\theta)=L(y_{i},y_{i}^{t})+\\sum_{k=1}^{t}\\Omega(f_{k}(x_{i}))</script><p>因为$y_{i}^{t}=y_{i}^{t-1}+f_{t}(x_{i})$，所以将其带入上面的公式中转换为：<br>$Obj^{t}=\\sum_{n=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t})$，第t颗树的误差由三部分组成，n个样本在第t颗树的误差求和，以及第t颗树的结构误差和前t-1颗树的结构误差。其中前t-1颗树的结构误差是常数，因为我们已经知道前t-1颗树的结构了。<br>&emsp;&emsp;<strong>假设</strong>我们的损失函数是平方损失函数(mse)，则上述目标函数转换为：</p>\n<script type=\"math/tex; mode=display\">Obj^{t}=\\sum_{i=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t}) \\\\ =\\sum_{i=1}^{n}(y_{i}-(y_{i}^{t-1}+f_{t}(x_{i})))^2+\\Omega(f_{t})+constant</script><p>上述公式即为损失函数为mse时xgb第t步的目标函数。唯一的变量即为$f_{t}$，此处的损失函数仍然是一个相对复杂的表达式，所以为了简化它，采用二阶泰勒展开来近似表达，即<script type=\"math/tex\">f(x+\\Delta x)=f(x)+f^{'}(x)\\Delta x+1/2f^{''}(x)\\Delta x^2</script>，所以另$g_{i}=\\partial _{y_{i}^{t-1}}l(y_{i},y_{i}^{t-1})$，$h_{i}=\\partial _{y_{i}^{t-1}} ^ 2 l(y_{i},y_{i}^{t-1})$，即分别是$l(y_{i},y_{i}^{t-1})$的一阶导和二阶导。则上述损失函数转换为二阶导之后，<script type=\"math/tex\">Obj^{t}=\\sum_{i=1}^{n}[l(y_{i},y_{i}^{t-1})+g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant</script>，<br>&emsp;&emsp;所以当损失函数是mse时，$g_{i}=2(y_{i}^{t-1}-y_{i})$，$h_{i}=2$。<br>&emsp;&emsp;经过转换之后，其中第一项是所有样本与第t-1颗树的误差之和，因为第t-1颗树是已知的，所以可以将其视为常数项，我们暂时在目标函数中将其舍去，我们的目标函数变为关于$f_{t}(x)$的函数了。而$f_{t}(x)$则是关于叶子节点输出$w$的函数，所以我们的目标函数全部转换为关于$w$的函数，<script type=\"math/tex\">Obj^{t}=\\sum_{i=1}^{n}[g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant \\\\ =\\sum_{i=1}^{n}[g_{i}w_{q}(x_{i})+1/2h_{i}w_{q}^2(x_{i})]+\\gamma T+1/2\\lambda\\sum_{j=1}^{T}w_{j}^{2} \\\\ =\\sum_{j=1}^{T}[\\sum_{i \\in I_{j}}(g_{i})*w_{j}+1/2*\\sum_{i \\in I_{j}}(h_{i}+\\lambda)w_{j}^2]+\\gamma T</script>。我们令$G_{j}=\\sum_{i \\in I_{j}}(g_{i})$，令$H_{j}=\\sum i \\in I_{j}(h_{i})$，则我们的目标函数转换为<script type=\"math/tex\">Obj^{t}=\\sum_{j=1}^{T}G_{j}*w_{j}+1/2(H_{j}+\\lambda)*w_{j}^{2}+\\lambda T</script>。在上述表达式中，$j表示第j个节点$，$i表示第i个样本$。所以整个目标函数转换成了关于$w$即叶节点分数的一元二次函数，想要优化目标函数，就是求解最优的w，因此我们对目标求导，得到<script type=\"math/tex\">w^{*}=-G_{i}/(H_{i}+\\lambda)</script>，将$w^{*}$代入目标函数中，则目标函数变为<script type=\"math/tex\">Obj^{t}=-1/2\\sum_{j=1}^{T}G_{j}^{2}/(H_{j}+\\lambda)+\\lambda T</script>。如此简单，所以在求解二叉树的目标函数时，只要知道损失函数的一阶导、二阶导，以及样本落在哪个叶子节点上，我们只要求出在每个叶子节点上，该样本的一阶导和二阶导就能求出目标函数。也就能决定是否分裂该节点，依据哪个节点的特征值来进行分裂。</p>\n<h2 id=\"三、节点分裂\"><a href=\"#三、节点分裂\" class=\"headerlink\" title=\"三、节点分裂\"></a>三、节点分裂</h2><p>&emsp;&emsp; xgb节点是否分裂取决于信息增益的变化，若分裂当前节点，信息增益&gt;0，则进行分裂，若不大于0则不分裂，如何判断分列前后信息增益的变化呢。那就可以使用我们的目标函数来表示了。</p>\n<script type=\"math/tex; mode=display\">Gain=G_{L}^{2}/(H_{L}+\\lambda)+G_{R}^{2}/(H_{R}+\\lambda)-(G_{L}+G_{R})^2/(H_{L}+H_{R}+\\lambda)+\\gamma</script><p>&emsp;&emsp;节点分裂有两种方式：1、贪心算法，2、近似算法。</p>\n<h3 id=\"3-1-贪心算法\"><a href=\"#3-1-贪心算法\" class=\"headerlink\" title=\"3.1 贪心算法\"></a>3.1 贪心算法</h3><p>&emsp;&emsp;贪心算法分裂的方式就是一种暴力搜索的方式，遍历每一个特征，遍历该特征的每一个取值，计算分裂前后的增益，选择增益最大的特征取值作为分裂点。<br><img src=\"/images/xgb1.png\" alt=\"贪心算法\"><br>分裂流程如上图所示。</p>\n<h3 id=\"3-2-近似算法\"><a href=\"#3-2-近似算法\" class=\"headerlink\" title=\"3.2 近似算法\"></a>3.2 近似算法</h3><p>&emsp;&emsp; 近似算法，其实就是分桶，目的是为了提升计算速度，降低遍历的次数，所以对特征进行分桶。就是将每一个特征的取值按照分位数划分到不同的桶中，利用桶的边界值作为分裂节点的候选集，每次遍历时不再是遍历所有特征取值，而是仅遍历该特征的几个桶（每个桶可以理解为该特征取值的分位数）就可以，这样可以降低遍历特征取值的次数。</p>\n<p><img src=\"/images/xgb2.png\" alt=\"近似算法\"></p>\n<p>&emsp;&emsp;分桶算法分为global模式和local模式，global模式就是在第一次划分桶之后，不再更新桶，一直使用划分完成的桶进行后续的分裂。这样做就是计算复杂度降低，但是经过多次划分之后，可能会存在一些桶是空的，即该桶中已经没有了数据。<br>&emsp;&emsp;local模式就是在每次分列前都重新划分桶，优点是每次分桶都能保证各桶中的样本数量都是均匀的，不足的地方就是计算量大。</p>\n<h2 id=\"四、其它特点\"><a href=\"#四、其它特点\" class=\"headerlink\" title=\"四、其它特点\"></a>四、其它特点</h2><h3 id=\"4-1-缺失值处理\"><a href=\"#4-1-缺失值处理\" class=\"headerlink\" title=\"4.1 缺失值处理\"></a>4.1 缺失值处理</h3><p>&emsp;&emsp; 对于存在某一维特征缺失的样本，xgb会尝试将其放到左子树计算一次增益，再放到右子树计算一次增益，对比放在左右子树增益的大小决定放在哪个子树。</p>\n<h3 id=\"4-2-防止过拟合\"><a href=\"#4-2-防止过拟合\" class=\"headerlink\" title=\"4.2 防止过拟合\"></a>4.2 防止过拟合</h3><p>&emsp;&emsp; xgb提出了两种防止过拟合的方法：第一种称为Shrinkage，即学习率，在每次迭代一棵树的时候对每个叶子结点的权重乘上一个缩减系数，使每棵树的影响不会过大，并且给后面的树留下更大的空间优化。另一个方法称为Column Subsampling，类似于随机森林选区部分特征值进行建树，其中又分为两个方式:方式一按层随机采样，在对同一层结点分裂前，随机选取部分特征值进行遍历，计算信息增益；方式二在建一棵树前随机采样部分特征值，然后这棵树的所有结点分裂都遍历这些特征值，计算信息增益。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>&emsp;&emsp;以上是对xgb的一些理解，大多是观看了很多大神的博客，通过不断的看别人总结的部分以及公式的推导，才让我逐渐理解xgb的各种特征。本文还是有很多不足的地方，后续逐渐补充，完善。</p>\n","site":{"data":{}},"wordcount":3831,"excerpt":"","more":"<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><p>&emsp;&emsp;XGBoost(eXtreme Gradient Boosting)又叫极度梯度提升树，是boosting算法的一种实现方式。针对分类或回归问题，效果非常好。在各种数据竞赛中大放异彩，而且在工业界也是应用广泛，主要是因为其效果优异，使用简单，速度快等优点。本文主要从以下几个方面介绍该算法模型：</p>\n<p><img src=\"/images/xgb.png\" alt=\"\"></p>\n<h1 id=\"二、基本原理\"><a href=\"#二、基本原理\" class=\"headerlink\" title=\"二、基本原理\"></a>二、基本原理</h1><p>&emsp;&emsp;xgb是boosting算法的一种实现方式，主要是降低偏差，也就是降低模型的误差。因此它是采用多个基学习器，每个基学习器都比较简单，避免过拟合，下一个学习器是学习前面基学习器的结果$y^{t}_{i}$和实际值$y_{i}$的差值，通过多个学习器的学习，不断降低模型值和实际值的差。</p>\n<script type=\"math/tex; mode=display\">y_{i}^{0} = 0</script><script type=\"math/tex; mode=display\">y_{i}^{1} = f_{1}(x_{i}) = y_{i}^{0}+f_{1}(x_{i})</script><script type=\"math/tex; mode=display\">$y_{i}^{2}=f_{1}(x_{i})+f_{2}(x_{i})=y_{i}^{1}+f_{2}(x_{i})</script><script type=\"math/tex; mode=display\">y_{i}^{t}=\\sum_{k=1}^{t}f_{k}(x_{i})=y_{i}^{t-1}+f_{t}(x_{i})</script><p>基本思路就是不断生成新的树，每棵树都是基于上一颗树和目标值的差值来进行学习，从而降低模型的偏差。最终模型结果的输出如下：$y_{i}=\\sum_{k=1}^{t}f_{k}(x_{i})$，即所有树的结果累加起来才是模型对一个样本的预测值。那在每一步如何选择/生成一个较优的树呢？那就是由我们的<strong>目标函数</strong>来决定。</p>\n<h1 id=\"三、目标函数\"><a href=\"#三、目标函数\" class=\"headerlink\" title=\"三、目标函数\"></a>三、目标函数</h1><p>&emsp;&emsp;目标函数由两部分组成，一是模型误差，即样本真实值和预测值之间的差值，二是模型的结构误差，即正则项，用于限制模型的复杂度。</p>\n<script type=\"math/tex; mode=display\">Obj(\\theta)=L(\\theta)+\\Omega(\\theta)=L(y_{i},y_{i}^{t})+\\sum_{k=1}^{t}\\Omega(f_{k}(x_{i}))</script><p>因为$y_{i}^{t}=y_{i}^{t-1}+f_{t}(x_{i})$，所以将其带入上面的公式中转换为：<br>$Obj^{t}=\\sum_{n=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t})$，第t颗树的误差由三部分组成，n个样本在第t颗树的误差求和，以及第t颗树的结构误差和前t-1颗树的结构误差。其中前t-1颗树的结构误差是常数，因为我们已经知道前t-1颗树的结构了。<br>&emsp;&emsp;<strong>假设</strong>我们的损失函数是平方损失函数(mse)，则上述目标函数转换为：</p>\n<script type=\"math/tex; mode=display\">Obj^{t}=\\sum_{i=1}^{n}L(y_{i},y_{i}^{t-1}+f_{t}(x_{i}))+\\Omega(f_{t})+\\sum_{t=1}^{T-1}\\Omega(f_{t}) \\\\ =\\sum_{i=1}^{n}(y_{i}-(y_{i}^{t-1}+f_{t}(x_{i})))^2+\\Omega(f_{t})+constant</script><p>上述公式即为损失函数为mse时xgb第t步的目标函数。唯一的变量即为$f_{t}$，此处的损失函数仍然是一个相对复杂的表达式，所以为了简化它，采用二阶泰勒展开来近似表达，即<script type=\"math/tex\">f(x+\\Delta x)=f(x)+f^{'}(x)\\Delta x+1/2f^{''}(x)\\Delta x^2</script>，所以另$g_{i}=\\partial _{y_{i}^{t-1}}l(y_{i},y_{i}^{t-1})$，$h_{i}=\\partial _{y_{i}^{t-1}} ^ 2 l(y_{i},y_{i}^{t-1})$，即分别是$l(y_{i},y_{i}^{t-1})$的一阶导和二阶导。则上述损失函数转换为二阶导之后，<script type=\"math/tex\">Obj^{t}=\\sum_{i=1}^{n}[l(y_{i},y_{i}^{t-1})+g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant</script>，<br>&emsp;&emsp;所以当损失函数是mse时，$g_{i}=2(y_{i}^{t-1}-y_{i})$，$h_{i}=2$。<br>&emsp;&emsp;经过转换之后，其中第一项是所有样本与第t-1颗树的误差之和，因为第t-1颗树是已知的，所以可以将其视为常数项，我们暂时在目标函数中将其舍去，我们的目标函数变为关于$f_{t}(x)$的函数了。而$f_{t}(x)$则是关于叶子节点输出$w$的函数，所以我们的目标函数全部转换为关于$w$的函数，<script type=\"math/tex\">Obj^{t}=\\sum_{i=1}^{n}[g_{i} f_{t}(x_{})+1/2h_{i} f_{t}^2(x)]+\\Omega(f_{t})+constant \\\\ =\\sum_{i=1}^{n}[g_{i}w_{q}(x_{i})+1/2h_{i}w_{q}^2(x_{i})]+\\gamma T+1/2\\lambda\\sum_{j=1}^{T}w_{j}^{2} \\\\ =\\sum_{j=1}^{T}[\\sum_{i \\in I_{j}}(g_{i})*w_{j}+1/2*\\sum_{i \\in I_{j}}(h_{i}+\\lambda)w_{j}^2]+\\gamma T</script>。我们令$G_{j}=\\sum_{i \\in I_{j}}(g_{i})$，令$H_{j}=\\sum i \\in I_{j}(h_{i})$，则我们的目标函数转换为<script type=\"math/tex\">Obj^{t}=\\sum_{j=1}^{T}G_{j}*w_{j}+1/2(H_{j}+\\lambda)*w_{j}^{2}+\\lambda T</script>。在上述表达式中，$j表示第j个节点$，$i表示第i个样本$。所以整个目标函数转换成了关于$w$即叶节点分数的一元二次函数，想要优化目标函数，就是求解最优的w，因此我们对目标求导，得到<script type=\"math/tex\">w^{*}=-G_{i}/(H_{i}+\\lambda)</script>，将$w^{*}$代入目标函数中，则目标函数变为<script type=\"math/tex\">Obj^{t}=-1/2\\sum_{j=1}^{T}G_{j}^{2}/(H_{j}+\\lambda)+\\lambda T</script>。如此简单，所以在求解二叉树的目标函数时，只要知道损失函数的一阶导、二阶导，以及样本落在哪个叶子节点上，我们只要求出在每个叶子节点上，该样本的一阶导和二阶导就能求出目标函数。也就能决定是否分裂该节点，依据哪个节点的特征值来进行分裂。</p>\n<h2 id=\"三、节点分裂\"><a href=\"#三、节点分裂\" class=\"headerlink\" title=\"三、节点分裂\"></a>三、节点分裂</h2><p>&emsp;&emsp; xgb节点是否分裂取决于信息增益的变化，若分裂当前节点，信息增益&gt;0，则进行分裂，若不大于0则不分裂，如何判断分列前后信息增益的变化呢。那就可以使用我们的目标函数来表示了。</p>\n<script type=\"math/tex; mode=display\">Gain=G_{L}^{2}/(H_{L}+\\lambda)+G_{R}^{2}/(H_{R}+\\lambda)-(G_{L}+G_{R})^2/(H_{L}+H_{R}+\\lambda)+\\gamma</script><p>&emsp;&emsp;节点分裂有两种方式：1、贪心算法，2、近似算法。</p>\n<h3 id=\"3-1-贪心算法\"><a href=\"#3-1-贪心算法\" class=\"headerlink\" title=\"3.1 贪心算法\"></a>3.1 贪心算法</h3><p>&emsp;&emsp;贪心算法分裂的方式就是一种暴力搜索的方式，遍历每一个特征，遍历该特征的每一个取值，计算分裂前后的增益，选择增益最大的特征取值作为分裂点。<br><img src=\"/images/xgb1.png\" alt=\"贪心算法\"><br>分裂流程如上图所示。</p>\n<h3 id=\"3-2-近似算法\"><a href=\"#3-2-近似算法\" class=\"headerlink\" title=\"3.2 近似算法\"></a>3.2 近似算法</h3><p>&emsp;&emsp; 近似算法，其实就是分桶，目的是为了提升计算速度，降低遍历的次数，所以对特征进行分桶。就是将每一个特征的取值按照分位数划分到不同的桶中，利用桶的边界值作为分裂节点的候选集，每次遍历时不再是遍历所有特征取值，而是仅遍历该特征的几个桶（每个桶可以理解为该特征取值的分位数）就可以，这样可以降低遍历特征取值的次数。</p>\n<p><img src=\"/images/xgb2.png\" alt=\"近似算法\"></p>\n<p>&emsp;&emsp;分桶算法分为global模式和local模式，global模式就是在第一次划分桶之后，不再更新桶，一直使用划分完成的桶进行后续的分裂。这样做就是计算复杂度降低，但是经过多次划分之后，可能会存在一些桶是空的，即该桶中已经没有了数据。<br>&emsp;&emsp;local模式就是在每次分列前都重新划分桶，优点是每次分桶都能保证各桶中的样本数量都是均匀的，不足的地方就是计算量大。</p>\n<h2 id=\"四、其它特点\"><a href=\"#四、其它特点\" class=\"headerlink\" title=\"四、其它特点\"></a>四、其它特点</h2><h3 id=\"4-1-缺失值处理\"><a href=\"#4-1-缺失值处理\" class=\"headerlink\" title=\"4.1 缺失值处理\"></a>4.1 缺失值处理</h3><p>&emsp;&emsp; 对于存在某一维特征缺失的样本，xgb会尝试将其放到左子树计算一次增益，再放到右子树计算一次增益，对比放在左右子树增益的大小决定放在哪个子树。</p>\n<h3 id=\"4-2-防止过拟合\"><a href=\"#4-2-防止过拟合\" class=\"headerlink\" title=\"4.2 防止过拟合\"></a>4.2 防止过拟合</h3><p>&emsp;&emsp; xgb提出了两种防止过拟合的方法：第一种称为Shrinkage，即学习率，在每次迭代一棵树的时候对每个叶子结点的权重乘上一个缩减系数，使每棵树的影响不会过大，并且给后面的树留下更大的空间优化。另一个方法称为Column Subsampling，类似于随机森林选区部分特征值进行建树，其中又分为两个方式:方式一按层随机采样，在对同一层结点分裂前，随机选取部分特征值进行遍历，计算信息增益；方式二在建一棵树前随机采样部分特征值，然后这棵树的所有结点分裂都遍历这些特征值，计算信息增益。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>&emsp;&emsp;以上是对xgb的一些理解，大多是观看了很多大神的博客，通过不断的看别人总结的部分以及公式的推导，才让我逐渐理解xgb的各种特征。本文还是有很多不足的地方，后续逐渐补充，完善。</p>\n"},{"title":"dijkstra算法","mathjax":true,"date":"2020-07-05T08:07:53.000Z","_content":"\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","source":"_posts/dijkstra算法.md","raw":"---\ntitle: dijkstra算法\nmathjax: true\ndate: 2020-07-05 16:07:53\ncategories: 算法\ntags: dijkstra\n---\n\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","slug":"dijkstra算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrv000nj4h2b9hr7bpx","content":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>\n<span id=\"more\"></span>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span><br><br><span class=\"hljs-keyword\">const</span>(<br>\tMaxDis  <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">7</span><span class=\"hljs-number\">-1</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Dijkstra <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttPints  []<span class=\"hljs-keyword\">string</span><br>\ttTwoPointDis <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tPoints []<span class=\"hljs-keyword\">string</span>, tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(tPoints) != <span class=\"hljs-built_in\">len</span>(tDis) &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;点数与矩阵的大小不一致&quot;</span>)<br>\t&#125;<br>\td.tTwoPointDis = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(tPoints); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(tPoints); j++ &#123;<br>\t\t\tkey := tPoints[i] + <span class=\"hljs-string\">&quot;_&quot;</span> + tPoints[j]<br>\t\t\td.tTwoPointDis[key] = tDis[i][j]<br>\t\t&#125;<br>\t&#125;<br>\td.tPints = tPoints<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttPoints := d.tPints[<span class=\"hljs-number\">1</span>:]                  <span class=\"hljs-comment\">// 未访问过的点</span><br>\tvisited := []<span class=\"hljs-keyword\">string</span>&#123;d.tPints[<span class=\"hljs-number\">0</span>]&#125;         <span class=\"hljs-comment\">// 访问过的点</span><br>\tsrc := d.tPints[<span class=\"hljs-number\">0</span>]                       <span class=\"hljs-comment\">// 起点</span><br>\tpre, next := src, src<br><br>\tpath := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>][]<span class=\"hljs-keyword\">string</span>, <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 起点到其它点的路径</span><br>\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + src] = []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>&#125;<br><br>\tdistanceGraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// 起点到其它点的距离</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(tPoints) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tdistance := MaxDis<br>\t\t<span class=\"hljs-keyword\">var</span> ind <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">var</span> dst <span class=\"hljs-keyword\">string</span><br><br>\t\t<span class=\"hljs-keyword\">var</span> nextInd <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> visited &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> ind, dst = <span class=\"hljs-keyword\">range</span> tPoints &#123;<br>\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + v] + d.tTwoPointDis[v + <span class=\"hljs-string\">&quot;_&quot;</span> + dst]  <span class=\"hljs-comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> newDis &lt; distance &#123;<br>\t\t\t\t\tdistance = newDis<br>\t\t\t\t\tpre = v<br>\t\t\t\t\tnext = dst<br>\t\t\t\t\tnextInd = ind<br>\t\t\t\t\td.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + dst] = distance<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, tPoint := <span class=\"hljs-keyword\">range</span> path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + pre] &#123;<br>\t\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], tPoint)<br>\t\t&#125;<br>\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], next)  <span class=\"hljs-comment\">// 记录从src到next需经过的路径</span><br><br>\t\tdistanceGraph[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = distance                     <span class=\"hljs-comment\">// 记录从src到next的距离</span><br><br>\t\tvisited = <span class=\"hljs-built_in\">append</span>(visited, next)<br>\t\ttPoints = <span class=\"hljs-built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"hljs-number\">1</span>:]...)<br>\t&#125;<br><br>\tfmt.Println(path)<br>\tfmt.Println(distanceGraph)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\td := <span class=\"hljs-built_in\">new</span>(Dijkstra)<br>\ttPoints := []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>&#125;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>,      <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\td.Init(tPoints, tDis)<br>\td.dijkstra()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>\n","site":{"data":{}},"wordcount":2835,"excerpt":"<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h2><p>&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>","more":"<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span><br><br><span class=\"hljs-keyword\">const</span>(<br>\tMaxDis  <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">7</span><span class=\"hljs-number\">-1</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Dijkstra <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttPints  []<span class=\"hljs-keyword\">string</span><br>\ttTwoPointDis <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tPoints []<span class=\"hljs-keyword\">string</span>, tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(tPoints) != <span class=\"hljs-built_in\">len</span>(tDis) &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;点数与矩阵的大小不一致&quot;</span>)<br>\t&#125;<br>\td.tTwoPointDis = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(tPoints); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(tPoints); j++ &#123;<br>\t\t\tkey := tPoints[i] + <span class=\"hljs-string\">&quot;_&quot;</span> + tPoints[j]<br>\t\t\td.tTwoPointDis[key] = tDis[i][j]<br>\t\t&#125;<br>\t&#125;<br>\td.tPints = tPoints<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttPoints := d.tPints[<span class=\"hljs-number\">1</span>:]                  <span class=\"hljs-comment\">// 未访问过的点</span><br>\tvisited := []<span class=\"hljs-keyword\">string</span>&#123;d.tPints[<span class=\"hljs-number\">0</span>]&#125;         <span class=\"hljs-comment\">// 访问过的点</span><br>\tsrc := d.tPints[<span class=\"hljs-number\">0</span>]                       <span class=\"hljs-comment\">// 起点</span><br>\tpre, next := src, src<br><br>\tpath := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>][]<span class=\"hljs-keyword\">string</span>, <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 起点到其它点的路径</span><br>\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + src] = []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>&#125;<br><br>\tdistanceGraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// 起点到其它点的距离</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(tPoints) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tdistance := MaxDis<br>\t\t<span class=\"hljs-keyword\">var</span> ind <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">var</span> dst <span class=\"hljs-keyword\">string</span><br><br>\t\t<span class=\"hljs-keyword\">var</span> nextInd <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> visited &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> ind, dst = <span class=\"hljs-keyword\">range</span> tPoints &#123;<br>\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + v] + d.tTwoPointDis[v + <span class=\"hljs-string\">&quot;_&quot;</span> + dst]  <span class=\"hljs-comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> newDis &lt; distance &#123;<br>\t\t\t\t\tdistance = newDis<br>\t\t\t\t\tpre = v<br>\t\t\t\t\tnext = dst<br>\t\t\t\t\tnextInd = ind<br>\t\t\t\t\td.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + dst] = distance<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, tPoint := <span class=\"hljs-keyword\">range</span> path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + pre] &#123;<br>\t\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], tPoint)<br>\t\t&#125;<br>\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], next)  <span class=\"hljs-comment\">// 记录从src到next需经过的路径</span><br><br>\t\tdistanceGraph[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = distance                     <span class=\"hljs-comment\">// 记录从src到next的距离</span><br><br>\t\tvisited = <span class=\"hljs-built_in\">append</span>(visited, next)<br>\t\ttPoints = <span class=\"hljs-built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"hljs-number\">1</span>:]...)<br>\t&#125;<br><br>\tfmt.Println(path)<br>\tfmt.Println(distanceGraph)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\td := <span class=\"hljs-built_in\">new</span>(Dijkstra)<br>\ttPoints := []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>&#125;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>,      <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\td.Init(tPoints, tDis)<br>\td.dijkstra()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>"},{"title":"决策树","date":"2022-01-03T14:53:43.000Z","math":true,"_content":"\n## 决策树\n\n### 决策树三要素\n\n1. 特征选择\n\n2. 决策树生成\n\n3. 决策树剪枝\n\n   1. 预剪枝\n\n      限制树的深度，叶子节点个数，叶子节点样本数，信息增益等\n\n   2. 后剪枝\n\n      正则化\n\n### ID3\n\n&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。\n\n#### 信息增益\n\n&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中**“信息量”**的 变化，通常选择信息增益最大的特征作为当前划分的依据。\n\n#### 信息熵\n\n&emsp;&emsp;如何衡量**“信息量”**呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：\n\n$$H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})$$\n\n&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。\n\n![](/images/entropy.png)\n\n&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。\n\n#### 条件熵\n\n&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，\n\n$$H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})$$\n\n&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$...$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。\n\n&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是$$g(D,A)=H(D)-H(D|A)$$。\n\n&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。\n\n#### ID3算法的缺点：\n\n1. ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。\n2. ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3*log(1/3)*3$ > $-1/2*log(1/2)*2$。\n3. ID3对于缺失值也无法出来，而且更容易过拟合。\n\n#### 为什么ID3倾向于特征属性值偏多的特征？\n\n&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小\n通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。\n\n[1]: https://www.cnblogs.com/wj-1314/p/9428494.html\n\n","source":"_posts/决策树.md","raw":"---\ntitle: 决策树\ndate: 2022-01-03 22:53:43\nmath: true\ncategories: 机器学习\ntags: 树模型\n---\n\n## 决策树\n\n### 决策树三要素\n\n1. 特征选择\n\n2. 决策树生成\n\n3. 决策树剪枝\n\n   1. 预剪枝\n\n      限制树的深度，叶子节点个数，叶子节点样本数，信息增益等\n\n   2. 后剪枝\n\n      正则化\n\n### ID3\n\n&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。\n\n#### 信息增益\n\n&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中**“信息量”**的 变化，通常选择信息增益最大的特征作为当前划分的依据。\n\n#### 信息熵\n\n&emsp;&emsp;如何衡量**“信息量”**呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：\n\n$$H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})$$\n\n&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。\n\n![](/images/entropy.png)\n\n&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。\n\n#### 条件熵\n\n&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，\n\n$$H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})$$\n\n&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$...$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。\n\n&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是$$g(D,A)=H(D)-H(D|A)$$。\n\n&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。\n\n#### ID3算法的缺点：\n\n1. ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。\n2. ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3*log(1/3)*3$ > $-1/2*log(1/2)*2$。\n3. ID3对于缺失值也无法出来，而且更容易过拟合。\n\n#### 为什么ID3倾向于特征属性值偏多的特征？\n\n&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小\n通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。\n\n[1]: https://www.cnblogs.com/wj-1314/p/9428494.html\n\n","slug":"决策树","published":1,"updated":"2022-01-09T14:05:41.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrw000pj4h297k7335p","content":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><h3 id=\"决策树三要素\"><a href=\"#决策树三要素\" class=\"headerlink\" title=\"决策树三要素\"></a>决策树三要素</h3><ol>\n<li><p>特征选择</p>\n</li>\n<li><p>决策树生成</p>\n</li>\n<li><p>决策树剪枝</p>\n<ol>\n<li><p>预剪枝</p>\n<p>限制树的深度，叶子节点个数，叶子节点样本数，信息增益等</p>\n</li>\n<li><p>后剪枝</p>\n<p>正则化</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ID3\"><a href=\"#ID3\" class=\"headerlink\" title=\"ID3\"></a>ID3</h3><p>&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。</p>\n<h4 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h4><p>&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中<strong>“信息量”</strong>的 变化，通常选择信息增益最大的特征作为当前划分的依据。</p>\n<h4 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h4><p>&emsp;&emsp;如何衡量<strong>“信息量”</strong>呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：</p>\n<script type=\"math/tex; mode=display\">H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})</script><p>&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。</p>\n<p><img src=\"/images/entropy.png\" alt=\"\"></p>\n<p>&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。</p>\n<h4 id=\"条件熵\"><a href=\"#条件熵\" class=\"headerlink\" title=\"条件熵\"></a>条件熵</h4><p>&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，</p>\n<script type=\"math/tex; mode=display\">H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})</script><p>&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$…$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。</p>\n<p>&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是<script type=\"math/tex\">g(D,A)=H(D)-H(D|A)</script>。</p>\n<p>&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。</p>\n<h4 id=\"ID3算法的缺点：\"><a href=\"#ID3算法的缺点：\" class=\"headerlink\" title=\"ID3算法的缺点：\"></a>ID3算法的缺点：</h4><ol>\n<li>ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。</li>\n<li>ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3<em>log(1/3)</em>3$ &gt; $-1/2<em>log(1/2)</em>2$。</li>\n<li>ID3对于缺失值也无法出来，而且更容易过拟合。</li>\n</ol>\n<h4 id=\"为什么ID3倾向于特征属性值偏多的特征？\"><a href=\"#为什么ID3倾向于特征属性值偏多的特征？\" class=\"headerlink\" title=\"为什么ID3倾向于特征属性值偏多的特征？\"></a>为什么ID3倾向于特征属性值偏多的特征？</h4><p>&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小<br>通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。</p>\n","site":{"data":{}},"wordcount":1212,"excerpt":"","more":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><h3 id=\"决策树三要素\"><a href=\"#决策树三要素\" class=\"headerlink\" title=\"决策树三要素\"></a>决策树三要素</h3><ol>\n<li><p>特征选择</p>\n</li>\n<li><p>决策树生成</p>\n</li>\n<li><p>决策树剪枝</p>\n<ol>\n<li><p>预剪枝</p>\n<p>限制树的深度，叶子节点个数，叶子节点样本数，信息增益等</p>\n</li>\n<li><p>后剪枝</p>\n<p>正则化</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ID3\"><a href=\"#ID3\" class=\"headerlink\" title=\"ID3\"></a>ID3</h3><p>&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。</p>\n<h4 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h4><p>&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中<strong>“信息量”</strong>的 变化，通常选择信息增益最大的特征作为当前划分的依据。</p>\n<h4 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h4><p>&emsp;&emsp;如何衡量<strong>“信息量”</strong>呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：</p>\n<script type=\"math/tex; mode=display\">H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})</script><p>&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。</p>\n<p><img src=\"/images/entropy.png\" alt=\"\"></p>\n<p>&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。</p>\n<h4 id=\"条件熵\"><a href=\"#条件熵\" class=\"headerlink\" title=\"条件熵\"></a>条件熵</h4><p>&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，</p>\n<script type=\"math/tex; mode=display\">H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})</script><p>&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$…$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。</p>\n<p>&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是<script type=\"math/tex\">g(D,A)=H(D)-H(D|A)</script>。</p>\n<p>&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。</p>\n<h4 id=\"ID3算法的缺点：\"><a href=\"#ID3算法的缺点：\" class=\"headerlink\" title=\"ID3算法的缺点：\"></a>ID3算法的缺点：</h4><ol>\n<li>ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。</li>\n<li>ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3<em>log(1/3)</em>3$ &gt; $-1/2<em>log(1/2)</em>2$。</li>\n<li>ID3对于缺失值也无法出来，而且更容易过拟合。</li>\n</ol>\n<h4 id=\"为什么ID3倾向于特征属性值偏多的特征？\"><a href=\"#为什么ID3倾向于特征属性值偏多的特征？\" class=\"headerlink\" title=\"为什么ID3倾向于特征属性值偏多的特征？\"></a>为什么ID3倾向于特征属性值偏多的特征？</h4><p>&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小<br>通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。</p>\n"},{"title":"工作心得总结","date":"2021-07-10T02:52:40.000Z","_content":"\n## 工作经验总结\n\n### 为什么要写这个总结\n\n&ensp;&ensp;自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力...这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，**一直停留在固有的思维层面，这是比较可怕的**。\n\n<!--more-->\n\n&ensp;&ensp;曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。\n\n&ensp;&ensp;工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。\n\n### 总结ing....\n\n1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。\n\n2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。\n\n3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。\n\n....\n\n\n\n\n\nWo wo wo \n\n\n\n### 共勉\n\n\n\n","source":"_posts/工作心得总结.md","raw":"---\ntitle: 工作心得总结\ndate: 2021-07-10 10:52:40\ncategories: 总结\ntags: 经验总结\n---\n\n## 工作经验总结\n\n### 为什么要写这个总结\n\n&ensp;&ensp;自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力...这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，**一直停留在固有的思维层面，这是比较可怕的**。\n\n<!--more-->\n\n&ensp;&ensp;曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。\n\n&ensp;&ensp;工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。\n\n### 总结ing....\n\n1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。\n\n2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。\n\n3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。\n\n....\n\n\n\n\n\nWo wo wo \n\n\n\n### 共勉\n\n\n\n","slug":"工作心得总结","published":1,"updated":"2021-07-10T04:21:20.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrx000uj4h2ewgo524f","content":"<h2 id=\"工作经验总结\"><a href=\"#工作经验总结\" class=\"headerlink\" title=\"工作经验总结\"></a>工作经验总结</h2><h3 id=\"为什么要写这个总结\"><a href=\"#为什么要写这个总结\" class=\"headerlink\" title=\"为什么要写这个总结\"></a>为什么要写这个总结</h3><p>&ensp;&ensp;自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力…这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，<strong>一直停留在固有的思维层面，这是比较可怕的</strong>。</p>\n<span id=\"more\"></span>\n<p>&ensp;&ensp;曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。</p>\n<p>&ensp;&ensp;工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。</p>\n<h3 id=\"总结ing…\"><a href=\"#总结ing…\" class=\"headerlink\" title=\"总结ing….\"></a>总结ing….</h3><p>1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。</p>\n<p>2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。</p>\n<p>3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。</p>\n<p>….</p>\n<p>Wo wo wo </p>\n<h3 id=\"共勉\"><a href=\"#共勉\" class=\"headerlink\" title=\"共勉\"></a>共勉</h3>","site":{"data":{}},"wordcount":842,"excerpt":"<h2 id=\"工作经验总结\"><a href=\"#工作经验总结\" class=\"headerlink\" title=\"工作经验总结\"></a>工作经验总结</h2><h3 id=\"为什么要写这个总结\"><a href=\"#为什么要写这个总结\" class=\"headerlink\" title=\"为什么要写这个总结\"></a>为什么要写这个总结</h3><p>&ensp;&ensp;自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力…这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，<strong>一直停留在固有的思维层面，这是比较可怕的</strong>。</p>","more":"<p>&ensp;&ensp;曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。</p>\n<p>&ensp;&ensp;工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。</p>\n<h3 id=\"总结ing…\"><a href=\"#总结ing…\" class=\"headerlink\" title=\"总结ing….\"></a>总结ing….</h3><p>1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。</p>\n<p>2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。</p>\n<p>3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。</p>\n<p>….</p>\n<p>Wo wo wo </p>\n<h3 id=\"共勉\"><a href=\"#共勉\" class=\"headerlink\" title=\"共勉\"></a>共勉</h3>"},{"title":"延迟接受算法","math":true,"date":"2020-07-18T06:17:59.000Z","_content":"\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","source":"_posts/延迟接受算法.md","raw":"---\ntitle: 延迟接受算法\nmath: true\ndate: 2020-07-18 14:17:59\ncategories: 算法\ntags: late acceptance\n---\n\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","slug":"延迟接受算法","published":1,"updated":"2022-01-03T06:02:26.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzkrz000wj4h20cshdw6f","content":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>\n<span id=\"more\"></span>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> algorithm<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;TSP/ioinfo&quot;</span><br>\t<span class=\"hljs-string\">&quot;TSP/util&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> LateAcceptance <span class=\"hljs-keyword\">struct</span> &#123;<br>\tn       <span class=\"hljs-keyword\">int</span><br>\ttScore []<span class=\"hljs-keyword\">float64</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(n <span class=\"hljs-keyword\">int</span>, pStartScore <span class=\"hljs-keyword\">float64</span>)</span></span> &#123;<br>\tl.n = n + <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; l.n; i++ &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pStartScore)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Accept</span><span class=\"hljs-params\">(pScore <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> pAccept <span class=\"hljs-keyword\">bool</span><br><br>\t<span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-number\">0</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> pAccept &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pScore)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(l.tScore) &gt;= l.n &#123;<br>\t\tl.tScore = l.tScore[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> pAccept<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">changCity1</span><span class=\"hljs-params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"hljs-title\">ioinfo</span>.<span class=\"hljs-title\">Data</span></span> &#123;<br>\tpos1 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)<span class=\"hljs-number\">-3</span>) + <span class=\"hljs-number\">1</span><br>\tpos2 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)-pos1<span class=\"hljs-number\">-1</span>) + pos1<br>\tdataDest := <span class=\"hljs-built_in\">make</span>([]ioinfo.Data, <span class=\"hljs-built_in\">len</span>(dataSrc))<br>\t<span class=\"hljs-built_in\">copy</span>(dataDest, dataSrc)<br>\tr := R1.Intn(<span class=\"hljs-number\">2</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> r == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> pos1 &lt; pos2 &#123;<br>\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t\t\tpos1 ++<br>\t\t\tpos2 --<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> dataDest<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">La</span><span class=\"hljs-params\">(pFileName <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">float64</span></span> &#123;<br>\tdata := util.GetSampleData(pFileName, <span class=\"hljs-literal\">false</span>)<br>\tr := util.GetResult(data)<br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">215</span>, r)<br><br>\t<span class=\"hljs-keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>))<br><br>\ts1 := time.Now().UnixNano()<br>\tpIterNum := <span class=\"hljs-number\">200000</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\ttemp := changCity1(data, *R1)<br>\t\trn := util.GetResult(temp)  <span class=\"hljs-comment\">// 计算当前解的里程 </span><br>\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(rn) &#123;<br>\t\t\tdata = temp<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\ts2 := time.Now().UnixNano()<br>\tfmt.Println(data, s2 -s1)<br>\t<span class=\"hljs-keyword\">return</span> util.GetResult(data)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">延迟接受启动：<br>[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns<br>588.1953208548182<br><br></code></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>\n","site":{"data":{}},"wordcount":3503,"excerpt":"<h2 id=\"延迟接受算法\"><a href=\"#延迟接受算法\" class=\"headerlink\" title=\"延迟接受算法\"></a>延迟接受算法</h2><p>&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h2><p>&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。</p>\n<p>&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<p><img src=\"/images/lahc.jpg\" alt=\"lahc\"></p>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。</p>\n<p>2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。</p>\n<p>3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。</p>\n<p>4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。</p>\n<p>5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\"><a href=\"#算法应用\" class=\"headerlink\" title=\"算法应用\"></a>算法应用</h2><p>&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> algorithm<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;TSP/ioinfo&quot;</span><br>\t<span class=\"hljs-string\">&quot;TSP/util&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> LateAcceptance <span class=\"hljs-keyword\">struct</span> &#123;<br>\tn       <span class=\"hljs-keyword\">int</span><br>\ttScore []<span class=\"hljs-keyword\">float64</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(n <span class=\"hljs-keyword\">int</span>, pStartScore <span class=\"hljs-keyword\">float64</span>)</span></span> &#123;<br>\tl.n = n + <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; l.n; i++ &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pStartScore)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Accept</span><span class=\"hljs-params\">(pScore <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> pAccept <span class=\"hljs-keyword\">bool</span><br><br>\t<span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-number\">0</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> pAccept &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pScore)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(l.tScore) &gt;= l.n &#123;<br>\t\tl.tScore = l.tScore[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> pAccept<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">changCity1</span><span class=\"hljs-params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"hljs-title\">ioinfo</span>.<span class=\"hljs-title\">Data</span></span> &#123;<br>\tpos1 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)<span class=\"hljs-number\">-3</span>) + <span class=\"hljs-number\">1</span><br>\tpos2 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)-pos1<span class=\"hljs-number\">-1</span>) + pos1<br>\tdataDest := <span class=\"hljs-built_in\">make</span>([]ioinfo.Data, <span class=\"hljs-built_in\">len</span>(dataSrc))<br>\t<span class=\"hljs-built_in\">copy</span>(dataDest, dataSrc)<br>\tr := R1.Intn(<span class=\"hljs-number\">2</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> r == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> pos1 &lt; pos2 &#123;<br>\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t\t\tpos1 ++<br>\t\t\tpos2 --<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> dataDest<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">La</span><span class=\"hljs-params\">(pFileName <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">float64</span></span> &#123;<br>\tdata := util.GetSampleData(pFileName, <span class=\"hljs-literal\">false</span>)<br>\tr := util.GetResult(data)<br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">215</span>, r)<br><br>\t<span class=\"hljs-keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>))<br><br>\ts1 := time.Now().UnixNano()<br>\tpIterNum := <span class=\"hljs-number\">200000</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\ttemp := changCity1(data, *R1)<br>\t\trn := util.GetResult(temp)  <span class=\"hljs-comment\">// 计算当前解的里程 </span><br>\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(rn) &#123;<br>\t\t\tdata = temp<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\ts2 := time.Now().UnixNano()<br>\tfmt.Println(data, s2 -s1)<br>\t<span class=\"hljs-keyword\">return</span> util.GetResult(data)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">延迟接受启动：<br>[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns<br>588.1953208548182<br><br></code></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>"},{"title":"排课程","date":"2021-01-10T08:18:59.000Z","_content":"\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","source":"_posts/排课程.md","raw":"---\ntitle: 排课程\ndate: 2021-01-10 16:18:59\ncategories: leetcode\ntags: alogithm\n---\n\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","slug":"排课程","published":1,"updated":"2021-06-04T13:13:40.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzks0000zj4h2hgni47mg","content":"<h2 id=\"排课程\"><a href=\"#排课程\" class=\"headerlink\" title=\"排课程\"></a>排课程</h2><p>&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>&emsp;&emsp;题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>&emsp;&emsp;There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>\n<span id=\"more\"></span>\n<p>&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>&emsp;&emsp;Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canFinish</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites)) <span class=\"hljs-comment\">// 建立图 </span><br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)  <span class=\"hljs-comment\">// 记录出度</span><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> _, a := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[a[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[a[<span class=\"hljs-number\">1</span>]], a[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// key为先学的课程</span><br>\t\tin[a[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"hljs-comment\">// 出度为0的课程加入队列</span><br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123; <span class=\"hljs-comment\">// 与其相关课程的出度减一</span><br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123; <span class=\"hljs-comment\">// 若出度为0，加入队列</span><br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> in &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourses := <span class=\"hljs-number\">2</span><br>\tprerequisite := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br>\tfmt.Println(canFinish(numCourses, prerequisite))<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">1</span>]], pre[<span class=\"hljs-number\">0</span>])<br>\t\tin[pre[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, front) <span class=\"hljs-comment\">// 将课程编号加入到结果中</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123;<br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(res) == numCourses &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> res<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder1</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">0</span>]], pre[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// key为后学的课程</span><br>\t&#125;<br>\tvisited := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfsFindOrder</span><span class=\"hljs-params\">(graph <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, visited *[]<span class=\"hljs-keyword\">int</span>, i <span class=\"hljs-keyword\">int</span>, res *[]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-built_in\">len</span>(graph[i]); k++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">2</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t*res = <span class=\"hljs-built_in\">append</span>(*res, i)<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourse := <span class=\"hljs-number\">4</span><br>\tprerequisites := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>&#125;&#125;<br>\tfmt.Println(findOrder(numCourse, prerequisites))<br>\tfmt.Println(findOrder1(numCourse, prerequisites))<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>\n","site":{"data":{}},"wordcount":4254,"excerpt":"<h2 id=\"排课程\"><a href=\"#排课程\" class=\"headerlink\" title=\"排课程\"></a>排课程</h2><p>&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>&emsp;&emsp;题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>&emsp;&emsp;There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>","more":"<p>&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>&emsp;&emsp;Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canFinish</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites)) <span class=\"hljs-comment\">// 建立图 </span><br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)  <span class=\"hljs-comment\">// 记录出度</span><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> _, a := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[a[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[a[<span class=\"hljs-number\">1</span>]], a[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// key为先学的课程</span><br>\t\tin[a[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"hljs-comment\">// 出度为0的课程加入队列</span><br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123; <span class=\"hljs-comment\">// 与其相关课程的出度减一</span><br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123; <span class=\"hljs-comment\">// 若出度为0，加入队列</span><br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> in &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourses := <span class=\"hljs-number\">2</span><br>\tprerequisite := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br>\tfmt.Println(canFinish(numCourses, prerequisite))<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">1</span>]], pre[<span class=\"hljs-number\">0</span>])<br>\t\tin[pre[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, front) <span class=\"hljs-comment\">// 将课程编号加入到结果中</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123;<br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(res) == numCourses &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> res<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder1</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">0</span>]], pre[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// key为后学的课程</span><br>\t&#125;<br>\tvisited := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfsFindOrder</span><span class=\"hljs-params\">(graph <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, visited *[]<span class=\"hljs-keyword\">int</span>, i <span class=\"hljs-keyword\">int</span>, res *[]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-built_in\">len</span>(graph[i]); k++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">2</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t*res = <span class=\"hljs-built_in\">append</span>(*res, i)<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourse := <span class=\"hljs-number\">4</span><br>\tprerequisites := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>&#125;&#125;<br>\tfmt.Println(findOrder(numCourse, prerequisites))<br>\tfmt.Println(findOrder1(numCourse, prerequisites))<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>"},{"title":"模拟退火算法","math":true,"date":"2021-10-30T05:59:35.000Z","_content":"\n## 模拟退火算法\n\n&emsp;&emsp;模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？\n\n<!--more-->\n\n### 算法简介\n\n&emsp;&emsp;针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。\n\n&emsp;&emsp;sa中包含几个参数:T温度，$\\alpha\\$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：\n\n![sa](/images/sa.png)\n\n\n\n模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为$f(x)$，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。**若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受**。依据下面的公式：\n\n$$rand < exp(-(f(x')-f(x)) / T)$$\n\n来确定新解是否接受。指数函数的图像如下图所示：\n\n![exp](/images/exp.gif)\n\n当新解比旧解要差时，$-(f(x')-f(x)) < 0$，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。**若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率**。\n\n代码如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n\t\"GoProject/algorithm/heuristic\"\n)\n\nfunc getFuncRes(x, y float64) float64{ // 目标函数\n\treturn 6.0 * math.Pow(x, 7) + 8.0 * math.Pow(x, 6)  + 7.0 * math.Pow(x, 3) + 5 * math.Pow(x, 2) - x*y\n}\n\nfunc SimulateAnneal() {\n\tresult := math.MaxFloat64\n\tt := 100.0\n\tminT := 1e-8\n\titerNum := 10000\n\tdelta := 0.98\n\trand.Seed(0)\n\tx := rand.Float64() * 100\n\tbestX := x\n\tfmt.Println(bestX)\n\n\tcnt := 0\n\tfor t > minT && iterNum >= 0 {\n\t\txNew := x + rand.Float64() * 2 - 1\n\t\tif xNew >= 0 && xNew <= 100 {\n\t\t\tcnt++\n\t\t\tfuncNew := getFuncRes(xNew, 0)\n\t\t\tif funcNew < result {\n\t\t\t\tx = xNew\n\t\t\t\tbestX = x\n\t\t\t\tresult = funcNew\n\t\t\t} else {\n\t\t\t\tp := math.Exp(-1 * (funcNew - result) / t)\n\t\t\t\tif rand.Float64() < p {\n\t\t\t\t\tx = xNew\n\t\t\t\t}\n\t\t\t\tif p > 0 {\n\t\t\t\t\t//fmt.Println(\"prob \", p)\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\titerNum--\n\t\tt = t * delta\n\t}\n\tfmt.Println(bestX, result, cnt)\n}\n\nfunc LateAcc() {\n\n\trand.Seed(0)\n\n\tbestX := rand.Float64() * 100\n\tbestRes := 0.0\n\n\tpLa := new(heuristic.LateAcceptance)\n\tpLa.Init(200)\n\n\tpIterNum := 10000\n\tcnt := 0\n\tfor pIterNum > 0 {\n\t\tx := bestX + rand.Float64() * 2 - 1\n\t\tif x >= 0 && x <= 100 {\n\t\t\tcnt++\n\t\t\tpRes := getFuncRes(x, 0)\n\t\t\tif pLa.Accept(pRes) {\n\t\t\t\tbestX = x\n\t\t\t\tbestRes = pRes\n\t\t\t}\n\t\t}\n\t\tpIterNum--\n\t}\n\tfmt.Println(bestX, bestRes, cnt)\n}\n\nfunc main() {\n\tSimulateAnneal()\n\tLateAcc()\n}\n\n```\n\n","source":"_posts/模拟退火算法.md","raw":"---\ntitle: 模拟退火算法\nmath: true\ndate: 2021-10-30 13:59:35\ncategories: 算法\ntags: 模拟退火\n---\n\n## 模拟退火算法\n\n&emsp;&emsp;模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？\n\n<!--more-->\n\n### 算法简介\n\n&emsp;&emsp;针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。\n\n&emsp;&emsp;sa中包含几个参数:T温度，$\\alpha\\$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：\n\n![sa](/images/sa.png)\n\n\n\n模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为$f(x)$，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。**若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受**。依据下面的公式：\n\n$$rand < exp(-(f(x')-f(x)) / T)$$\n\n来确定新解是否接受。指数函数的图像如下图所示：\n\n![exp](/images/exp.gif)\n\n当新解比旧解要差时，$-(f(x')-f(x)) < 0$，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。**若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率**。\n\n代码如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n\t\"GoProject/algorithm/heuristic\"\n)\n\nfunc getFuncRes(x, y float64) float64{ // 目标函数\n\treturn 6.0 * math.Pow(x, 7) + 8.0 * math.Pow(x, 6)  + 7.0 * math.Pow(x, 3) + 5 * math.Pow(x, 2) - x*y\n}\n\nfunc SimulateAnneal() {\n\tresult := math.MaxFloat64\n\tt := 100.0\n\tminT := 1e-8\n\titerNum := 10000\n\tdelta := 0.98\n\trand.Seed(0)\n\tx := rand.Float64() * 100\n\tbestX := x\n\tfmt.Println(bestX)\n\n\tcnt := 0\n\tfor t > minT && iterNum >= 0 {\n\t\txNew := x + rand.Float64() * 2 - 1\n\t\tif xNew >= 0 && xNew <= 100 {\n\t\t\tcnt++\n\t\t\tfuncNew := getFuncRes(xNew, 0)\n\t\t\tif funcNew < result {\n\t\t\t\tx = xNew\n\t\t\t\tbestX = x\n\t\t\t\tresult = funcNew\n\t\t\t} else {\n\t\t\t\tp := math.Exp(-1 * (funcNew - result) / t)\n\t\t\t\tif rand.Float64() < p {\n\t\t\t\t\tx = xNew\n\t\t\t\t}\n\t\t\t\tif p > 0 {\n\t\t\t\t\t//fmt.Println(\"prob \", p)\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\titerNum--\n\t\tt = t * delta\n\t}\n\tfmt.Println(bestX, result, cnt)\n}\n\nfunc LateAcc() {\n\n\trand.Seed(0)\n\n\tbestX := rand.Float64() * 100\n\tbestRes := 0.0\n\n\tpLa := new(heuristic.LateAcceptance)\n\tpLa.Init(200)\n\n\tpIterNum := 10000\n\tcnt := 0\n\tfor pIterNum > 0 {\n\t\tx := bestX + rand.Float64() * 2 - 1\n\t\tif x >= 0 && x <= 100 {\n\t\t\tcnt++\n\t\t\tpRes := getFuncRes(x, 0)\n\t\t\tif pLa.Accept(pRes) {\n\t\t\t\tbestX = x\n\t\t\t\tbestRes = pRes\n\t\t\t}\n\t\t}\n\t\tpIterNum--\n\t}\n\tfmt.Println(bestX, bestRes, cnt)\n}\n\nfunc main() {\n\tSimulateAnneal()\n\tLateAcc()\n}\n\n```\n\n","slug":"模拟退火算法","published":1,"updated":"2022-01-04T01:01:01.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzks30014j4h2dok31cls","content":"<h2 id=\"模拟退火算法\"><a href=\"#模拟退火算法\" class=\"headerlink\" title=\"模拟退火算法\"></a>模拟退火算法</h2><p>&emsp;&emsp;模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？</p>\n<span id=\"more\"></span>\n<h3 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>&emsp;&emsp;针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。</p>\n<p>&emsp;&emsp;sa中包含几个参数:T温度，$\\alpha$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：</p>\n<p><img src=\"/images/sa.png\" alt=\"sa\"></p>\n<p>模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为$f(x)$，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。<strong>若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受</strong>。依据下面的公式：</p>\n<script type=\"math/tex; mode=display\">rand < exp(-(f(x')-f(x)) / T)</script><p>来确定新解是否接受。指数函数的图像如下图所示：</p>\n<p><img src=\"/images/exp.gif\" alt=\"exp\"></p>\n<p>当新解比旧解要差时，$-(f(x’)-f(x)) &lt; 0$，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。<strong>若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率</strong>。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;GoProject/algorithm/heuristic&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFuncRes</span><span class=\"hljs-params\">(x, y <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">float64</span></span>&#123; <span class=\"hljs-comment\">// 目标函数</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6.0</span> * math.Pow(x, <span class=\"hljs-number\">7</span>) + <span class=\"hljs-number\">8.0</span> * math.Pow(x, <span class=\"hljs-number\">6</span>)  + <span class=\"hljs-number\">7.0</span> * math.Pow(x, <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">5</span> * math.Pow(x, <span class=\"hljs-number\">2</span>) - x*y<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SimulateAnneal</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresult := math.MaxFloat64<br>\tt := <span class=\"hljs-number\">100.0</span><br>\tminT := <span class=\"hljs-number\">1e-8</span><br>\titerNum := <span class=\"hljs-number\">10000</span><br>\tdelta := <span class=\"hljs-number\">0.98</span><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br>\tx := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestX := x<br>\tfmt.Println(bestX)<br><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> t &gt; minT &amp;&amp; iterNum &gt;= <span class=\"hljs-number\">0</span> &#123;<br>\t\txNew := x + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> xNew &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; xNew &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tfuncNew := getFuncRes(xNew, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> funcNew &lt; result &#123;<br>\t\t\t\tx = xNew<br>\t\t\t\tbestX = x<br>\t\t\t\tresult = funcNew<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tp := math.Exp(<span class=\"hljs-number\">-1</span> * (funcNew - result) / t)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; p &#123;<br>\t\t\t\t\tx = xNew<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> p &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">//fmt.Println(&quot;prob &quot;, p)</span><br>\t\t\t\t&#125;<br><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\titerNum--<br>\t\tt = t * delta<br>\t&#125;<br>\tfmt.Println(bestX, result, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LateAcc</span><span class=\"hljs-params\">()</span></span> &#123;<br><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br><br>\tbestX := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestRes := <span class=\"hljs-number\">0.0</span><br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(heuristic.LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">200</span>)<br><br>\tpIterNum := <span class=\"hljs-number\">10000</span><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tx := bestX + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tpRes := getFuncRes(x, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(pRes) &#123;<br>\t\t\t\tbestX = x<br>\t\t\t\tbestRes = pRes<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\tfmt.Println(bestX, bestRes, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tSimulateAnneal()<br>\tLateAcc()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2239,"excerpt":"<h2 id=\"模拟退火算法\"><a href=\"#模拟退火算法\" class=\"headerlink\" title=\"模拟退火算法\"></a>模拟退火算法</h2><p>&emsp;&emsp;模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？</p>","more":"<h3 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h3><p>&emsp;&emsp;针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。</p>\n<p>&emsp;&emsp;sa中包含几个参数:T温度，$\\alpha$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：</p>\n<p><img src=\"/images/sa.png\" alt=\"sa\"></p>\n<p>模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为$f(x)$，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。<strong>若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受</strong>。依据下面的公式：</p>\n<script type=\"math/tex; mode=display\">rand < exp(-(f(x')-f(x)) / T)</script><p>来确定新解是否接受。指数函数的图像如下图所示：</p>\n<p><img src=\"/images/exp.gif\" alt=\"exp\"></p>\n<p>当新解比旧解要差时，$-(f(x’)-f(x)) &lt; 0$，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。<strong>若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率</strong>。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;GoProject/algorithm/heuristic&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFuncRes</span><span class=\"hljs-params\">(x, y <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">float64</span></span>&#123; <span class=\"hljs-comment\">// 目标函数</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6.0</span> * math.Pow(x, <span class=\"hljs-number\">7</span>) + <span class=\"hljs-number\">8.0</span> * math.Pow(x, <span class=\"hljs-number\">6</span>)  + <span class=\"hljs-number\">7.0</span> * math.Pow(x, <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">5</span> * math.Pow(x, <span class=\"hljs-number\">2</span>) - x*y<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SimulateAnneal</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresult := math.MaxFloat64<br>\tt := <span class=\"hljs-number\">100.0</span><br>\tminT := <span class=\"hljs-number\">1e-8</span><br>\titerNum := <span class=\"hljs-number\">10000</span><br>\tdelta := <span class=\"hljs-number\">0.98</span><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br>\tx := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestX := x<br>\tfmt.Println(bestX)<br><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> t &gt; minT &amp;&amp; iterNum &gt;= <span class=\"hljs-number\">0</span> &#123;<br>\t\txNew := x + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> xNew &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; xNew &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tfuncNew := getFuncRes(xNew, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> funcNew &lt; result &#123;<br>\t\t\t\tx = xNew<br>\t\t\t\tbestX = x<br>\t\t\t\tresult = funcNew<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tp := math.Exp(<span class=\"hljs-number\">-1</span> * (funcNew - result) / t)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; p &#123;<br>\t\t\t\t\tx = xNew<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> p &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">//fmt.Println(&quot;prob &quot;, p)</span><br>\t\t\t\t&#125;<br><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\titerNum--<br>\t\tt = t * delta<br>\t&#125;<br>\tfmt.Println(bestX, result, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LateAcc</span><span class=\"hljs-params\">()</span></span> &#123;<br><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br><br>\tbestX := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestRes := <span class=\"hljs-number\">0.0</span><br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(heuristic.LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">200</span>)<br><br>\tpIterNum := <span class=\"hljs-number\">10000</span><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tx := bestX + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tpRes := getFuncRes(x, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(pRes) &#123;<br>\t\t\t\tbestX = x<br>\t\t\t\tbestRes = pRes<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\tfmt.Println(bestX, bestRes, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tSimulateAnneal()<br>\tLateAcc()<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"资源均分","date":"2021-06-04T13:16:20.000Z","_content":"\n## 资源均分\n\n## 背景\n\n&ensp;&ensp;这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。\n\n## 题目\n\n&ensp;&ensp;假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，**让整体的石油分布看上去比较均衡**，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。\n\n<!--more-->\n\n&ensp;&ensp;这里有两点需要注意，\n\n1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。\n\n2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。\n\n&ensp;&ensp;这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。\n\n我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然>0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。\n\n第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油>=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。\n\n### score如何定义\n\n&ensp;&ensp;此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。\n\n### 算法如何设计\n\n&ensp;&ensp;我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。\n\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n)\n\nvar r = rand.New(rand.NewSource(0)) // 用于搜索\n\nfunc abs(num int) int {\n\tif num < 0 {\n\t\treturn -num\n\t}\n\treturn num\n}\n\n// 计算score\nfunc calculateScore(nums []int) int {\n\tsum, res := 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tres += abs(nums[j] - nums[i])\n\t\t}\n\t}\n\tsum /= len(nums)\n\tfor i := 0; i < len(nums); i++ {\n\t\tres += abs(sum - nums[i])\n\t}\n\treturn res\n}\n\nfunc dispatch(nums []int, m int) {\n\tT, minT, ratio := 100.0, 0.0001, 0.99 // 初始化最高温度，最低温度，降温速率\n\n\ttmp := append([]int{}, nums...)\n\tfix := initial(len(nums), m) // 将m分配完成\n\tfor i := 0; i < len(nums); i++ {\n\t\ttmp[i] += fix[i]\n\t}\n\ts1 := calculateScore(tmp)          // 计算score\n\tbestNum := append([]int{}, tmp...) // 存储最优解\n\tfmt.Println(bestNum)\n\n\tfor T > minT {\n\t\titer := 500\n\t\tfor iter > 0 {\n\t\t\tpre := append([]int{}, tmp...)\n\n\t\t\tlocalSearch(nums, pre) // 搜索\n\t\t\ts2 := calculateScore(pre)\n\t\t\tif s2 < s1 { // 若新解优于最优解，直接接受\n\t\t\t\tbestNum = append([]int{}, pre...)\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t} else if math.Exp(-float64(s2-s1)/T) < r.Float64() { // 有概率接受\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t}\n\t\t\titer--\n\t\t}\n\t\tT *= ratio\n\t}\n\t//nums = bestNum  不会生效\n\tfor i := 0; i < len(nums); i++ {\n\t\tnums[i] = bestNum[i]\n\t}\n\tfmt.Println(bestNum)\n}\n\n// 初始化 参数\nfunc initial(cnt, m int) []int {\n\tvar res []int\n\tfor i := 0; i < cnt-1; i++ {\n\t\tnum := r.Intn(m)\n\t\tm -= num\n\t\tres = append(res, num)\n\t}\n\tres = append(res, m)\n\treturn res\n}\n\nfunc findMaxMin(nums []int) (int, int) {\n\tmin, max := 1<<32-1, -1<<32\n\tind1, ind2 := 0, 0\n\n\tfor ind, num := range nums {\n\t\tif num > max {\n\t\t\tmax, ind2 = num, ind\n\t\t}\n\t\tif num < min {\n\t\t\tmin, ind1 = num, ind\n\t\t}\n\t}\n\treturn ind1, ind2\n}\n\nfunc localSearch(nums, tmp []int) {\n\tminInd, maxInd := findMaxMin(tmp)\n\tif nums[minInd] > tmp[minInd] || nums[maxInd] > tmp[maxInd] {\n\t\ttmp = append([]int{}, nums...)\n\t\treturn\n\t}\n\tif tmp[maxInd] > nums[maxInd] { // 防止r.Intn() 报错\n\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])\n\t\ttmp[minInd] += m\n\t\ttmp[maxInd] -= m\n\t}\n}\n\nfunc calculateSum(nums []int) int {\n\tsum := 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tnums := []int{1, 200, 3, 4, 50}\n\tm := 200\n\tsum := m + calculateSum(nums)\n\tfmt.Println(nums, sum)\n\n\tdispatch(nums, m)\n\tfmt.Println(nums, calculateSum(nums))\n}\n\n-------------------\n[1 200 3 4 50] 458  初始值\n[75 272 16 28 67]\n[75 201 55 60 67]\n[75 201 55 60 67] 458 最终分配结果\n\n```\n\n\n\n### todo\n\n1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。\n\n2、搜索方式也可以更丰富些。\n","source":"_posts/资源均分.md","raw":"---\ntitle: 资源均分\ndate: 2021-06-04 21:16:20\ncategories: 算法\ntags: 资源均分\n---\n\n## 资源均分\n\n## 背景\n\n&ensp;&ensp;这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。\n\n## 题目\n\n&ensp;&ensp;假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，**让整体的石油分布看上去比较均衡**，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。\n\n<!--more-->\n\n&ensp;&ensp;这里有两点需要注意，\n\n1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。\n\n2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。\n\n&ensp;&ensp;这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。\n\n我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然>0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。\n\n第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油>=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。\n\n### score如何定义\n\n&ensp;&ensp;此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。\n\n### 算法如何设计\n\n&ensp;&ensp;我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。\n\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n)\n\nvar r = rand.New(rand.NewSource(0)) // 用于搜索\n\nfunc abs(num int) int {\n\tif num < 0 {\n\t\treturn -num\n\t}\n\treturn num\n}\n\n// 计算score\nfunc calculateScore(nums []int) int {\n\tsum, res := 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tres += abs(nums[j] - nums[i])\n\t\t}\n\t}\n\tsum /= len(nums)\n\tfor i := 0; i < len(nums); i++ {\n\t\tres += abs(sum - nums[i])\n\t}\n\treturn res\n}\n\nfunc dispatch(nums []int, m int) {\n\tT, minT, ratio := 100.0, 0.0001, 0.99 // 初始化最高温度，最低温度，降温速率\n\n\ttmp := append([]int{}, nums...)\n\tfix := initial(len(nums), m) // 将m分配完成\n\tfor i := 0; i < len(nums); i++ {\n\t\ttmp[i] += fix[i]\n\t}\n\ts1 := calculateScore(tmp)          // 计算score\n\tbestNum := append([]int{}, tmp...) // 存储最优解\n\tfmt.Println(bestNum)\n\n\tfor T > minT {\n\t\titer := 500\n\t\tfor iter > 0 {\n\t\t\tpre := append([]int{}, tmp...)\n\n\t\t\tlocalSearch(nums, pre) // 搜索\n\t\t\ts2 := calculateScore(pre)\n\t\t\tif s2 < s1 { // 若新解优于最优解，直接接受\n\t\t\t\tbestNum = append([]int{}, pre...)\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t} else if math.Exp(-float64(s2-s1)/T) < r.Float64() { // 有概率接受\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t}\n\t\t\titer--\n\t\t}\n\t\tT *= ratio\n\t}\n\t//nums = bestNum  不会生效\n\tfor i := 0; i < len(nums); i++ {\n\t\tnums[i] = bestNum[i]\n\t}\n\tfmt.Println(bestNum)\n}\n\n// 初始化 参数\nfunc initial(cnt, m int) []int {\n\tvar res []int\n\tfor i := 0; i < cnt-1; i++ {\n\t\tnum := r.Intn(m)\n\t\tm -= num\n\t\tres = append(res, num)\n\t}\n\tres = append(res, m)\n\treturn res\n}\n\nfunc findMaxMin(nums []int) (int, int) {\n\tmin, max := 1<<32-1, -1<<32\n\tind1, ind2 := 0, 0\n\n\tfor ind, num := range nums {\n\t\tif num > max {\n\t\t\tmax, ind2 = num, ind\n\t\t}\n\t\tif num < min {\n\t\t\tmin, ind1 = num, ind\n\t\t}\n\t}\n\treturn ind1, ind2\n}\n\nfunc localSearch(nums, tmp []int) {\n\tminInd, maxInd := findMaxMin(tmp)\n\tif nums[minInd] > tmp[minInd] || nums[maxInd] > tmp[maxInd] {\n\t\ttmp = append([]int{}, nums...)\n\t\treturn\n\t}\n\tif tmp[maxInd] > nums[maxInd] { // 防止r.Intn() 报错\n\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])\n\t\ttmp[minInd] += m\n\t\ttmp[maxInd] -= m\n\t}\n}\n\nfunc calculateSum(nums []int) int {\n\tsum := 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tnums := []int{1, 200, 3, 4, 50}\n\tm := 200\n\tsum := m + calculateSum(nums)\n\tfmt.Println(nums, sum)\n\n\tdispatch(nums, m)\n\tfmt.Println(nums, calculateSum(nums))\n}\n\n-------------------\n[1 200 3 4 50] 458  初始值\n[75 272 16 28 67]\n[75 201 55 60 67]\n[75 201 55 60 67] 458 最终分配结果\n\n```\n\n\n\n### todo\n\n1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。\n\n2、搜索方式也可以更丰富些。\n","slug":"资源均分","published":1,"updated":"2021-06-04T15:03:06.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9vgzksd001tj4h2cla8a04z","content":"<h2 id=\"资源均分\"><a href=\"#资源均分\" class=\"headerlink\" title=\"资源均分\"></a>资源均分</h2><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>&ensp;&ensp;这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>&ensp;&ensp;假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，<strong>让整体的石油分布看上去比较均衡</strong>，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。</p>\n<span id=\"more\"></span>\n<p>&ensp;&ensp;这里有两点需要注意，</p>\n<p>1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。</p>\n<p>2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。</p>\n<p>&ensp;&ensp;这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。</p>\n<p>我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然&gt;0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。</p>\n<p>第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油&gt;=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。</p>\n<h3 id=\"score如何定义\"><a href=\"#score如何定义\" class=\"headerlink\" title=\"score如何定义\"></a>score如何定义</h3><p>&ensp;&ensp;此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。</p>\n<h3 id=\"算法如何设计\"><a href=\"#算法如何设计\" class=\"headerlink\" title=\"算法如何设计\"></a>算法如何设计</h3><p>&ensp;&ensp;我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> r = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-comment\">// 用于搜索</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(num <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> -num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> num<br>&#125;<br><br><span class=\"hljs-comment\">// 计算score</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateScore</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum, res := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums); j++ &#123;<br>\t\t\tres += abs(nums[j] - nums[i])<br>\t\t&#125;<br>\t&#125;<br>\tsum /= <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tres += abs(sum - nums[i])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dispatch</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>, m <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tT, minT, ratio := <span class=\"hljs-number\">100.0</span>, <span class=\"hljs-number\">0.0001</span>, <span class=\"hljs-number\">0.99</span> <span class=\"hljs-comment\">// 初始化最高温度，最低温度，降温速率</span><br><br>\ttmp := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\tfix := initial(<span class=\"hljs-built_in\">len</span>(nums), m) <span class=\"hljs-comment\">// 将m分配完成</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\ttmp[i] += fix[i]<br>\t&#125;<br>\ts1 := calculateScore(tmp)          <span class=\"hljs-comment\">// 计算score</span><br>\tbestNum := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...) <span class=\"hljs-comment\">// 存储最优解</span><br>\tfmt.Println(bestNum)<br><br>\t<span class=\"hljs-keyword\">for</span> T &gt; minT &#123;<br>\t\titer := <span class=\"hljs-number\">500</span><br>\t\t<span class=\"hljs-keyword\">for</span> iter &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tpre := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...)<br><br>\t\t\tlocalSearch(nums, pre) <span class=\"hljs-comment\">// 搜索</span><br>\t\t\ts2 := calculateScore(pre)<br>\t\t\t<span class=\"hljs-keyword\">if</span> s2 &lt; s1 &#123; <span class=\"hljs-comment\">// 若新解优于最优解，直接接受</span><br>\t\t\t\tbestNum = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...)<br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> math.Exp(-<span class=\"hljs-keyword\">float64</span>(s2-s1)/T) &lt; r.Float64() &#123; <span class=\"hljs-comment\">// 有概率接受</span><br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125;<br>\t\t\titer--<br>\t\t&#125;<br>\t\tT *= ratio<br>\t&#125;<br>\t<span class=\"hljs-comment\">//nums = bestNum  不会生效</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tnums[i] = bestNum[i]<br>\t&#125;<br>\tfmt.Println(bestNum)<br>&#125;<br><br><span class=\"hljs-comment\">// 初始化 参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initial</span><span class=\"hljs-params\">(cnt, m <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; cnt<span class=\"hljs-number\">-1</span>; i++ &#123;<br>\t\tnum := r.Intn(m)<br>\t\tm -= num<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, num)<br>\t&#125;<br>\tres = <span class=\"hljs-built_in\">append</span>(res, m)<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMaxMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tmin, max := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">32</span><span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&lt;&lt;<span class=\"hljs-number\">32</span><br>\tind1, ind2 := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br><br>\t<span class=\"hljs-keyword\">for</span> ind, num := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> num &gt; max &#123;<br>\t\t\tmax, ind2 = num, ind<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> num &lt; min &#123;<br>\t\t\tmin, ind1 = num, ind<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> ind1, ind2<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">localSearch</span><span class=\"hljs-params\">(nums, tmp []<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tminInd, maxInd := findMaxMin(tmp)<br>\t<span class=\"hljs-keyword\">if</span> nums[minInd] &gt; tmp[minInd] || nums[maxInd] &gt; tmp[maxInd] &#123;<br>\t\ttmp = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> tmp[maxInd] &gt; nums[maxInd] &#123; <span class=\"hljs-comment\">// 防止r.Intn() 报错</span><br>\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])<br>\t\ttmp[minInd] += m<br>\t\ttmp[maxInd] -= m<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> sum<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnums := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">50</span>&#125;<br>\tm := <span class=\"hljs-number\">200</span><br>\tsum := m + calculateSum(nums)<br>\tfmt.Println(nums, sum)<br><br>\tdispatch(nums, m)<br>\tfmt.Println(nums, calculateSum(nums))<br>&#125;<br><br>-------------------<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">50</span>] <span class=\"hljs-number\">458</span>  初始值<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">272</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>] <span class=\"hljs-number\">458</span> 最终分配结果<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h3><p>1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。</p>\n<p>2、搜索方式也可以更丰富些。</p>\n","site":{"data":{}},"wordcount":3491,"excerpt":"<h2 id=\"资源均分\"><a href=\"#资源均分\" class=\"headerlink\" title=\"资源均分\"></a>资源均分</h2><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>&ensp;&ensp;这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>&ensp;&ensp;假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，<strong>让整体的石油分布看上去比较均衡</strong>，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。</p>","more":"<p>&ensp;&ensp;这里有两点需要注意，</p>\n<p>1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。</p>\n<p>2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。</p>\n<p>&ensp;&ensp;这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。</p>\n<p>我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然&gt;0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。</p>\n<p>第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油&gt;=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。</p>\n<h3 id=\"score如何定义\"><a href=\"#score如何定义\" class=\"headerlink\" title=\"score如何定义\"></a>score如何定义</h3><p>&ensp;&ensp;此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。</p>\n<h3 id=\"算法如何设计\"><a href=\"#算法如何设计\" class=\"headerlink\" title=\"算法如何设计\"></a>算法如何设计</h3><p>&ensp;&ensp;我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> r = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-comment\">// 用于搜索</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(num <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> -num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> num<br>&#125;<br><br><span class=\"hljs-comment\">// 计算score</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateScore</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum, res := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums); j++ &#123;<br>\t\t\tres += abs(nums[j] - nums[i])<br>\t\t&#125;<br>\t&#125;<br>\tsum /= <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tres += abs(sum - nums[i])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dispatch</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>, m <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tT, minT, ratio := <span class=\"hljs-number\">100.0</span>, <span class=\"hljs-number\">0.0001</span>, <span class=\"hljs-number\">0.99</span> <span class=\"hljs-comment\">// 初始化最高温度，最低温度，降温速率</span><br><br>\ttmp := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\tfix := initial(<span class=\"hljs-built_in\">len</span>(nums), m) <span class=\"hljs-comment\">// 将m分配完成</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\ttmp[i] += fix[i]<br>\t&#125;<br>\ts1 := calculateScore(tmp)          <span class=\"hljs-comment\">// 计算score</span><br>\tbestNum := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...) <span class=\"hljs-comment\">// 存储最优解</span><br>\tfmt.Println(bestNum)<br><br>\t<span class=\"hljs-keyword\">for</span> T &gt; minT &#123;<br>\t\titer := <span class=\"hljs-number\">500</span><br>\t\t<span class=\"hljs-keyword\">for</span> iter &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tpre := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...)<br><br>\t\t\tlocalSearch(nums, pre) <span class=\"hljs-comment\">// 搜索</span><br>\t\t\ts2 := calculateScore(pre)<br>\t\t\t<span class=\"hljs-keyword\">if</span> s2 &lt; s1 &#123; <span class=\"hljs-comment\">// 若新解优于最优解，直接接受</span><br>\t\t\t\tbestNum = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...)<br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> math.Exp(-<span class=\"hljs-keyword\">float64</span>(s2-s1)/T) &lt; r.Float64() &#123; <span class=\"hljs-comment\">// 有概率接受</span><br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125;<br>\t\t\titer--<br>\t\t&#125;<br>\t\tT *= ratio<br>\t&#125;<br>\t<span class=\"hljs-comment\">//nums = bestNum  不会生效</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tnums[i] = bestNum[i]<br>\t&#125;<br>\tfmt.Println(bestNum)<br>&#125;<br><br><span class=\"hljs-comment\">// 初始化 参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initial</span><span class=\"hljs-params\">(cnt, m <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; cnt<span class=\"hljs-number\">-1</span>; i++ &#123;<br>\t\tnum := r.Intn(m)<br>\t\tm -= num<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, num)<br>\t&#125;<br>\tres = <span class=\"hljs-built_in\">append</span>(res, m)<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMaxMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tmin, max := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">32</span><span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&lt;&lt;<span class=\"hljs-number\">32</span><br>\tind1, ind2 := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br><br>\t<span class=\"hljs-keyword\">for</span> ind, num := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> num &gt; max &#123;<br>\t\t\tmax, ind2 = num, ind<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> num &lt; min &#123;<br>\t\t\tmin, ind1 = num, ind<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> ind1, ind2<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">localSearch</span><span class=\"hljs-params\">(nums, tmp []<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tminInd, maxInd := findMaxMin(tmp)<br>\t<span class=\"hljs-keyword\">if</span> nums[minInd] &gt; tmp[minInd] || nums[maxInd] &gt; tmp[maxInd] &#123;<br>\t\ttmp = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> tmp[maxInd] &gt; nums[maxInd] &#123; <span class=\"hljs-comment\">// 防止r.Intn() 报错</span><br>\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])<br>\t\ttmp[minInd] += m<br>\t\ttmp[maxInd] -= m<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> sum<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnums := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">50</span>&#125;<br>\tm := <span class=\"hljs-number\">200</span><br>\tsum := m + calculateSum(nums)<br>\tfmt.Println(nums, sum)<br><br>\tdispatch(nums, m)<br>\tfmt.Println(nums, calculateSum(nums))<br>&#125;<br><br>-------------------<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">50</span>] <span class=\"hljs-number\">458</span>  初始值<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">272</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>] <span class=\"hljs-number\">458</span> 最终分配结果<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h3><p>1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。</p>\n<p>2、搜索方式也可以更丰富些。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl9vgzkrj0001j4h2fd8z7qyy","category_id":"cl9vgzkrm0004j4h20o40arv0","_id":"cl9vgzkrs000ej4h2efapgb6c"},{"post_id":"cl9vgzkrl0003j4h273wq3cyr","category_id":"cl9vgzkrq0009j4h22v3c0jsz","_id":"cl9vgzkru000kj4h2fbb8fu88"},{"post_id":"cl9vgzkro0006j4h22jefae1v","category_id":"cl9vgzkrs000fj4h294qj5f19","_id":"cl9vgzkrw000rj4h221sq48oa"},{"post_id":"cl9vgzkrv000nj4h2b9hr7bpx","category_id":"cl9vgzkrq0009j4h22v3c0jsz","_id":"cl9vgzkrz000xj4h260yv6jar"},{"post_id":"cl9vgzkrp0007j4h20rmkge8x","category_id":"cl9vgzkru000lj4h2f0qgb31m","_id":"cl9vgzks00010j4h2eqjodub7"},{"post_id":"cl9vgzkrw000pj4h297k7335p","category_id":"cl9vgzkru000lj4h2f0qgb31m","_id":"cl9vgzks40015j4h20wp53gbh"},{"post_id":"cl9vgzkrz000wj4h20cshdw6f","category_id":"cl9vgzkrq0009j4h22v3c0jsz","_id":"cl9vgzks40016j4h23cypclxh"},{"post_id":"cl9vgzkrp0008j4h25ud48xjv","category_id":"cl9vgzkrw000sj4h2gga17kdm","_id":"cl9vgzks6001aj4h2b7ogctuw"},{"post_id":"cl9vgzks30014j4h2dok31cls","category_id":"cl9vgzkrq0009j4h22v3c0jsz","_id":"cl9vgzks6001bj4h21qr25ted"},{"post_id":"cl9vgzkrr000dj4h27e9kcw6a","category_id":"cl9vgzks00011j4h2fdg06usk","_id":"cl9vgzks7001ej4h29o99ek86"},{"post_id":"cl9vgzkrt000hj4h2451oedr5","category_id":"cl9vgzks00011j4h2fdg06usk","_id":"cl9vgzks8001hj4h2ft2542o6"},{"post_id":"cl9vgzkrt000jj4h2550zdjrm","category_id":"cl9vgzkru000lj4h2f0qgb31m","_id":"cl9vgzks9001lj4h272hc85zf"},{"post_id":"cl9vgzkrx000uj4h2ewgo524f","category_id":"cl9vgzks00011j4h2fdg06usk","_id":"cl9vgzksb001oj4h22o6c31qs"},{"post_id":"cl9vgzks0000zj4h2hgni47mg","category_id":"cl9vgzks9001kj4h20h0mgc2v","_id":"cl9vgzksc001rj4h206b24if8"},{"post_id":"cl9vgzksd001tj4h2cla8a04z","category_id":"cl9vgzkrq0009j4h22v3c0jsz","_id":"cl9vgzkse001vj4h270vz446w"}],"PostTag":[{"post_id":"cl9vgzkrj0001j4h2fd8z7qyy","tag_id":"cl9vgzkrn0005j4h2etv5796a","_id":"cl9vgzkrq000bj4h258ae952v"},{"post_id":"cl9vgzkrl0003j4h273wq3cyr","tag_id":"cl9vgzkrq000aj4h215w2fifg","_id":"cl9vgzkrt000ij4h27w8c9dyp"},{"post_id":"cl9vgzkrp0007j4h20rmkge8x","tag_id":"cl9vgzkrs000gj4h28orm5o0m","_id":"cl9vgzkrv000oj4h23w64hqzq"},{"post_id":"cl9vgzkrt000jj4h2550zdjrm","tag_id":"cl9vgzkrs000gj4h28orm5o0m","_id":"cl9vgzkrw000qj4h2b3gjhg8y"},{"post_id":"cl9vgzkrr000cj4h25hjoh58f","tag_id":"cl9vgzkru000mj4h21w1cbk6s","_id":"cl9vgzkrz000vj4h25hmqey08"},{"post_id":"cl9vgzkrw000pj4h297k7335p","tag_id":"cl9vgzkrs000gj4h28orm5o0m","_id":"cl9vgzks0000yj4h2eomo50q7"},{"post_id":"cl9vgzkrr000dj4h27e9kcw6a","tag_id":"cl9vgzkrx000tj4h2bubm8s79","_id":"cl9vgzks30013j4h21hprc9yo"},{"post_id":"cl9vgzkrt000hj4h2451oedr5","tag_id":"cl9vgzkrx000tj4h2bubm8s79","_id":"cl9vgzks60019j4h29sj9hotk"},{"post_id":"cl9vgzkrv000nj4h2b9hr7bpx","tag_id":"cl9vgzks40017j4h23go80dcr","_id":"cl9vgzks7001fj4h2fyoab03l"},{"post_id":"cl9vgzkrx000uj4h2ewgo524f","tag_id":"cl9vgzks6001dj4h2af5ih1oh","_id":"cl9vgzks9001jj4h2fya3a486"},{"post_id":"cl9vgzkrz000wj4h20cshdw6f","tag_id":"cl9vgzks8001ij4h2gci6fikc","_id":"cl9vgzksa001nj4h2gcnrgcjv"},{"post_id":"cl9vgzks0000zj4h2hgni47mg","tag_id":"cl9vgzks9001mj4h26qba90xj","_id":"cl9vgzksb001qj4h260o084d3"},{"post_id":"cl9vgzks30014j4h2dok31cls","tag_id":"cl9vgzksb001pj4h2c3ly2rgf","_id":"cl9vgzksc001sj4h280ks9ges"},{"post_id":"cl9vgzksd001tj4h2cla8a04z","tag_id":"cl9vgzksd001uj4h21ria419l","_id":"cl9vgzkse001wj4h291e02yi0"}],"Tag":[{"name":"周报","_id":"cl9vgzkrn0005j4h2etv5796a"},{"name":"floyd","_id":"cl9vgzkrq000aj4h215w2fifg"},{"name":"树模型","_id":"cl9vgzkrs000gj4h28orm5o0m"},{"name":"prim","_id":"cl9vgzkru000mj4h21w1cbk6s"},{"name":"spark","_id":"cl9vgzkrx000tj4h2bubm8s79"},{"name":"dijkstra","_id":"cl9vgzks40017j4h23go80dcr"},{"name":"经验总结","_id":"cl9vgzks6001dj4h2af5ih1oh"},{"name":"late acceptance","_id":"cl9vgzks8001ij4h2gci6fikc"},{"name":"alogithm","_id":"cl9vgzks9001mj4h26qba90xj"},{"name":"模拟退火","_id":"cl9vgzksb001pj4h2c3ly2rgf"},{"name":"资源均分","_id":"cl9vgzksd001uj4h21ria419l"}]}}