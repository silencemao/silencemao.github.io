{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"source/images/exp.gif","path":"images/exp.gif","modified":0,"renderable":0},{"_id":"source/images/lahc.jpg","path":"images/lahc.jpg","modified":0,"renderable":0},{"_id":"source/images/sa.png","path":"images/sa.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default_bak.png","path":"img/default_bak.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon_bak.png","path":"img/favicon_bak.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/images/entropy.png","path":"images/entropy.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"6656a2655fb56b2658d854985a452c616b4804d8","modified":1635666750872},{"_id":"source/about/index.md","hash":"5caedd72e78c0eb25cc94b0663f05a74f0d8a34e","modified":1622812420076},{"_id":"source/_posts/.DS_Store","hash":"469cc6dd25d6fcc01b9c67060637bcf79e92ab41","modified":1641258205516},{"_id":"source/_posts/Floyd算法.md","hash":"1edf8217c0bb7f023ca3db60e5e318aa48a1bc8d","modified":1622812420074},{"_id":"source/_posts/Hive-SQL日常总结.md","hash":"5e49d82a03b90ff4d859d5102e87f0ab0d9b1d37","modified":1625840049036},{"_id":"source/_posts/Linux下压缩隐藏文件.md","hash":"211c3e129c6692fc421712b59b312dcee7dae0a3","modified":1622812420075},{"_id":"source/_posts/Prim算法.md","hash":"14c8af6ea5185a244679742acad113249e16d10a","modified":1622812420075},{"_id":"source/_posts/Spark-使用总结.md","hash":"d3b24e31f632b0c7bc9c061f37e406c6d465e5ac","modified":1626794066272},{"_id":"source/_posts/dijkstra算法.md","hash":"8edd695fbc45d1cefffbc379cbf0d5a173b3e07e","modified":1622812420075},{"_id":"source/_posts/工作心得总结.md","hash":"53920a53e3b9b2d49a4623bc90420ae0b585c7fa","modified":1625890880657},{"_id":"source/_posts/延迟接受算法.md","hash":"bb58814d1c24809ccd64fbe8bf6275e76447bb57","modified":1641189746319},{"_id":"source/_posts/排课程.md","hash":"e996c0f3e31e2b0f31ebb6a61966deaf85905126","modified":1622812420076},{"_id":"source/_posts/模拟退火算法.md","hash":"bd15a633a13b2192864881b1472dd725dfabc511","modified":1641189780925},{"_id":"source/_posts/资源均分.md","hash":"727411420fd0edf04395e3812e614b4affdb93f8","modified":1622818986884},{"_id":"source/categories/index.md","hash":"e2368480d2b74efe2773a3edcf6bf6b9ba7a48f2","modified":1622812420076},{"_id":"source/images/.DS_Store","hash":"66d1a65dfe27a9353cc517eba342f4d51afa70b1","modified":1635666772607},{"_id":"source/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1622812420076},{"_id":"source/images/exp.gif","hash":"e64cac49e49a2af34a1496718adec20159101f22","modified":1635666034139},{"_id":"source/images/sa.png","hash":"b0d4043b33156f41b14db0a51f79ab562ac75af0","modified":1635664789003},{"_id":"source/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1622812420077},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640938356000},{"_id":"themes/fluid/.DS_Store","hash":"3084ae5aa28f24656ef2fce86e6a09f5f3e08585","modified":1641188492825},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1640938356000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1640938356000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1640938356000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1640938356000},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1640938356000},{"_id":"themes/fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1640938356000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1640938356000},{"_id":"themes/fluid/_config.yml","hash":"430ad2d90fb5ff208a0fd1e68d9cdbbdbb0913c3","modified":1641189598977},{"_id":"themes/fluid/package.json","hash":"4e3992cacd64c6888218b0346283258e8f82a27d","modified":1640938356000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1640938356000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1640938356000},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1640938356000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1640938356000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1640938356000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1640938356000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1640938356000},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1640938356000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1640938356000},{"_id":"themes/fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1640938356000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1640938356000},{"_id":"themes/fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1640938356000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1640938356000},{"_id":"themes/fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1640938356000},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1640938356000},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1640938356000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1640938356000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1640938356000},{"_id":"themes/fluid/source/.DS_Store","hash":"c83f37aa9cf990b37469d78c0435636a7ab4aec2","modified":1641188499106},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1640938356000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1640938356000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1640938356000},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1640938356000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1640938356000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1640938356000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1640938356000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1640938356000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1640938356000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1640938356000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1640938356000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1640938356000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1640938356000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1640938356000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1640938356000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640938356000},{"_id":"themes/fluid/source/img/default_bak.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640938356000},{"_id":"themes/fluid/source/img/favicon_bak.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640938356000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640938356000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640938356000},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1640938356000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1640938356000},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1640938356000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1640938356000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1640938356000},{"_id":"themes/fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1640938356000},{"_id":"themes/fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1640938356000},{"_id":"themes/fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1640938356000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"df6941bd3b860180d01fd39ee859ed2d42f4d1f0","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1640938356000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"fd5fcb6a61ad865197a778eeae889b80484227dd","modified":1640938356000},{"_id":"themes/fluid/source/img/.DS_Store","hash":"5ab224c0daf5ea94f6ac1f703a7e882075a0624f","modified":1641189622773},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1640938356000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1640938356000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1640938356000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1640938356000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"08b455b848b21d57e0563b87071c4bae2b63bafe","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"c2d8bfd04bf0734b387c049402b46a06a05fc582","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"80098e8354069631bde8edcd1181a53091a92949","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"a2993f23701de9a83e3f428300e62c5c52b4ff4b","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"5e86487de0f16c30ca3e16460ab94b57620e31c5","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1640938356000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1640938356000},{"_id":"themes/fluid/source/img/default.png","hash":"7100cdb0780457a27fd9fe21b1fd8946d7167f64","modified":1641188523611},{"_id":"themes/fluid/source/img/favicon.png","hash":"dcd98894e26f76ba85f55da48c0653d143d979d0","modified":1641188472057},{"_id":"public/local-search.xml","hash":"d4fd1d52da4c71dfec2b36916283a50373e24fad","modified":1641737150377},{"_id":"public/about/index.html","hash":"f8a918d79169bda587a45f06f1c2c4906479f0f6","modified":1641189793056},{"_id":"public/categories/index.html","hash":"f732ebe2e1ec886528025c51bf9c244f40b22a7b","modified":1641736643440},{"_id":"public/2021/07/20/Spark-使用总结/index.html","hash":"7dfebdb53eabcee83f7478806c949c4c509563fa","modified":1641189793056},{"_id":"public/archives/index.html","hash":"0848684d5cc7a765a0c9f98ef899c7ef43ff2086","modified":1641736643440},{"_id":"public/archives/page/2/index.html","hash":"7541349fa09bfcd44f2c324a9ae4de00f0fa44df","modified":1641736643440},{"_id":"public/archives/2020/index.html","hash":"e7323c4082850df22cfd21fa54ed9688d6cf138a","modified":1641736643440},{"_id":"public/archives/2020/05/index.html","hash":"ec3fe7d7472af427f404f012d2442ad07fb7636a","modified":1641736643440},{"_id":"public/archives/2020/07/index.html","hash":"ef34946faf3a7b5a6db96991a86db20fbe8b73ad","modified":1641736643440},{"_id":"public/archives/2021/index.html","hash":"8a31472ad6968c10eecc662acc40bab0c92c298c","modified":1641736643440},{"_id":"public/archives/2021/01/index.html","hash":"a7a8e5de660f6e810af214a66a51b59003be4d06","modified":1641736643440},{"_id":"public/archives/2021/04/index.html","hash":"16d5a3b2def10161e0371baf71027c3df450e4d5","modified":1641736643440},{"_id":"public/archives/2021/06/index.html","hash":"8c1408fbc43f4ead030acc574ad4879907b85120","modified":1641736643440},{"_id":"public/archives/2021/07/index.html","hash":"f74f023c596e3e9b689f27be3b5ca94b4611b5fa","modified":1641736643440},{"_id":"public/archives/2021/10/index.html","hash":"511f9c09da305f59f7f9a4546a6c03799075962d","modified":1641736643440},{"_id":"public/categories/算法/index.html","hash":"bb8b817aa07c9a1bd9aa663108e4030b0f2fdea3","modified":1641189793056},{"_id":"public/categories/Linux/index.html","hash":"158d2e0f84f4ea5d8ea76c2ee4648f071f65ea53","modified":1641189793056},{"_id":"public/categories/SQL/index.html","hash":"7356dac0d381772f4e464f7005ffc75702a4bae1","modified":1641189793056},{"_id":"public/categories/总结/index.html","hash":"e4c781524b80fa67cc7d3a8ceea2d2b0bdb43d46","modified":1641189793056},{"_id":"public/categories/leetcode/index.html","hash":"1db1adc36900ede31f8dd25d8c131a16cd6da28b","modified":1641189793056},{"_id":"public/page/2/index.html","hash":"587d7dc24dfa57164be9646bc5d29605937cbed6","modified":1641736643440},{"_id":"public/tags/floyd/index.html","hash":"f4cd064dbd64d519c4a6fd6e95d482bb93437269","modified":1641189793056},{"_id":"public/tags/prim/index.html","hash":"0ee4bbd3535aa36b42d604a959058601e4410675","modified":1641189793056},{"_id":"public/tags/dijkstra/index.html","hash":"2f0b3f521db4af6f43d052e5d312ebfb37deffd7","modified":1641189793056},{"_id":"public/tags/经验总结/index.html","hash":"d34364ee0406efa6fc6ccbdec4740bc48318bfc0","modified":1641189793056},{"_id":"public/tags/late-acceptance/index.html","hash":"4dd412b9a72d36bfeae7a87731158cf17e885352","modified":1641189793056},{"_id":"public/tags/alogithm/index.html","hash":"86e14a5f065e0567cb8e131aab842b76bf91fdf2","modified":1641189793056},{"_id":"public/tags/模拟退火/index.html","hash":"9379f0f8d7cced05d63e222c4a95fee01220c5ac","modified":1641189793056},{"_id":"public/tags/资源均分/index.html","hash":"027d01fed4c0a52b33125003aa821e466ca03301","modified":1641189793056},{"_id":"public/404.html","hash":"2b6d9f8af8fda31daf609fb6404e297ca58ff74a","modified":1641189793056},{"_id":"public/tags/index.html","hash":"b58a6781f47db160cb7c0c557ff6999c5111eeaa","modified":1641736643440},{"_id":"public/links/index.html","hash":"eef3e9bd228aaaf2bbac66c52faf5cd64083fd34","modified":1641189793056},{"_id":"public/2021/10/30/模拟退火算法/index.html","hash":"ddec294513e57db11dfe859de7f257f59dbd64a6","modified":1641736643440},{"_id":"public/2021/07/10/工作心得总结/index.html","hash":"be17058f015608335cd50def547a9c8ff431f2aa","modified":1641189793056},{"_id":"public/2021/06/04/资源均分/index.html","hash":"0f61ab23d71142980a18876c62764e6683b9cb69","modified":1641189793056},{"_id":"public/2021/04/11/Prim算法/index.html","hash":"63ae5fd6173d661cf57ef62a92c33f222a86816a","modified":1641189793056},{"_id":"public/2021/04/11/Floyd算法/index.html","hash":"8edaf7f4406da8f2e2effae7120b268490b2afcb","modified":1641189793056},{"_id":"public/2021/01/10/排课程/index.html","hash":"2b81dd26e8d2109eefbfe462021976a6dd43a33e","modified":1641189793056},{"_id":"public/2020/07/18/延迟接受算法/index.html","hash":"2c14ce574136201b8f2663cb8966ebabf6894b3e","modified":1641189793056},{"_id":"public/2020/07/05/dijkstra算法/index.html","hash":"84381e01728e6121161f145a8c70b17ab0eec84d","modified":1641189793056},{"_id":"public/2020/05/16/Hive-SQL日常总结/index.html","hash":"6cdd9094e4a6cf808c6e95dd012dc265cf144305","modified":1641189793056},{"_id":"public/2020/05/03/Linux下压缩隐藏文件/index.html","hash":"ebc4c57b8d07f78d52ff4023258c3414039c0235","modified":1641189793056},{"_id":"public/index.html","hash":"dadfb048168f1d483bdadaba2301575188a54f7b","modified":1641737150377},{"_id":"public/images/1.jpg","hash":"545f5ee3fb242553ffb446d718982ff7b38dc979","modified":1641189793056},{"_id":"public/images/exp.gif","hash":"e64cac49e49a2af34a1496718adec20159101f22","modified":1641189793056},{"_id":"public/images/sa.png","hash":"b0d4043b33156f41b14db0a51f79ab562ac75af0","modified":1641189793056},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1641189793056},{"_id":"public/img/default_bak.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1641189793056},{"_id":"public/img/favicon_bak.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1641189793056},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1641189793056},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1641189793056},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1641189793056},{"_id":"public/images/lahc.jpg","hash":"06889f8a086b8fcc07cbe96a6d266b31094af2c8","modified":1641189793056},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1641189793056},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1641189793056},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1641189793056},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1641189793056},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1641189793056},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1641189793056},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1641189793056},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1641189793056},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1641189793056},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1641189793056},{"_id":"public/img/default.png","hash":"7100cdb0780457a27fd9fe21b1fd8946d7167f64","modified":1641189793056},{"_id":"public/img/favicon.png","hash":"dcd98894e26f76ba85f55da48c0653d143d979d0","modified":1641189793056},{"_id":"source/_posts/决策树.md","hash":"ef28618c1b05703badfe86c23fcec7b4ed147861","modified":1641737141839},{"_id":"source/images/entropy.png","hash":"595eae926dd97a9ed8d2493229d8a8fdb5d879da","modified":1641732423258},{"_id":"public/archives/2022/index.html","hash":"db7a059a4a8562881e69ddebe0bb8fc8fff8b00b","modified":1641736643440},{"_id":"public/archives/2022/01/index.html","hash":"d28a0862c16055ecb62dc236d19d245f1f277920","modified":1641736643440},{"_id":"public/categories/机器学习/index.html","hash":"aafe398fc7860bae9815b9efd9fe42b9b40e0a3d","modified":1641736643440},{"_id":"public/tags/树模型/index.html","hash":"280f0b80217c2b574b780599a743e048b8f1baec","modified":1641736643440},{"_id":"public/2022/01/03/决策树/index.html","hash":"a95c656a8b74387cd128ae71cd787e8239c479e5","modified":1641737150377},{"_id":"public/images/entropy.png","hash":"595eae926dd97a9ed8d2493229d8a8fdb5d879da","modified":1641736643440}],"Category":[{"name":"算法","_id":"ckxya11ea00049qh21xnwbseo"},{"name":"Linux","_id":"ckxya11ee00099qh298cs9plw"},{"name":"SQL","_id":"ckxya11eh000f9qh2aqd63dot"},{"name":"总结","_id":"ckxya11ek000l9qh25ko4ecip"},{"name":"leetcode","_id":"ckxya11en000s9qh2bnkc1rz4"},{"name":"机器学习","_id":"cky7bly800001gth2d8m68tdr"}],"Data":[],"Page":[{"title":"about","date":"2020-05-03T08:39:31.000Z","name":"silencemao","email":"silencekxm@gmail.com","_content":"\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","source":"about/index.md","raw":"\ntitle: about\ndate: 2020-05-03 16:39:31\nname: silencemao\nemail: silencekxm@gmail.com\n---\n\n&emsp;&emsp;代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。\n&emsp;&emsp;email: silencekxm@gmail.com\n","updated":"2021-06-04T13:13:40.076Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckxya11e300009qh2d7wufvx5","content":"<p>  代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。   email: silencekxm@gmail.com</p>\n","site":{"data":{}},"wordcount":54,"excerpt":"","more":"<p>  代码、读书、足球，热爱生活。欢迎大家交流技术、读书心得。   email: silencekxm@gmail.com</p>\n"},{"title":"categories","date":"2020-05-03T09:01:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-05-03 17:01:42\ntype: \"categories\"\n---\n","updated":"2021-06-04T13:13:40.076Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxya11e800029qh268p1dok1","content":"\n","site":{"data":{}},"wordcount":0,"excerpt":"","more":"\n"}],"Post":[{"title":"Floyd算法","mathjax":true,"date":"2021-04-11T02:54:52.000Z","_content":"\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","source":"_posts/Floyd算法.md","raw":"---\ntitle: Floyd算法\nmathjax: true\ndate: 2021-04-11 10:54:52\ncategories: 算法\ntags: floyd\n---\n\n## Floyd 算法\n\n&ensp;&ensp;Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。\n\n<!--more-->\n\n## 算法描述\n\n&ensp;&ensp;给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。\n\n我们要计算任意两个顶点之间最短距离。\n\n1、**例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离**。\n\n2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？\n\n3、**遍历**，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) < Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。\n\n4、因此，**我们在计算的过程中可以不断的更新两个点之间的最短距离**。\n\n## 代码逻辑\n\n&ensp;&ensp;&ensp;代码很好理解，就是**三重循环**，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则$tPath[i][j]=-1$，表示二者之间直接连接就是最短路径。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\n//https://juejin.im/post/5cc79c93f265da035b61a42e\n\ntype Floyd struct {\n\ttTwoPointDis [][]int\n\ttPath        [][]int\n}\n\nfunc (f *Floyd) Init(tDis [][]int) {\n\tf.tTwoPointDis = tDis\n\n\tr := len(tDis)\n\n\tf.tPath = make([][]int, r)\n\tfor i := range f.tPath {\n\t\tf.tPath[i] = make([]int, r)\n\t}\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tf.tPath[i][j] = -1\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) solve() {\n\tfmt.Println(\"before\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\tr := len(f.tTwoPointDis)\n\tfor k := 0; k < r; k++ { // 媒介\n\t\tfor i := 0; i < r; i++ {\n\t\t\tfor j := 0; j < r; j++ {\n\t\t\t\tif f.tTwoPointDis[i][j] > (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) {\n\t\t\t\t\tf.tPath[i][j] = k // 记录媒介\n\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"after\")\n\tfor _, tNums := range f.tTwoPointDis {\n\t\tfor _, tNum := range tNums {\n\t\t\tfmt.Print(tNum, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\tfor i := 0; i < r; i++ {\n\t\tfor j := 0; j < r; j++ {\n\t\t\tif i != j {\n\t\t\t\tfmt.Println(f.getPath(i, j))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (f *Floyd) getPath(i, j int) string { // 打印路径\n\tif f.tPath[i][j] == -1 {\n\t\treturn \" \" + strconv.Itoa(i) + \" \" + strconv.Itoa(j)\n\t} else {\n\t\tk := f.tPath[i][j]\n\t\treturn f.getPath(i, k) + f.getPath(k, j)\n\t}\n}\n\nfunc main() {\n\ttDis := [][]int{\n\t\t{0, 2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\tf := new(Floyd)\n\tf.Init(tDis)\n\tf.solve()\n}\n\n```\n\n## 结语\n\n&ensp;&ensp;ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。\n\n","slug":"Floyd算法","published":1,"updated":"2021-06-04T13:13:40.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11e600019qh25qwxhz48","content":"<h2 id=\"floyd-算法\">Floyd 算法</h2>\n<p>  Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>\n<span id=\"more\"></span>\n<h2 id=\"算法描述\">算法描述</h2>\n<p>  给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\">代码逻辑</h2>\n<p>   代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则<span class=\"math inline\">\\(tPath[i][j]=-1\\)</span>，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>)<br><br><span class=\"hljs-comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span><br><br><span class=\"hljs-keyword\">type</span> Floyd <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttTwoPointDis [][]<span class=\"hljs-keyword\">int</span><br>\ttPath        [][]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tf.tTwoPointDis = tDis<br><br>\tr := <span class=\"hljs-built_in\">len</span>(tDis)<br><br>\tf.tPath = <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, r)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f.tPath &#123;<br>\t\tf.tPath[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, r)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\tf.tPath[i][j] = <span class=\"hljs-number\">-1</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;before&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br>\tr := <span class=\"hljs-built_in\">len</span>(f.tTwoPointDis)<br>\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; r; k++ &#123; <span class=\"hljs-comment\">// 媒介</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;<br>\t\t\t\t\tf.tPath[i][j] = k <span class=\"hljs-comment\">// 记录媒介</span><br>\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;after&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> i != j &#123;<br>\t\t\t\tfmt.Println(f.getPath(i, j))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">getPath</span><span class=\"hljs-params\">(i, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> &#123; <span class=\"hljs-comment\">// 打印路径</span><br>\t<span class=\"hljs-keyword\">if</span> f.tPath[i][j] == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(i) + <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(j)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tk := f.tPath[i][j]<br>\t\t<span class=\"hljs-keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\tf := <span class=\"hljs-built_in\">new</span>(Floyd)<br>\tf.Init(tDis)<br>\tf.solve()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>  ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>\n","site":{"data":{}},"wordcount":2242,"excerpt":"<h2 id=\"floyd-算法\">Floyd 算法</h2>\n<p>  Floyd算法也是求最短路径的一种算法，主要用于计算两两节点之间最短的距离。不像dijstra是固定一个起点，在Floyd中每一个点都可以是起点，用来计算它到其它节点之间的最短距离。其实Floyd就像是执行了n次dijstra算法。</p>","more":"<h2 id=\"算法描述\">算法描述</h2>\n<p>  给定一个带权重的图G=(V,E)，可以存在负权(但不能存在负权环路)。V代表顶点的集合，E代表顶点之间的权重。</p>\n<p>我们要计算任意两个顶点之间最短距离。</p>\n<p>1、<strong>例如：AB两个顶点之间的最短距离不一定是A直接到B的距离，有可能是A经过C之后再去B得到的最短距离</strong>。</p>\n<p>2、我们可以称C为AB的媒介，那怎样去找这些媒介呢？</p>\n<p>3、<strong>遍历</strong>，没错就是遍历其它点，若存在一个媒介可以是Dis(A, C) + Dis(C, B) &lt; Dis(A, B)，则我们就可以更新Dis(A, B)=Dis(A, C) + Dis(C, B)。最终遍历完一遍，我们就能知道AB之间的最短距离了。</p>\n<p>4、因此，<strong>我们在计算的过程中可以不断的更新两个点之间的最短距离</strong>。</p>\n<h2 id=\"代码逻辑\">代码逻辑</h2>\n<p>   代码很好理解，就是<strong>三重循环</strong>，最外层表示媒介，里面两层表示两个端点。同时我们用tPath这个变量记录任意两点之间最短距离经过的路径，若两点之间不存在媒介，则<span class=\"math inline\">\\(tPath[i][j]=-1\\)</span>，表示二者之间直接连接就是最短路径。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;strconv&quot;</span><br>)<br><br><span class=\"hljs-comment\">//https://juejin.im/post/5cc79c93f265da035b61a42e</span><br><br><span class=\"hljs-keyword\">type</span> Floyd <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttTwoPointDis [][]<span class=\"hljs-keyword\">int</span><br>\ttPath        [][]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tf.tTwoPointDis = tDis<br><br>\tr := <span class=\"hljs-built_in\">len</span>(tDis)<br><br>\tf.tPath = <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, r)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f.tPath &#123;<br>\t\tf.tPath[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, r)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\tf.tPath[i][j] = <span class=\"hljs-number\">-1</span><br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;before&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br>\tr := <span class=\"hljs-built_in\">len</span>(f.tTwoPointDis)<br>\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; r; k++ &#123; <span class=\"hljs-comment\">// 媒介</span><br>\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> f.tTwoPointDis[i][j] &gt; (f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]) &#123;<br>\t\t\t\t\tf.tPath[i][j] = k <span class=\"hljs-comment\">// 记录媒介</span><br>\t\t\t\t\tf.tTwoPointDis[i][j] = f.tTwoPointDis[i][k] + f.tTwoPointDis[k][j]<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;after&quot;</span>)<br>\t<span class=\"hljs-keyword\">for</span> _, tNums := <span class=\"hljs-keyword\">range</span> f.tTwoPointDis &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tNum := <span class=\"hljs-keyword\">range</span> tNums &#123;<br>\t\t\tfmt.Print(tNum, <span class=\"hljs-string\">&quot; &quot;</span>)<br>\t\t&#125;<br>\t\tfmt.Println()<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; r; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; r; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> i != j &#123;<br>\t\t\t\tfmt.Println(f.getPath(i, j))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Floyd)</span> <span class=\"hljs-title\">getPath</span><span class=\"hljs-params\">(i, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> &#123; <span class=\"hljs-comment\">// 打印路径</span><br>\t<span class=\"hljs-keyword\">if</span> f.tPath[i][j] == <span class=\"hljs-number\">-1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(i) + <span class=\"hljs-string\">&quot; &quot;</span> + strconv.Itoa(j)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tk := f.tPath[i][j]<br>\t\t<span class=\"hljs-keyword\">return</span> f.getPath(i, k) + f.getPath(k, j)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\tf := <span class=\"hljs-built_in\">new</span>(Floyd)<br>\tf.Init(tDis)<br>\tf.solve()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>  ok，这就是floyd算法，我们不能被它的名字给吓住了。其实就是利用三重循环，计算图中任意两点的最短距离。</p>"},{"title":"Linux下压缩隐藏文件","date":"2020-05-03T10:28:53.000Z","_content":"\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","source":"_posts/Linux下压缩隐藏文件.md","raw":"---\ntitle: Linux下压缩隐藏文件\ndate: 2020-05-03 18:28:53\ncategories: Linux\ntags:\n---\n\n# Linux下压缩文件\n\n&emsp;&emsp;之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。\n\n```shell\ntar zcvf abc.tar.gz abc/*   // 压缩\ntar zxvf abc.tar.gz         // 解压\n```\n\n&emsp;&emsp;最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是**压缩指定文件夹下面的非隐藏文件与文件夹**。\n\n&emsp;&emsp;因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要**显示的指定**出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：\n\n<!--more-->\n\n## 压缩非隐藏文件\n\n&emsp;&emsp;注意只压缩非隐藏文件，不包括文件夹的话是：\n\n```bash\ntar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹\n```\n\n&emsp;&emsp;压缩所有的非隐藏文件，包括文件夹：\n\n```shell\ntar zcvf abc.tar.gz *       \n```\n\n## 压缩隐藏文件\n\n&emsp;&emsp;如果要压缩隐藏文件的话，要显示的指示出来\n\n&emsp;&emsp;压缩当前文件下的隐藏文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹\".\"和“..”   \n```\n\n上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。\n\n&emsp;&emsp;压缩当前文件夹下的所有文件夹以及隐藏的文件：\n\n```shell\ntar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  \n```\n\n这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。\n\n","slug":"Linux下压缩隐藏文件","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11e900039qh20kkx8m7s","content":"<h1 id=\"linux下压缩文件\">Linux下压缩文件</h1>\n<p>  之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz abc/*   // 压缩<br>tar zxvf abc.tar.gz         // 解压<br></code></pre></td></tr></table></figure>\n<p>  最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>  因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>\n<span id=\"more\"></span>\n<h2 id=\"压缩非隐藏文件\">压缩非隐藏文件</h2>\n<p>  注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹<br></code></pre></td></tr></table></figure>\n<p>  压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz *       <br></code></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\">压缩隐藏文件</h2>\n<p>  如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>  压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹&quot;.&quot;和“..”   <br></code></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。</p>\n<p>  压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  <br></code></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>\n","site":{"data":{}},"wordcount":693,"excerpt":"<h1 id=\"linux下压缩文件\">Linux下压缩文件</h1>\n<p>  之前在压缩文件的时候一直使用tar这个命令，因为一般压缩的时候都是对我们能“看见”的文件进行压缩，没有考虑过那些看不见的文件，即“隐藏”文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz abc/*   // 压缩<br>tar zxvf abc.tar.gz         // 解压<br></code></pre></td></tr></table></figure>\n<p>  最近在服务器上压缩文件时，需要用到里面的隐藏文件，想当然的进行了上面的压缩方式，解压之后发现找不到隐藏文件。一阵查找资料后才发想，上面的做法只是<strong>压缩指定文件夹下面的非隐藏文件与文件夹</strong>。</p>\n<p>  因此查找资料后发现，对于隐藏和非隐藏文件的压缩方式还有些不同。如果想要对隐藏的文件做处理，需要<strong>显示的指定</strong>出来才可以。我们都知道隐藏的文件或文件夹都是以“.”开头的。所以就需要用到正则表达式来处理了：</p>","more":"<h2 id=\"压缩非隐藏文件\">压缩非隐藏文件</h2>\n<p>  注意只压缩非隐藏文件，不包括文件夹的话是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">tar zcvf abc.tar.gz *.*   // 压缩当前文件夹下非隐藏文件不包括文件夹<br></code></pre></td></tr></table></figure>\n<p>  压缩所有的非隐藏文件，包括文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz *       <br></code></pre></td></tr></table></figure>\n<h2 id=\"压缩隐藏文件\">压缩隐藏文件</h2>\n<p>  如果要压缩隐藏文件的话，要显示的指示出来</p>\n<p>  压缩当前文件下的隐藏文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]*   // 只压缩当前文件夹下隐藏文件排除两个隐藏文件夹&quot;.&quot;和“..”   <br></code></pre></td></tr></table></figure>\n<p>上面的.[!.]其实就是正则表达式，表示第一个字符是“.”，第二个字符不是\".\"，第三个以及后面可以是任意字符。</p>\n<p>  压缩当前文件夹下的所有文件夹以及隐藏的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zcvf abc.tar.gz .[!.]* *  // 压缩当前文件夹下所有文件和目录包括隐藏文件  <br></code></pre></td></tr></table></figure>\n<p>这条命令比上一条命令多了一个*，表示当前文件夹下的所有文件以及文件夹。</p>"},{"title":"Hive/SQL日常总结","date":"2020-05-16T01:39:36.000Z","_content":"\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n&ensp;&ensp;直接写入一个分区内，相当于追加到对应的分区内。\n\n```sql\nInsert into table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n```\n\n\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n## 5、删除文件\n\n### 1、删除文件\n\n```shell\nhadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx\n\n```\n\n上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息\n\n```shell\nhadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx\n```\n\n### 2、删除分区\n\n```shell\nalter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);\n\n```\n\n上述命令需要在hive客户端中执行。\n\n## 6、时间处理\n\n### 1、转换为时间戳\n\n标准格式是指'2021-06-30 10:10:00'这种格式，即'yyyy-MM-dd HH:mm:ss'，\n\n```sql\nunix_timestamp('2021-06-30 10:10:10')\n```\n\n若时间不是标准格式的，比如 '20210630'这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的\n\n```sql\nunix_timestamp('20210630', 'yyyyMMdd')\n```\n\n### 2、时间戳转换为日期\n\n时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。\n\n```sql\nfrom_unixtime('1625839005', 'yyyy-MM-dd HH:mm:ss')/from_unixtime('1625839005', 'yyyy-MM-dd')\n```\n\n对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即**对字符串进行截取指定长度**，这个在mysql和hivesql中是由一些差异的。**在mysql中有left，right两个函数，但是在hive中可以使用substr来做**。\n\n```sql\nfrom_unixtime((cast(substr('1625839005000', 0, 10) as bigint)), 'yyyy-MM-dd HH:mm:ss')\n```\n\n## 7、分位数\n\n在hivesql中，取分位数还是比较简单，有两个函数可供使用，\n\n```sql\npercentile(col, p)\n```\n\ncol为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数\n\n```sql\npercentile_approx(col, array(0.2, 0.3), 9999)\n```\n\ncol也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数\n\n","source":"_posts/Hive-SQL日常总结.md","raw":"---\ntitle: Hive/SQL日常总结\ndate: 2020-05-16 09:39:36\ncategories: SQL\ntags:\n---\n\n# Hive/SQL日常总结\n\n&emsp;&emsp;说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。\n\n<!--more-->\n\n## 1、如何比较两个表的内容是否完全一致\n\n### （1）、分组 inner join\n\n&emsp;&emsp;这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。\n\n&emsp;&emsp;首先对t1按行分组，计算分组的条数num1。\n\n&emsp;&emsp;然后对t2按行分组，计算分组的条数num2。\n\n&emsp;&emsp;最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。\n\n&emsp;&emsp;若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。\n\n&emsp;&emsp;假设表结构如下所示，只有两列\n\n|  id  | name |\n| :--: | :--: |\n| xx1  | Tom  |\n| xx2  | Jone |\n\n```sql\n对t1进行分组\nselect id, name count(*) as num \nfrom t1 \ngroup by id, name;\n\n对t2进行分组\nselect id, name count(*) as num \nfrom t2 \ngroup by id, name;\n\n使用t1 inner join t2\nselect * \n  (select id, name count(*) as num \n  from t1 \n  group by id, name) as tmp1\ninner join\n   (select id, name count(*) as num \n    from t2 \n    group by id, name) as tmp2\n on tmp1.id=tmp2.id and tmp1.name=tmp2.name;\n```\n\n&emsp;&emsp;若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。\n\n### （2）、minus 做减法\n\n&emsp;&emsp;另一种做法是直接用两个表相互做减法，看返回的是否均为空。\n\n```sql\nselect * from t1\nminus \nselect * from t2;\n\nselect * from t2\nminus\nselect * from t1;\n```\n\n如果返回的内容均为空的话，就说明两个表的内容完全一致，但是**对于表中有重复的行的话这种方法就不适用了。** 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。\n\n[](https://zhuanlan.zhihu.com/p/113617244)\n\n## 2、分区表增加新的字段\n\n&emsp;&emsp;之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。\n\n```sql\nalter table table_nam add columns(c1 int);\n```\n\n添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。\n\n对于非空分区表添加新的字段的正确方式：\n\n```sql\nalter table table_name add columns(c1 int) cascade;\n```\n\n[](https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636)\n\n[](https://blog.csdn.net/aijiudu/article/details/79066835)\n\n\n\n## 3、将一个表的内容写入到另一个表中\n\n&emsp;&emsp;如果是覆盖原始数据的话，直接使用insert overwrite\n\n```sql\nInsert overwrite table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n\n```\n\n上面是将同一个表中一个分区的写入到另一个分区内。\n\n&ensp;&ensp;直接写入一个分区内，相当于追加到对应的分区内。\n\n```sql\nInsert into table table_name partition(dt=’t’)\n       Select col1, col2, col2,….\n       From table_name\n       Where dt=’t-1’\n```\n\n\n\n**注意**：分区字段要写完整\n\n​      选择数据时不能使用 select *， 因为select * 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的，      即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。\n\n因此我们在选择数据时，要用select 选出那7个非分区字段。\n\n## 4、创建表的方式\n\n### 1、直接建表法\n\n```sql\ncreate table t1(\n    id      int,\n    name    string,\n    hobby   array<string>,\n    add     map<String,string>\n)\nrow format delimited\nfields terminated by ','\ncollection items terminated by '-'\nmap keys terminated by ':'\n;\n```\n\n然后load data进入到表中\n\n```sql\nload data local inpath '/user/hive/warehouse/...data' overwrite into table t1;\n```\n\n### 2、select 方法\n\n```sql\ncreate table t1 as\nselect\n    id,\n    name\nfrom t2;\n```\n\n### 3、like建表法\n\n```sql\ncreate table t1\nlike t2;\n```\n\n## 5、删除文件\n\n### 1、删除文件\n\n```shell\nhadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx\n\n```\n\n上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息\n\n```shell\nhadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx\n```\n\n### 2、删除分区\n\n```shell\nalter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);\n\n```\n\n上述命令需要在hive客户端中执行。\n\n## 6、时间处理\n\n### 1、转换为时间戳\n\n标准格式是指'2021-06-30 10:10:00'这种格式，即'yyyy-MM-dd HH:mm:ss'，\n\n```sql\nunix_timestamp('2021-06-30 10:10:10')\n```\n\n若时间不是标准格式的，比如 '20210630'这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的\n\n```sql\nunix_timestamp('20210630', 'yyyyMMdd')\n```\n\n### 2、时间戳转换为日期\n\n时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。\n\n```sql\nfrom_unixtime('1625839005', 'yyyy-MM-dd HH:mm:ss')/from_unixtime('1625839005', 'yyyy-MM-dd')\n```\n\n对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即**对字符串进行截取指定长度**，这个在mysql和hivesql中是由一些差异的。**在mysql中有left，right两个函数，但是在hive中可以使用substr来做**。\n\n```sql\nfrom_unixtime((cast(substr('1625839005000', 0, 10) as bigint)), 'yyyy-MM-dd HH:mm:ss')\n```\n\n## 7、分位数\n\n在hivesql中，取分位数还是比较简单，有两个函数可供使用，\n\n```sql\npercentile(col, p)\n```\n\ncol为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数\n\n```sql\npercentile_approx(col, array(0.2, 0.3), 9999)\n```\n\ncol也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数\n\n","slug":"Hive-SQL日常总结","published":1,"updated":"2021-07-09T14:14:09.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11ec00069qh2b6yp8zhw","content":"<h1 id=\"hivesql日常总结\">Hive/SQL日常总结</h1>\n<p>  说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>\n<span id=\"more\"></span>\n<h2 id=\"如何比较两个表的内容是否完全一致\">1、如何比较两个表的内容是否完全一致</h2>\n<h3 id=\"分组-inner-join\">（1）、分组 inner join</h3>\n<p>  这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>  首先对t1按行分组，计算分组的条数num1。</p>\n<p>  然后对t2按行分组，计算分组的条数num2。</p>\n<p>  最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>  若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>  假设表结构如下所示，只有两列</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">id</th>\n<th style=\"text-align: center;\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">xx1</td>\n<td style=\"text-align: center;\">Tom</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">xx2</td>\n<td style=\"text-align: center;\">Jone</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs sql\">对t1进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t1 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>对t2进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t2 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>使用t1 <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> t2<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <br>  (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>  <span class=\"hljs-keyword\">from</span> t1 <br>  <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp1<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>   (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>    <span class=\"hljs-keyword\">from</span> t2 <br>    <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp2<br> <span class=\"hljs-keyword\">on</span> tmp1.id<span class=\"hljs-operator\">=</span>tmp2.id <span class=\"hljs-keyword\">and</span> tmp1.name<span class=\"hljs-operator\">=</span>tmp2.name;<br></code></pre></td></tr></table></figure>\n<p>  若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"minus-做减法\">（2）、minus 做减法</h3>\n<p>  另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1<br>minus <br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2;<br><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2<br>minus<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1;<br></code></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\"></a></p>\n<h2 id=\"分区表增加新的字段\">2、分区表增加新的字段</h2>\n<p>  之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_nam <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>);<br></code></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>) cascade;<br></code></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\"></a></p>\n<h2 id=\"将一个表的内容写入到另一个表中\">3、将一个表的内容写入到另一个表中</h2>\n<p>  如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> overwrite <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br><br></code></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p>  直接写入一个分区内，相当于追加到对应的分区内。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​ 选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的， 即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"创建表的方式\">4、创建表的方式</h2>\n<h3 id=\"直接建表法\">1、直接建表法</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1(<br>    id      <span class=\"hljs-type\">int</span>,<br>    name    string,<br>    hobby   <span class=\"hljs-keyword\">array</span><span class=\"hljs-operator\">&lt;</span>string<span class=\"hljs-operator\">&gt;</span>,<br>    <span class=\"hljs-keyword\">add</span>     map<span class=\"hljs-operator\">&lt;</span>String,string<span class=\"hljs-operator\">&gt;</span><br>)<br><span class=\"hljs-type\">row</span> format delimited<br>fields terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;,&#x27;</span><br>collection items terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;-&#x27;</span><br>map keys terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;:&#x27;</span><br>;<br></code></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">load data <span class=\"hljs-keyword\">local</span> inpath <span class=\"hljs-string\">&#x27;/user/hive/warehouse/...data&#x27;</span> overwrite <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> t1;<br></code></pre></td></tr></table></figure>\n<h3 id=\"select-方法\">2、select 方法</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1 <span class=\"hljs-keyword\">as</span><br><span class=\"hljs-keyword\">select</span><br>    id,<br>    name<br><span class=\"hljs-keyword\">from</span> t2;<br></code></pre></td></tr></table></figure>\n<h3 id=\"like建表法\">3、like建表法</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1<br><span class=\"hljs-keyword\">like</span> t2;<br></code></pre></td></tr></table></figure>\n<h2 id=\"删除文件\">5、删除文件</h2>\n<h3 id=\"删除文件-1\">1、删除文件</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx<br><br></code></pre></td></tr></table></figure>\n<p>上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除分区\">2、删除分区</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);<br><br></code></pre></td></tr></table></figure>\n<p>上述命令需要在hive客户端中执行。</p>\n<h2 id=\"时间处理\">6、时间处理</h2>\n<h3 id=\"转换为时间戳\">1、转换为时间戳</h3>\n<p>标准格式是指'2021-06-30 10:10:00'这种格式，即'yyyy-MM-dd HH:mm:ss'，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;2021-06-30 10:10:10&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>若时间不是标准格式的，比如 '20210630'这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;20210630&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyyMMdd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"时间戳转换为日期\">2、时间戳转换为日期</h3>\n<p>时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<span class=\"hljs-operator\">/</span>from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即<strong>对字符串进行截取指定长度</strong>，这个在mysql和hivesql中是由一些差异的。<strong>在mysql中有left，right两个函数，但是在hive中可以使用substr来做</strong>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime((<span class=\"hljs-built_in\">cast</span>(substr(<span class=\"hljs-string\">&#x27;1625839005000&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">bigint</span>)), <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"分位数\">7、分位数</h2>\n<p>在hivesql中，取分位数还是比较简单，有两个函数可供使用，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile(col, p)<br></code></pre></td></tr></table></figure>\n<p>col为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile_approx(col, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">0.3</span>), <span class=\"hljs-number\">9999</span>)<br></code></pre></td></tr></table></figure>\n<p>col也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数</p>\n","site":{"data":{}},"wordcount":3398,"excerpt":"<h1 id=\"hivesql日常总结\">Hive/SQL日常总结</h1>\n<p>  说来惭愧，工作了有一段时间了，才开始接触SQL。自己之前从来没有和SQL打过交道。为了不在工作中拖后腿，自己挤时间把《SQL必知必会》这本书看完了。看完之后虽然对SQL有了基本的认识，但是应用起来还是不太熟练，有时候还需要上网查一查相关资料才用。现在把日常使用中会用到的点记录下来，方便以后应用。</p>","more":"<h2 id=\"如何比较两个表的内容是否完全一致\">1、如何比较两个表的内容是否完全一致</h2>\n<h3 id=\"分组-inner-join\">（1）、分组 inner join</h3>\n<p>  这个问题我一直没有找到比较简洁有效的方式。看网上有一种做法，假设我们有两个表t1， t2。</p>\n<p>  首先对t1按行分组，计算分组的条数num1。</p>\n<p>  然后对t2按行分组，计算分组的条数num2。</p>\n<p>  最后两个表t1、t2进行inner join，按照所有的列名字以及num进行关联。</p>\n<p>  若num1=num2=inner join之后的条数，则说明两个表的内容完全一致。</p>\n<p>  假设表结构如下所示，只有两列</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">id</th>\n<th style=\"text-align: center;\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">xx1</td>\n<td style=\"text-align: center;\">Tom</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">xx2</td>\n<td style=\"text-align: center;\">Jone</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">对t1进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t1 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>对t2进行分组<br><span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br><span class=\"hljs-keyword\">from</span> t2 <br><span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name;<br><br>使用t1 <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span> t2<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <br>  (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>  <span class=\"hljs-keyword\">from</span> t1 <br>  <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp1<br><span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>   (<span class=\"hljs-keyword\">select</span> id, name <span class=\"hljs-built_in\">count</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> num <br>    <span class=\"hljs-keyword\">from</span> t2 <br>    <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> id, name) <span class=\"hljs-keyword\">as</span> tmp2<br> <span class=\"hljs-keyword\">on</span> tmp1.id<span class=\"hljs-operator\">=</span>tmp2.id <span class=\"hljs-keyword\">and</span> tmp1.name<span class=\"hljs-operator\">=</span>tmp2.name;<br></code></pre></td></tr></table></figure>\n<p>  若上面第一步num1值等于第二步的num2值，并且等于第三步输出的个数，说明两个表的内容是完全一样的。这个做法对于表的column比较少的情况比较方便，一旦column很大的情况下写起来就不太方便了。</p>\n<h3 id=\"minus-做减法\">（2）、minus 做减法</h3>\n<p>  另一种做法是直接用两个表相互做减法，看返回的是否均为空。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1<br>minus <br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2;<br><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t2<br>minus<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> t1;<br></code></pre></td></tr></table></figure>\n<p>如果返回的内容均为空的话，就说明两个表的内容完全一致，但是<strong>对于表中有重复的行的话这种方法就不适用了。</strong> 还有我在hue页面尝试这个方法的时候，提示我没有minus这个关键字。下次得去hive客户端试试了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/113617244\"></a></p>\n<h2 id=\"分区表增加新的字段\">2、分区表增加新的字段</h2>\n<p>  之前遇到一个问题，就是一个非空分区表需要添加新的字段，然后把数据写入进去。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_nam <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>);<br></code></pre></td></tr></table></figure>\n<p>添加完字段之后，发现写入进去之后c1这个列全为null，当时以为是自己计算的错误。然后我在写入之前查了下，发现c1这个字段的数据是有的并且不为null，但是但是写入之后就为null了。后来查资料说到是添加新的字段的方式有问题，然后只能把那个表删掉，重新建表，写入数据。</p>\n<p>对于非空分区表添加新的字段的正确方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">alter</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">add</span> columns(c1 <span class=\"hljs-type\">int</span>) cascade;<br></code></pre></td></tr></table></figure>\n<p><a href=\"https://community.cloudera.com/t5/Community-Articles/Adding-new-columns-to-an-already-partitioned-Hive-table/ta-p/245636\"></a></p>\n<p><a href=\"https://blog.csdn.net/aijiudu/article/details/79066835\"></a></p>\n<h2 id=\"将一个表的内容写入到另一个表中\">3、将一个表的内容写入到另一个表中</h2>\n<p>  如果是覆盖原始数据的话，直接使用insert overwrite</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> overwrite <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br><br></code></pre></td></tr></table></figure>\n<p>上面是将同一个表中一个分区的写入到另一个分区内。</p>\n<p>  直接写入一个分区内，相当于追加到对应的分区内。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Insert</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> table_name <span class=\"hljs-keyword\">partition</span>(dt<span class=\"hljs-operator\">=</span>’t’)<br>       <span class=\"hljs-keyword\">Select</span> col1, col2, col2,….<br>       <span class=\"hljs-keyword\">From</span> table_name<br>       <span class=\"hljs-keyword\">Where</span> dt<span class=\"hljs-operator\">=</span>’t<span class=\"hljs-number\">-1</span>’<br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong>：分区字段要写完整</p>\n<p>​ 选择数据时不能使用 select <em>， 因为select </em> 会选中所有字段，包括分区字段，但是我们写入的表中分区字段是作为文件夹名字的， 即实际表中没有分区字段，假如我们表中有7个字段（非分区字段），另外还有4个分区字段，我们在select * 的时候会选出11个字段，但是我们写入的表只有7个字段需要被写入，这样的话就会报错。</p>\n<p>因此我们在选择数据时，要用select 选出那7个非分区字段。</p>\n<h2 id=\"创建表的方式\">4、创建表的方式</h2>\n<h3 id=\"直接建表法\">1、直接建表法</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1(<br>    id      <span class=\"hljs-type\">int</span>,<br>    name    string,<br>    hobby   <span class=\"hljs-keyword\">array</span><span class=\"hljs-operator\">&lt;</span>string<span class=\"hljs-operator\">&gt;</span>,<br>    <span class=\"hljs-keyword\">add</span>     map<span class=\"hljs-operator\">&lt;</span>String,string<span class=\"hljs-operator\">&gt;</span><br>)<br><span class=\"hljs-type\">row</span> format delimited<br>fields terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;,&#x27;</span><br>collection items terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;-&#x27;</span><br>map keys terminated <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">&#x27;:&#x27;</span><br>;<br></code></pre></td></tr></table></figure>\n<p>然后load data进入到表中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">load data <span class=\"hljs-keyword\">local</span> inpath <span class=\"hljs-string\">&#x27;/user/hive/warehouse/...data&#x27;</span> overwrite <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">table</span> t1;<br></code></pre></td></tr></table></figure>\n<h3 id=\"select-方法\">2、select 方法</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1 <span class=\"hljs-keyword\">as</span><br><span class=\"hljs-keyword\">select</span><br>    id,<br>    name<br><span class=\"hljs-keyword\">from</span> t2;<br></code></pre></td></tr></table></figure>\n<h3 id=\"like建表法\">3、like建表法</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> t1<br><span class=\"hljs-keyword\">like</span> t2;<br></code></pre></td></tr></table></figure>\n<h2 id=\"删除文件\">5、删除文件</h2>\n<h3 id=\"删除文件-1\">1、删除文件</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -rm -r /user/hive/warehouse/database/table_name/dt=xxxx/city_code=xxxxx<br><br></code></pre></td></tr></table></figure>\n<p>上述命令直接在terminal中执行即可，其实就是常用的linux命令前面加上hadoop fs，还有列出某个表的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hadoop fs -ls /user/hive/warehouse/database/table_name/dt=xxxx<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除分区\">2、删除分区</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alter table table_name drop if exists partition(dt=xxxx, city_code=xxxx);<br><br></code></pre></td></tr></table></figure>\n<p>上述命令需要在hive客户端中执行。</p>\n<h2 id=\"时间处理\">6、时间处理</h2>\n<h3 id=\"转换为时间戳\">1、转换为时间戳</h3>\n<p>标准格式是指'2021-06-30 10:10:00'这种格式，即'yyyy-MM-dd HH:mm:ss'，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;2021-06-30 10:10:10&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>若时间不是标准格式的，比如 '20210630'这种的情况，也可以使用unix_timestamp来转换，但是需要你传入格式，即告诉这个函数你的时间是什么格式的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">unix_timestamp(<span class=\"hljs-string\">&#x27;20210630&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyyMMdd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"时间戳转换为日期\">2、时间戳转换为日期</h3>\n<p>时间戳转换为标准格式/指定格式，需要用到from_unixtime(date, format)，此时的时间是到秒级的，即你的时间戳长度为10位。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<span class=\"hljs-operator\">/</span>from_unixtime(<span class=\"hljs-string\">&#x27;1625839005&#x27;</span>, <span class=\"hljs-string\">&#x27;yyyy-MM-dd&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<p>对于一些时间戳是到毫秒级其长度为13位，因此我们在转换前需要先取其前10位，即<strong>对字符串进行截取指定长度</strong>，这个在mysql和hivesql中是由一些差异的。<strong>在mysql中有left，right两个函数，但是在hive中可以使用substr来做</strong>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">from_unixtime((<span class=\"hljs-built_in\">cast</span>(substr(<span class=\"hljs-string\">&#x27;1625839005000&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">bigint</span>)), <span class=\"hljs-string\">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"分位数\">7、分位数</h2>\n<p>在hivesql中，取分位数还是比较简单，有两个函数可供使用，</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile(col, p)<br></code></pre></td></tr></table></figure>\n<p>col为我们要处理的列，但是要求col的值必须都为int，p为0-1的小数，表示分位数，0.3表示3分位数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">percentile_approx(col, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">0.3</span>), <span class=\"hljs-number\">9999</span>)<br></code></pre></td></tr></table></figure>\n<p>col也是我们要处理的列，此时该列的值可以为浮点型也可以为整型，后面可以穿入一个array，一次取多个分位数</p>"},{"title":"Prim算法","mathjax":true,"date":"2021-04-11T08:17:50.000Z","caytegories":"算法","_content":"\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","source":"_posts/Prim算法.md","raw":"---\ntitle: Prim算法\nmathjax: true\ndate: 2021-04-11 16:17:50\ncaytegories: 算法\ntags: prim\n---\n\n## Prim算法\n\n&ensp;&ensp;假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说**我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通**。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。\n\n<!--more-->\n\n## 解决方案\n\n### 贪心法\n\n&ensp;&ensp;我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。\n\n我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。\n\n1、首先我们将第一个顶点放入V中，并将其从U中删除。\n\n2、从U中选择一个距离V最近的顶点$u_k$，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。\n\n3、将$u_k$从U中删除，加入V中。\n\n4、以此类推，直到U中为空，即得到了最小生成树的权重。\n\n## 代码逻辑\n\n&ensp;&ensp;第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为$O(n^3)$\n\n```go\nfunc prim(matrix [][]int) {\n  m := len(matrix)\n  V := []int{0}\n  var U []int\n  for i := 1; i < m; i++ {\n    U = append(U, i)\n  }\n\n  for k := 0; k < m-1; k++ {\n    min := 1<<31 - 1\n    ind1, ind2 := -1, -1\n\n    for i := range V {\n      for j := range U {\n        if matrix[V[i]][U[j]] < min {\n          min = matrix[V[i]][U[j]]\n          ind1, ind2 = i, j\n        }\n      }\n    }\n    fmt.Println(V[ind1], U[ind2], min)\n    V = append(V, U[ind2])\n    U = append(U[:ind2], U[ind2+1:]...)\n  }\n}\n\nfunc main() {\n  matrix := [][]int{\n    {0, 1, 2, 3},\n    {1, 0, 2, 128},\n    {2, 2, 0, 4},\n    {3, 128, 4, 0},\n  }\n  prim(matrix)\n  fmt.Println()\n  prim1(matrix)\n}\n```\n\n&ensp;&ensp;上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。\n\n1、dis数组的长度为顶点的个数，当V中只有第一个顶点$v_0$，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a->b = b->a）。\n\n2、当V中新增一个顶点$v_1$时，我们可以对dis进行一次更新。若U中存在顶点$u_k$其距离$v_1$的值小于其距离$v_0$的值，我们就可以更新dis中的信息。\n\n3、直接根据dis中的距离来计算距离V最近顶点即可。\n\n代码如下：\n\n```go\nfunc prim1(matrix [][]int) {\n\tm := len(matrix)\n\tdis := make([]int, m)\n\tfor i := 0; i < m; i++ {\n\t\tdis[i] = matrix[0][i]\n\t}\n\tstatus := make(map[int]bool, m)\n\n\tres := 0\n\tfor i := 0; i < m-1; i++ { // 需要找剩余的点\n\t\tt := -1\n\t\tfor j := 1; j < m; j++ { // 每次遍历剩余的所有点\n\t\t\tif !status[j] && (t == -1 || dis[t] > dis[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\t\tres += dis[t]\n\t\tfmt.Println(i, t, dis[t])\n\t\tfor j := 1; j < m; j++ {\n\t\t\tif matrix[t][j] < dis[j] {\n\t\t\t\tdis[j] = matrix[t][j]\n\t\t\t}\n\t\t}\n\t\tstatus[t] = true\n\t}\n\tfmt.Println(res)\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{0, 1, 2, 3},\n\t\t{1, 0, 2, 128},\n\t\t{2, 2, 0, 4},\n\t\t{3, 128, 4, 0},\n\t}\n\tprim(matrix)\n\tfmt.Println()\n\tprim1(matrix)\n}\n\n```\n\n\n\n","slug":"Prim算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11ed00079qh24o7u15ih","content":"<h2 id=\"prim算法\">Prim算法</h2>\n<p>  假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。</p>\n<span id=\"more\"></span>\n<h2 id=\"解决方案\">解决方案</h2>\n<h3 id=\"贪心法\">贪心法</h3>\n<p>  我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点<span class=\"math inline\">\\(u_k\\)</span>，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将<span class=\"math inline\">\\(u_k\\)</span>从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\">代码逻辑</h2>\n<p>  第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为<span class=\"math inline\">\\(O(n^3)\\)</span></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>  m := <span class=\"hljs-built_in\">len</span>(matrix)<br>  V := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>  <span class=\"hljs-keyword\">var</span> U []<span class=\"hljs-keyword\">int</span><br>  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; m; i++ &#123;<br>    U = <span class=\"hljs-built_in\">append</span>(U, i)<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; m<span class=\"hljs-number\">-1</span>; k++ &#123;<br>    min := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">31</span> - <span class=\"hljs-number\">1</span><br>    ind1, ind2 := <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> V &#123;<br>      <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> U &#123;<br>        <span class=\"hljs-keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;<br>          min = matrix[V[i]][U[j]]<br>          ind1, ind2 = i, j<br>        &#125;<br>      &#125;<br>    &#125;<br>    fmt.Println(V[ind1], U[ind2], min)<br>    V = <span class=\"hljs-built_in\">append</span>(V, U[ind2])<br>    U = <span class=\"hljs-built_in\">append</span>(U[:ind2], U[ind2+<span class=\"hljs-number\">1</span>:]...)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>  matrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>    &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>    &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>    &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>    &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>  &#125;<br>  prim(matrix)<br>  fmt.Println()<br>  prim1(matrix)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>  上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点<span class=\"math inline\">\\(v_0\\)</span>，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点<span class=\"math inline\">\\(v_1\\)</span>时，我们可以对dis进行一次更新。若U中存在顶点<span class=\"math inline\">\\(u_k\\)</span>其距离<span class=\"math inline\">\\(v_1\\)</span>的值小于其距离<span class=\"math inline\">\\(v_0\\)</span>的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim1</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tm := <span class=\"hljs-built_in\">len</span>(matrix)<br>\tdis := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, m)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m; i++ &#123;<br>\t\tdis[i] = matrix[<span class=\"hljs-number\">0</span>][i]<br>\t&#125;<br>\tstatus := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">bool</span>, m)<br><br>\tres := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m<span class=\"hljs-number\">-1</span>; i++ &#123; <span class=\"hljs-comment\">// 需要找剩余的点</span><br>\t\tt := <span class=\"hljs-number\">-1</span><br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123; <span class=\"hljs-comment\">// 每次遍历剩余的所有点</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"hljs-number\">-1</span> || dis[t] &gt; dis[j]) &#123;<br>\t\t\t\tt = j<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tres += dis[t]<br>\t\tfmt.Println(i, t, dis[t])<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;<br>\t\t\t\tdis[j] = matrix[t][j]<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tstatus[t] = <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tfmt.Println(res)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tmatrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>\t&#125;<br>\tprim(matrix)<br>\tfmt.Println()<br>\tprim1(matrix)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2256,"excerpt":"<h2 id=\"prim算法\">Prim算法</h2>\n<p>  假定我们要给各个村子修路，将村子之间互相连通起来，但是呢又不想直在任意两两村子之间直接修，那样会浪费成本。因此我们可以考虑在部分村子之间修，只要保证这些路可以将所有的村子连通起来就好（即村A和村B之间没有直接连通，但是可以通过村C来中转，从A-C-B）。也就是说<strong>我们有N个村子，我们可以修N-1条路，来保证村之间可以有路连通</strong>。也称为最小生成树（最小支撑树），即保持\"连通性\"的前提下的最小子图，子图各个边的权重之和最小。</p>","more":"<h2 id=\"解决方案\">解决方案</h2>\n<h3 id=\"贪心法\">贪心法</h3>\n<p>  我们设定无向图G=(P, E)为连通图，P为G中的所有顶点，E为顶点之间的边。我们要从中筛选出部分边构成最小生成树，使的边权重之和最小。</p>\n<p>我们定义V为已经修好路的顶点，U为还未进行修路的顶点，V中的顶点构成了最小生成树后的子树，U中的点会逐个进入V中，最终生成一个最小生成树。</p>\n<p>1、首先我们将第一个顶点放入V中，并将其从U中删除。</p>\n<p>2、从U中选择一个距离V最近的顶点<span class=\"math inline\">\\(u_k\\)</span>，即从U中选择一个顶点，它距离V中所有点的最短距离，是U中的顶点的最小的。</p>\n<p>3、将<span class=\"math inline\">\\(u_k\\)</span>从U中删除，加入V中。</p>\n<p>4、以此类推，直到U中为空，即得到了最小生成树的权重。</p>\n<h2 id=\"代码逻辑\">代码逻辑</h2>\n<p>  第一种写法，我们首先将第一个顶点加入V中，然后开始尝试m-1次，将剩下的顶点依次纳入V中。重点在于如何求U中距离V最近的顶点，我们这里直接两层循环，遍历U中顶点，计算其与V中所有顶点的最短距离，保存距离最短的U中的顶点的索引。遍历结束，索引对应的U中顶点加入到V中即可。时间复杂度为<span class=\"math inline\">\\(O(n^3)\\)</span></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>  m := <span class=\"hljs-built_in\">len</span>(matrix)<br>  V := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>  <span class=\"hljs-keyword\">var</span> U []<span class=\"hljs-keyword\">int</span><br>  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; m; i++ &#123;<br>    U = <span class=\"hljs-built_in\">append</span>(U, i)<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; m<span class=\"hljs-number\">-1</span>; k++ &#123;<br>    min := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">31</span> - <span class=\"hljs-number\">1</span><br>    ind1, ind2 := <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span><br><br>    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> V &#123;<br>      <span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> U &#123;<br>        <span class=\"hljs-keyword\">if</span> matrix[V[i]][U[j]] &lt; min &#123;<br>          min = matrix[V[i]][U[j]]<br>          ind1, ind2 = i, j<br>        &#125;<br>      &#125;<br>    &#125;<br>    fmt.Println(V[ind1], U[ind2], min)<br>    V = <span class=\"hljs-built_in\">append</span>(V, U[ind2])<br>    U = <span class=\"hljs-built_in\">append</span>(U[:ind2], U[ind2+<span class=\"hljs-number\">1</span>:]...)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>  matrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>    &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>    &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>    &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>    &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>  &#125;<br>  prim(matrix)<br>  fmt.Println()<br>  prim1(matrix)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>  上面那种写法的时间复杂度比较高，我们可以考虑进行下优化。在找距离V最近的顶点时，是存在优化空间的。不需要每次都遍历V和U，我们可以用一个数组记录下U中顶点到V的最短距离。</p>\n<p>1、dis数组的长度为顶点的个数，当V中只有第一个顶点<span class=\"math inline\">\\(v_0\\)</span>，dis中记录了该顶点与U中所有顶点的最近距离（无向图，a-&gt;b = b-&gt;a）。</p>\n<p>2、当V中新增一个顶点<span class=\"math inline\">\\(v_1\\)</span>时，我们可以对dis进行一次更新。若U中存在顶点<span class=\"math inline\">\\(u_k\\)</span>其距离<span class=\"math inline\">\\(v_1\\)</span>的值小于其距离<span class=\"math inline\">\\(v_0\\)</span>的值，我们就可以更新dis中的信息。</p>\n<p>3、直接根据dis中的距离来计算距离V最近顶点即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prim1</span><span class=\"hljs-params\">(matrix [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tm := <span class=\"hljs-built_in\">len</span>(matrix)<br>\tdis := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, m)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m; i++ &#123;<br>\t\tdis[i] = matrix[<span class=\"hljs-number\">0</span>][i]<br>\t&#125;<br>\tstatus := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">bool</span>, m)<br><br>\tres := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; m<span class=\"hljs-number\">-1</span>; i++ &#123; <span class=\"hljs-comment\">// 需要找剩余的点</span><br>\t\tt := <span class=\"hljs-number\">-1</span><br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123; <span class=\"hljs-comment\">// 每次遍历剩余的所有点</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> !status[j] &amp;&amp; (t == <span class=\"hljs-number\">-1</span> || dis[t] &gt; dis[j]) &#123;<br>\t\t\t\tt = j<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tres += dis[t]<br>\t\tfmt.Println(i, t, dis[t])<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; m; j++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> matrix[t][j] &lt; dis[j] &#123;<br>\t\t\t\tdis[j] = matrix[t][j]<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tstatus[t] = <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tfmt.Println(res)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tmatrix := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">128</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>&#125;,<br>\t&#125;<br>\tprim(matrix)<br>\tfmt.Println()<br>\tprim1(matrix)<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"Spark-使用总结","date":"2021-07-20T15:14:26.000Z","_content":"","source":"_posts/Spark-使用总结.md","raw":"---\ntitle: Spark-使用总结\ndate: 2021-07-20 23:14:26\ntags:\n---\n","slug":"Spark-使用总结","published":1,"updated":"2021-07-20T15:14:26.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11ee00089qh2cefd8ug7","content":"\n","site":{"data":{}},"wordcount":0,"excerpt":"","more":"\n"},{"title":"dijkstra算法","mathjax":true,"date":"2020-07-05T08:07:53.000Z","_content":"\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","source":"_posts/dijkstra算法.md","raw":"---\ntitle: dijkstra算法\nmathjax: true\ndate: 2020-07-05 16:07:53\ncategories: 算法\ntags: dijkstra\n---\n\n## Dijkstra算法\n\n&emsp;&emsp;中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。\n\n<!--more-->\n\n## 算法描述\n\n&emsp;&emsp;给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。\n\n1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）\n\n2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k\n\n3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s->m的距离是无穷大，现在经过（s->k） + （k->m）为常数值。\n\n4、重复2、3两步，直到U中的顶点为空\n\n## 代码逻辑\n\n&emsp;&emsp;整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s->u的路径加入到path中即可。\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\n// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py\n\nconst(\n\tMaxDis  int = 1<<7-1\n)\n\ntype Dijkstra struct {\n\ttPints  []string\n\ttTwoPointDis map[string]int\n}\n\nfunc (d *Dijkstra) Init(tPoints []string, tDis [][]int) {\n\tif len(tPoints) != len(tDis) {\n\t\tpanic(\"点数与矩阵的大小不一致\")\n\t}\n\td.tTwoPointDis = make(map[string]int, 0)\n\tfor i := 0; i < len(tPoints); i++ {\n\t\tfor j := 0; j < len(tPoints); j++ {\n\t\t\tkey := tPoints[i] + \"_\" + tPoints[j]\n\t\t\td.tTwoPointDis[key] = tDis[i][j]\n\t\t}\n\t}\n\td.tPints = tPoints\n}\n\nfunc (d *Dijkstra) dijkstra() {\n\ttPoints := d.tPints[1:]                  // 未访问过的点\n\tvisited := []string{d.tPints[0]}         // 访问过的点\n\tsrc := d.tPints[0]                       // 起点\n\tpre, next := src, src\n\n\tpath := make(map[string][]string, 0)     // 起点到其它点的路径\n\tpath[src + \"_\" + src] = []string{\"A\"}\n\n\tdistanceGraph := make(map[string]int, 0)  // 起点到其它点的距离\n\tfor len(tPoints) > 0 {\n\t\tdistance := MaxDis\n\t\tvar ind int = 0\n\t\tvar dst string\n\n\t\tvar nextInd int = 0\n\n\t\tfor _, v := range visited {\n\t\t\tfor ind, dst = range tPoints {\n\t\t\t\tnewDis := d.tTwoPointDis[src + \"_\" + v] + d.tTwoPointDis[v + \"_\" + dst]  // 从起点src到已访问过的点v + 从v到未访问过点的距离\n\t\t\t\tif newDis < distance {\n\t\t\t\t\tdistance = newDis\n\t\t\t\t\tpre = v\n\t\t\t\t\tnext = dst\n\t\t\t\t\tnextInd = ind\n\t\t\t\t\td.tTwoPointDis[src + \"_\" + dst] = distance\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, tPoint := range path[src + \"_\" + pre] {\n\t\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], tPoint)\n\t\t}\n\t\tpath[src + \"_\" + next] = append(path[src + \"_\" + next], next)  // 记录从src到next需经过的路径\n\n\t\tdistanceGraph[src + \"_\" + next] = distance                     // 记录从src到next的距离\n\n\t\tvisited = append(visited, next)\n\t\ttPoints = append(tPoints[:nextInd], tPoints[nextInd+1:]...)\n\t}\n\n\tfmt.Println(path)\n\tfmt.Println(distanceGraph)\n}\n\nfunc main() {\n\td := new(Dijkstra)\n\ttPoints := []string{\"A\", \"B\", \"C\", \"D\"}\n\ttDis := [][]int{\n\t\t{0,      2, 6, 4},\n\t\t{127, 0, 3, 127},\n\t\t{7, 127, 0, 1},\n\t\t{5, 127, 12, 0}}\n\n\td.Init(tPoints, tDis)\n\td.dijkstra()\n}\n\n```\n\n\n\n## 结语\n\n&emsp;&emsp;Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。\n","slug":"dijkstra算法","published":1,"updated":"2021-06-04T13:13:40.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11ef000c9qh22ylk3qrm","content":"<h2 id=\"dijkstra算法\">Dijkstra算法</h2>\n<p>  中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>\n<span id=\"more\"></span>\n<h2 id=\"算法描述\">算法描述</h2>\n<p>  给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\">代码逻辑</h2>\n<p>  整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span><br><br><span class=\"hljs-keyword\">const</span>(<br>\tMaxDis  <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">7</span><span class=\"hljs-number\">-1</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Dijkstra <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttPints  []<span class=\"hljs-keyword\">string</span><br>\ttTwoPointDis <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tPoints []<span class=\"hljs-keyword\">string</span>, tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(tPoints) != <span class=\"hljs-built_in\">len</span>(tDis) &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;点数与矩阵的大小不一致&quot;</span>)<br>\t&#125;<br>\td.tTwoPointDis = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(tPoints); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(tPoints); j++ &#123;<br>\t\t\tkey := tPoints[i] + <span class=\"hljs-string\">&quot;_&quot;</span> + tPoints[j]<br>\t\t\td.tTwoPointDis[key] = tDis[i][j]<br>\t\t&#125;<br>\t&#125;<br>\td.tPints = tPoints<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttPoints := d.tPints[<span class=\"hljs-number\">1</span>:]                  <span class=\"hljs-comment\">// 未访问过的点</span><br>\tvisited := []<span class=\"hljs-keyword\">string</span>&#123;d.tPints[<span class=\"hljs-number\">0</span>]&#125;         <span class=\"hljs-comment\">// 访问过的点</span><br>\tsrc := d.tPints[<span class=\"hljs-number\">0</span>]                       <span class=\"hljs-comment\">// 起点</span><br>\tpre, next := src, src<br><br>\tpath := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>][]<span class=\"hljs-keyword\">string</span>, <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 起点到其它点的路径</span><br>\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + src] = []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>&#125;<br><br>\tdistanceGraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// 起点到其它点的距离</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(tPoints) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tdistance := MaxDis<br>\t\t<span class=\"hljs-keyword\">var</span> ind <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">var</span> dst <span class=\"hljs-keyword\">string</span><br><br>\t\t<span class=\"hljs-keyword\">var</span> nextInd <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> visited &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> ind, dst = <span class=\"hljs-keyword\">range</span> tPoints &#123;<br>\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + v] + d.tTwoPointDis[v + <span class=\"hljs-string\">&quot;_&quot;</span> + dst]  <span class=\"hljs-comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> newDis &lt; distance &#123;<br>\t\t\t\t\tdistance = newDis<br>\t\t\t\t\tpre = v<br>\t\t\t\t\tnext = dst<br>\t\t\t\t\tnextInd = ind<br>\t\t\t\t\td.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + dst] = distance<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, tPoint := <span class=\"hljs-keyword\">range</span> path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + pre] &#123;<br>\t\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], tPoint)<br>\t\t&#125;<br>\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], next)  <span class=\"hljs-comment\">// 记录从src到next需经过的路径</span><br><br>\t\tdistanceGraph[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = distance                     <span class=\"hljs-comment\">// 记录从src到next的距离</span><br><br>\t\tvisited = <span class=\"hljs-built_in\">append</span>(visited, next)<br>\t\ttPoints = <span class=\"hljs-built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"hljs-number\">1</span>:]...)<br>\t&#125;<br><br>\tfmt.Println(path)<br>\tfmt.Println(distanceGraph)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\td := <span class=\"hljs-built_in\">new</span>(Dijkstra)<br>\ttPoints := []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>&#125;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>,      <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\td.Init(tPoints, tDis)<br>\td.dijkstra()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>  Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>\n","site":{"data":{}},"wordcount":2787,"excerpt":"<h2 id=\"dijkstra算法\">Dijkstra算法</h2>\n<p>  中文名又叫迪杰斯特拉算法，是一种单源最短路径算法，用于计算一个节点到其它所有节点的最短路径。通俗的讲就是确定好一个起点之后，计算起点到其它点最短路径。常用于一些路由计算或者路径规划等场景。</p>","more":"<h2 id=\"算法描述\">算法描述</h2>\n<p>  给定一个带权有向图G=(V, E)，V代表顶点集合，E代表顶点之间的权重。</p>\n<p>1、把顶点分成两个集合S、U，S代表已经获得最短路径的顶点，起初只有源点一个，U代表未加入路径的顶点。（保持源点s到S中各个顶点的最短路径长度不大于源点s到U中各个顶点的最短路径长度）</p>\n<p>2、从U中选出一个顶点k，是从源点到U中所有顶点距离最短的一个，将k加入S，并从U中移除顶点k</p>\n<p>3、根据S中现有的顶点，更新s到U中各个顶点的距离，比如之前s-&gt;m的距离是无穷大，现在经过（s-&gt;k） + （k-&gt;m）为常数值。</p>\n<p>4、重复2、3两步，直到U中的顶点为空</p>\n<h2 id=\"代码逻辑\">代码逻辑</h2>\n<p>  整体的代码逻辑也很简单，首先我们需要两个列表，一个表示访问过的点S一个表示未访问过的点U。一个map path 用于存储从源点到已访问过点的路径。然后我们每次只需要计算从源点s经过S中的某个/某些点之后 到 U中各个点的距离，只需要找出到U中距离最短的点即可。我们可以把S中最后一个经过的点称之为pre，U中访问的点为next，找到路径最短的next之后，我们将next移动到S中。并且源点s到next的路径只是在源点s到pre的基础上加了个u，将s-&gt;u的路径加入到path中即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-comment\">// https://github.com/muzixing/graph_algorithm/blob/master/dijkstra.py</span><br><br><span class=\"hljs-keyword\">const</span>(<br>\tMaxDis  <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">7</span><span class=\"hljs-number\">-1</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Dijkstra <span class=\"hljs-keyword\">struct</span> &#123;<br>\ttPints  []<span class=\"hljs-keyword\">string</span><br>\ttTwoPointDis <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(tPoints []<span class=\"hljs-keyword\">string</span>, tDis [][]<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(tPoints) != <span class=\"hljs-built_in\">len</span>(tDis) &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;点数与矩阵的大小不一致&quot;</span>)<br>\t&#125;<br>\td.tTwoPointDis = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(tPoints); i++ &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">len</span>(tPoints); j++ &#123;<br>\t\t\tkey := tPoints[i] + <span class=\"hljs-string\">&quot;_&quot;</span> + tPoints[j]<br>\t\t\td.tTwoPointDis[key] = tDis[i][j]<br>\t\t&#125;<br>\t&#125;<br>\td.tPints = tPoints<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *Dijkstra)</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttPoints := d.tPints[<span class=\"hljs-number\">1</span>:]                  <span class=\"hljs-comment\">// 未访问过的点</span><br>\tvisited := []<span class=\"hljs-keyword\">string</span>&#123;d.tPints[<span class=\"hljs-number\">0</span>]&#125;         <span class=\"hljs-comment\">// 访问过的点</span><br>\tsrc := d.tPints[<span class=\"hljs-number\">0</span>]                       <span class=\"hljs-comment\">// 起点</span><br>\tpre, next := src, src<br><br>\tpath := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>][]<span class=\"hljs-keyword\">string</span>, <span class=\"hljs-number\">0</span>)     <span class=\"hljs-comment\">// 起点到其它点的路径</span><br>\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + src] = []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>&#125;<br><br>\tdistanceGraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// 起点到其它点的距离</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(tPoints) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tdistance := MaxDis<br>\t\t<span class=\"hljs-keyword\">var</span> ind <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">var</span> dst <span class=\"hljs-keyword\">string</span><br><br>\t\t<span class=\"hljs-keyword\">var</span> nextInd <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">0</span><br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> visited &#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> ind, dst = <span class=\"hljs-keyword\">range</span> tPoints &#123;<br>\t\t\t\tnewDis := d.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + v] + d.tTwoPointDis[v + <span class=\"hljs-string\">&quot;_&quot;</span> + dst]  <span class=\"hljs-comment\">// 从起点src到已访问过的点v + 从v到未访问过点的距离</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> newDis &lt; distance &#123;<br>\t\t\t\t\tdistance = newDis<br>\t\t\t\t\tpre = v<br>\t\t\t\t\tnext = dst<br>\t\t\t\t\tnextInd = ind<br>\t\t\t\t\td.tTwoPointDis[src + <span class=\"hljs-string\">&quot;_&quot;</span> + dst] = distance<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, tPoint := <span class=\"hljs-keyword\">range</span> path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + pre] &#123;<br>\t\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], tPoint)<br>\t\t&#125;<br>\t\tpath[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = <span class=\"hljs-built_in\">append</span>(path[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next], next)  <span class=\"hljs-comment\">// 记录从src到next需经过的路径</span><br><br>\t\tdistanceGraph[src + <span class=\"hljs-string\">&quot;_&quot;</span> + next] = distance                     <span class=\"hljs-comment\">// 记录从src到next的距离</span><br><br>\t\tvisited = <span class=\"hljs-built_in\">append</span>(visited, next)<br>\t\ttPoints = <span class=\"hljs-built_in\">append</span>(tPoints[:nextInd], tPoints[nextInd+<span class=\"hljs-number\">1</span>:]...)<br>\t&#125;<br><br>\tfmt.Println(path)<br>\tfmt.Println(distanceGraph)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\td := <span class=\"hljs-built_in\">new</span>(Dijkstra)<br>\ttPoints := []<span class=\"hljs-keyword\">string</span>&#123;<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>&#125;<br>\ttDis := [][]<span class=\"hljs-keyword\">int</span>&#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>,      <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">127</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br><br>\td.Init(tPoints, tDis)<br>\td.dijkstra()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"结语\">结语</h2>\n<p>  Ok，整体的代码逻辑就是这样的，从最初不了解dijkstra算法，到了解用代码实现之后，发现其中的逻辑不算复杂。只要我们能够理解S U两个列表，以及中间状态的存储path，还有如何从U中获得下一个要访问的点。整个问题就解决了。</p>"},{"title":"工作心得总结","date":"2021-07-10T02:52:40.000Z","_content":"\n## 工作经验总结\n\n### 为什么要写这个总结\n\n&ensp;&ensp;自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力...这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，**一直停留在固有的思维层面，这是比较可怕的**。\n\n<!--more-->\n\n&ensp;&ensp;曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。\n\n&ensp;&ensp;工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。\n\n### 总结ing....\n\n1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。\n\n2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。\n\n3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。\n\n....\n\n\n\n\n\nWo wo wo \n\n\n\n### 共勉\n\n\n\n","source":"_posts/工作心得总结.md","raw":"---\ntitle: 工作心得总结\ndate: 2021-07-10 10:52:40\ncategories: 总结\ntags: 经验总结\n---\n\n## 工作经验总结\n\n### 为什么要写这个总结\n\n&ensp;&ensp;自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力...这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，**一直停留在固有的思维层面，这是比较可怕的**。\n\n<!--more-->\n\n&ensp;&ensp;曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。\n\n&ensp;&ensp;工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。\n\n### 总结ing....\n\n1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。\n\n2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。\n\n3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。\n\n....\n\n\n\n\n\nWo wo wo \n\n\n\n### 共勉\n\n\n\n","slug":"工作心得总结","published":1,"updated":"2021-07-10T04:21:20.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11eg000d9qh2h4zp9fge","content":"<h2 id=\"工作经验总结\">工作经验总结</h2>\n<h3 id=\"为什么要写这个总结\">为什么要写这个总结</h3>\n<p>  自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力...这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，<strong>一直停留在固有的思维层面，这是比较可怕的</strong>。</p>\n<span id=\"more\"></span>\n<p>  曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。</p>\n<p>  工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。</p>\n<h3 id=\"总结ing....\">总结ing....</h3>\n<p>1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。</p>\n<p>2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。</p>\n<p>3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。</p>\n<p>....</p>\n<p>Wo wo wo</p>\n<h3 id=\"共勉\">共勉</h3>\n","site":{"data":{}},"wordcount":812,"excerpt":"<h2 id=\"工作经验总结\">工作经验总结</h2>\n<h3 id=\"为什么要写这个总结\">为什么要写这个总结</h3>\n<p>  自己工作以来，前期的成长还是比较快的，可以快速的学习技术，业务知识，与人沟通的能力，但是也有几点没有学好，比如：总结的能力，展示汇报的能力，以及表达自己观点的能力...这几点自身感觉是没有明显的提升。可能与我自身的性格、想法有关，仿佛自己一直在觉着只要写好代码，做好工作就行了，最开始还觉着很潇洒，慢慢觉着这样并不好，<strong>一直停留在固有的思维层面，这是比较可怕的</strong>。</p>","more":"<p>  曾经有人对我说，要想成长，要学会适当的跳出当前的层级去思考问题，去考虑更高一点层级的问题，格局要大。说实话我第一次听到这样的话时，感觉有点虚、假，甚至有些pua的意味。可是转念一想，并不是完全没有道理，假如我们一直按照自己的固有思维去考虑问题，我们一直停留在一个水平面。当别人给我们指点时，我们会有恍然大悟的感觉，如果此时我们能反思为什么别人会这样思考，为什么他能想到自己没有想到的一点，如果能得到别人这样思考的原因，我们也就在慢慢向其靠近。</p>\n<p>  工作了两年时间之后，发现自己的成长的确越来越慢，似乎有一点停滞。有时候仿佛被忙碌蒙蔽了双眼，曾经有一段时间特别忙，特别累，但是却在做着重复性的工作，好像一直都没有成长。当忙碌的节奏停了下来，回头一看才发现自己这一段时间只是忙碌，却收获甚少。而身处工作中，忙碌是必不可少的，可是我们要如何在忙碌中成长呢，那就是要不断的总结，也就是我想写这篇博客的原因。不断的把工作中的想法、心得记录下来，督促自己。</p>\n<h3 id=\"总结ing....\">总结ing....</h3>\n<p>1、处理数据时要考虑数据的完整性、正确性，处理完成之后要记得校验。</p>\n<p>2、若要通过做图反应自己产出的数据，要考虑受众范围，比如坐标轴的解释。若数据范围跨度比较大，不能很好的展示细节，是否可以滤除一些异常值，只展示部分范围，把细节展示出来。</p>\n<p>3、与人沟通时，先假设对方的出发点是对我们好，这样二者的立场会先一致，不容易引起矛盾，若不合适，再表达自己的观点也不迟。</p>\n<p>....</p>\n<p>Wo wo wo</p>\n<h3 id=\"共勉\">共勉</h3>"},{"title":"延迟接受算法","math":true,"date":"2020-07-18T06:17:59.000Z","_content":"\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","source":"_posts/延迟接受算法.md","raw":"---\ntitle: 延迟接受算法\nmath: true\ndate: 2020-07-18 14:17:59\ncategories: 算法\ntags: late acceptance\n---\n\n## 延迟接受算法\n\n&emsp;&emsp;延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定[匹配](https://baike.baidu.com/item/匹配/6397551)而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。\n\n<!--more-->\n\n## 问题描述\n\n&emsp;&emsp;我们有一个要优化的目标$f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y$，$x,y,z$的范围都是[0, 100]，我们就要在这个范围内求出函数$f(x,y,z)$的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。**启发式**方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。**延迟接受**就是一种求解方法。\n\n## 算法描述\n\n&emsp;&emsp;延迟接受算法就是将当前的新解与$n$步之前的解进行对比，若当前解优于$n$步以前的解，则直接接受当前解，若比$n$步之前的解差，则拒绝当前解。\n\n&emsp;&emsp;延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。\n\n![lahc](/images/lahc.jpg)\n\n延迟接受算法的流程如上图所示，\n\n1、$s$为初始解，$C\\left(s\\right)$为初始解的函数值，$Lfa$就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的$Lfa$个解，初始解都为$C(s)$。\n\n2、开始迭代，构建新解$s\\ast$，计算新解的函数值$C(s\\ast)$。\n\n3、计算$Lfa$步之前的解的函数值$f(v)$，$v := I \\% Lfa$，$v$相对于$I$就是$Lfa$步之前解的函数值。\n\n4、比较 $C(s\\ast)$ 和 $f(v)$，比较 $C(s*)$ 和 $C(s)$，若$C(s\\ast)$优于$f(v)$或者$C(s)$，则直接接受当前新解$s\\ast$，并更新$f(v)=C(s\\ast)$。\n\n5、若$C(s*)$ 差于$f(v)$ 或者 $C(s)$，则更新 $f(v)=C(s)$。\n\n6、I=I+1，直到迭代终止。\n\n上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。\n\n## 算法应用\n\n&emsp;&emsp;我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。\n\n部分代码如下\n\n```go\npackage algorithm\n\nimport (\n\t\"TSP/ioinfo\"\n\t\"TSP/util\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype LateAcceptance struct {\n\tn       int\n\ttScore []float64\n}\n\nfunc (l *LateAcceptance) Init(n int, pStartScore float64) {\n\tl.n = n + 1\n\n\tfor i := 0; i < l.n; i++ {\n\t\tl.tScore = append(l.tScore, pStartScore)\n\t}\n}\n\nfunc (l *LateAcceptance) Accept(pScore float64) bool {\n\tvar pAccept bool\n\n\tif pScore <= l.tScore[0] {\n\t\tpAccept = true\n\t} else if pScore <= l.tScore[len(l.tScore) - 1] {\n\t\tpAccept = true\n\t} else {\n\t\tpAccept = false\n\t}\n\tif pAccept {\n\t\tl.tScore = append(l.tScore, pScore)\n\t} else {\n\t\tl.tScore = append(l.tScore, l.tScore[len(l.tScore) - 1])\n\t}\n\tif len(l.tScore) >= l.n {\n\t\tl.tScore = l.tScore[1:]\n\t}\n\n\treturn pAccept\n}\n\n\nfunc changCity1(dataSrc []ioinfo.Data, R1 rand.Rand) []ioinfo.Data {\n\tpos1 := R1.Intn(len(dataSrc)-3) + 1\n\tpos2 := R1.Intn(len(dataSrc)-pos1-1) + pos1\n\tdataDest := make([]ioinfo.Data, len(dataSrc))\n\tcopy(dataDest, dataSrc)\n\tr := R1.Intn(2)\n\n\tif r == 0 {\n\t\tfor pos1 < pos2 {\n\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t\t\tpos1 ++\n\t\t\tpos2 --\n\t\t}\n\t} else {\n\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]\n\t}\n\n\treturn dataDest\n}\n\nfunc La(pFileName string) float64 {\n\tdata := util.GetSampleData(pFileName, false)\n\tr := util.GetResult(data)\n\n\tpLa := new(LateAcceptance)\n\tpLa.Init(215, r)\n\n\tvar R1 = rand.New(rand.NewSource(0))\n\n\ts1 := time.Now().UnixNano()\n\tpIterNum := 200000\n\tfor pIterNum > 0 {\n\t\ttemp := changCity1(data, *R1)\n\t\trn := util.GetResult(temp)  // 计算当前解的里程 \n\t\tif pLa.Accept(rn) {\n\t\t\tdata = temp\n\t\t}\n\t\tpIterNum--\n\t}\n\ts2 := time.Now().UnixNano()\n\tfmt.Println(data, s2 -s1)\n\treturn util.GetResult(data)\n}\n\n```\n\n```tex\n延迟接受启动：\n[ 1 -> 43 -> 23 -> 56 -> 41 -> 42 -> 64 -> 61 -> 69 -> 36 -> 37 -> 71 -> 60 -> 70 -> 20 -> 15 -> 57 -> 27 -> 52 -> 13 -> 54 -> 19 -> 59 -> 14 -> 53 -> 11 -> 66 -> 65 -> 38 -> 31 -> 10 -> 58 -> 72 -> 39 ->  9 -> 40 -> 12 -> 17 -> 76 -> 26 ->  7 -> 35 ->  8 -> 46 -> 34 -> 67 -> 75 ->  4 -> 45 -> 29 ->  5 -> 48 -> 47 -> 21 -> 74 -> 30 ->  2 -> 68 ->  6 -> 51 ->  3 -> 44 -> 32 -> 50 -> 25 -> 55 -> 18 -> 24 -> 49 -> 16 -> 63 -> 33 -> 73 -> 62 -> 28 -> 22 ->  1 ->] 170124000ns\n588.1953208548182\n\n```\n\n76个点需要170ms，最终结果588.195\n\n全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。\n\n","slug":"延迟接受算法","published":1,"updated":"2022-01-03T06:02:26.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11eh000g9qh229jh3oka","content":"<h2 id=\"延迟接受算法\">延迟接受算法</h2>\n<p>  延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>\n<span id=\"more\"></span>\n<h2 id=\"问题描述\">问题描述</h2>\n<p>  我们有一个要优化的目标<span class=\"math inline\">\\(f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y\\)</span>，<span class=\"math inline\">\\(x,y,z\\)</span>的范围都是[0, 100]，我们就要在这个范围内求出函数<span class=\"math inline\">\\(f(x,y,z)\\)</span>的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\">算法描述</h2>\n<p>  延迟接受算法就是将当前的新解与<span class=\"math inline\">\\(n\\)</span>步之前的解进行对比，若当前解优于<span class=\"math inline\">\\(n\\)</span>步以前的解，则直接接受当前解，若比<span class=\"math inline\">\\(n\\)</span>步之前的解差，则拒绝当前解。</p>\n<p>  延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<figure>\n<img src=\"/images/lahc.jpg\" alt=\"lahc\" /><figcaption aria-hidden=\"true\">lahc</figcaption>\n</figure>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、<span class=\"math inline\">\\(s\\)</span>为初始解，<span class=\"math inline\">\\(C\\left(s\\right)\\)</span>为初始解的函数值，<span class=\"math inline\">\\(Lfa\\)</span>就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的<span class=\"math inline\">\\(Lfa\\)</span>个解，初始解都为<span class=\"math inline\">\\(C(s)\\)</span>。</p>\n<p>2、开始迭代，构建新解<span class=\"math inline\">\\(s\\ast\\)</span>，计算新解的函数值<span class=\"math inline\">\\(C(s\\ast)\\)</span>。</p>\n<p>3、计算<span class=\"math inline\">\\(Lfa\\)</span>步之前的解的函数值<span class=\"math inline\">\\(f(v)\\)</span>，<span class=\"math inline\">\\(v := I \\% Lfa\\)</span>，<span class=\"math inline\">\\(v\\)</span>相对于<span class=\"math inline\">\\(I\\)</span>就是<span class=\"math inline\">\\(Lfa\\)</span>步之前解的函数值。</p>\n<p>4、比较 <span class=\"math inline\">\\(C(s\\ast)\\)</span> 和 <span class=\"math inline\">\\(f(v)\\)</span>，比较 <span class=\"math inline\">\\(C(s*)\\)</span> 和 <span class=\"math inline\">\\(C(s)\\)</span>，若<span class=\"math inline\">\\(C(s\\ast)\\)</span>优于<span class=\"math inline\">\\(f(v)\\)</span>或者<span class=\"math inline\">\\(C(s)\\)</span>，则直接接受当前新解<span class=\"math inline\">\\(s\\ast\\)</span>，并更新<span class=\"math inline\">\\(f(v)=C(s\\ast)\\)</span>。</p>\n<p>5、若<span class=\"math inline\">\\(C(s*)\\)</span> 差于<span class=\"math inline\">\\(f(v)\\)</span> 或者 <span class=\"math inline\">\\(C(s)\\)</span>，则更新 <span class=\"math inline\">\\(f(v)=C(s)\\)</span>。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\">算法应用</h2>\n<p>  我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> algorithm<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;TSP/ioinfo&quot;</span><br>\t<span class=\"hljs-string\">&quot;TSP/util&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> LateAcceptance <span class=\"hljs-keyword\">struct</span> &#123;<br>\tn       <span class=\"hljs-keyword\">int</span><br>\ttScore []<span class=\"hljs-keyword\">float64</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(n <span class=\"hljs-keyword\">int</span>, pStartScore <span class=\"hljs-keyword\">float64</span>)</span></span> &#123;<br>\tl.n = n + <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; l.n; i++ &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pStartScore)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Accept</span><span class=\"hljs-params\">(pScore <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> pAccept <span class=\"hljs-keyword\">bool</span><br><br>\t<span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-number\">0</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> pAccept &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pScore)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(l.tScore) &gt;= l.n &#123;<br>\t\tl.tScore = l.tScore[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> pAccept<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">changCity1</span><span class=\"hljs-params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"hljs-title\">ioinfo</span>.<span class=\"hljs-title\">Data</span></span> &#123;<br>\tpos1 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)<span class=\"hljs-number\">-3</span>) + <span class=\"hljs-number\">1</span><br>\tpos2 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)-pos1<span class=\"hljs-number\">-1</span>) + pos1<br>\tdataDest := <span class=\"hljs-built_in\">make</span>([]ioinfo.Data, <span class=\"hljs-built_in\">len</span>(dataSrc))<br>\t<span class=\"hljs-built_in\">copy</span>(dataDest, dataSrc)<br>\tr := R1.Intn(<span class=\"hljs-number\">2</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> r == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> pos1 &lt; pos2 &#123;<br>\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t\t\tpos1 ++<br>\t\t\tpos2 --<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> dataDest<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">La</span><span class=\"hljs-params\">(pFileName <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">float64</span></span> &#123;<br>\tdata := util.GetSampleData(pFileName, <span class=\"hljs-literal\">false</span>)<br>\tr := util.GetResult(data)<br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">215</span>, r)<br><br>\t<span class=\"hljs-keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>))<br><br>\ts1 := time.Now().UnixNano()<br>\tpIterNum := <span class=\"hljs-number\">200000</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\ttemp := changCity1(data, *R1)<br>\t\trn := util.GetResult(temp)  <span class=\"hljs-comment\">// 计算当前解的里程 </span><br>\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(rn) &#123;<br>\t\t\tdata = temp<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\ts2 := time.Now().UnixNano()<br>\tfmt.Println(data, s2 -s1)<br>\t<span class=\"hljs-keyword\">return</span> util.GetResult(data)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">延迟接受启动：<br>[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns<br>588.1953208548182<br><br></code></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>\n","site":{"data":{}},"wordcount":3511,"excerpt":"<h2 id=\"延迟接受算法\">延迟接受算法</h2>\n<p>  延迟接受算法是一个比较经典的优化算法，也叫做盖尔-沙普利算法，是盖尔和沙普利为了寻找一个稳定<a href=\"https://baike.baidu.com/item/匹配/6397551\">匹配</a>而设计出的市场机制。从算法的角度来讲，延迟接受就是对当前解不会立即接受，而是暂时的不被拒绝，当迭代次数停止以后，会从手上选择最优的那一个作为最终解。</p>","more":"<h2 id=\"问题描述\">问题描述</h2>\n<p>  我们有一个要优化的目标<span class=\"math inline\">\\(f(x,y,z)=x^2 \\ast z-y^3 \\ast z^2+x^2 \\ast y^3-x/y\\)</span>，<span class=\"math inline\">\\(x,y,z\\)</span>的范围都是[0, 100]，我们就要在这个范围内求出函数<span class=\"math inline\">\\(f(x,y,z)\\)</span>的最小值。由于解空间比较大，我们无法在常数时间内取得最优解，所以只能考虑启发式的方式来寻求局部最优解。<strong>启发式</strong>方法可以简单的理解为我们给定一个初始解，然后在该初始解的邻域范围内进行搜索，最终获得一个局部最优解(全局最优解)。<strong>延迟接受</strong>就是一种求解方法。</p>\n<h2 id=\"算法描述\">算法描述</h2>\n<p>  延迟接受算法就是将当前的新解与<span class=\"math inline\">\\(n\\)</span>步之前的解进行对比，若当前解优于<span class=\"math inline\">\\(n\\)</span>步以前的解，则直接接受当前解，若比<span class=\"math inline\">\\(n\\)</span>步之前的解差，则拒绝当前解。</p>\n<p>  延迟接受还有一个变种，就是带爬山的延迟接受( Late Acceptance Hill-Climbing)，从名字上也可以看出，“带爬上”其实就是引入了爬上的思路，即当前解与上一步的解来比较，若优于上一步解，则直接接受新解，否则拒绝。</p>\n<figure>\n<img src=\"/images/lahc.jpg\" alt=\"lahc\" /><figcaption aria-hidden=\"true\">lahc</figcaption>\n</figure>\n<p>延迟接受算法的流程如上图所示，</p>\n<p>1、<span class=\"math inline\">\\(s\\)</span>为初始解，<span class=\"math inline\">\\(C\\left(s\\right)\\)</span>为初始解的函数值，<span class=\"math inline\">\\(Lfa\\)</span>就是延迟接受的步长，我们可以以一个队列或者数组来存储延迟接受的<span class=\"math inline\">\\(Lfa\\)</span>个解，初始解都为<span class=\"math inline\">\\(C(s)\\)</span>。</p>\n<p>2、开始迭代，构建新解<span class=\"math inline\">\\(s\\ast\\)</span>，计算新解的函数值<span class=\"math inline\">\\(C(s\\ast)\\)</span>。</p>\n<p>3、计算<span class=\"math inline\">\\(Lfa\\)</span>步之前的解的函数值<span class=\"math inline\">\\(f(v)\\)</span>，<span class=\"math inline\">\\(v := I \\% Lfa\\)</span>，<span class=\"math inline\">\\(v\\)</span>相对于<span class=\"math inline\">\\(I\\)</span>就是<span class=\"math inline\">\\(Lfa\\)</span>步之前解的函数值。</p>\n<p>4、比较 <span class=\"math inline\">\\(C(s\\ast)\\)</span> 和 <span class=\"math inline\">\\(f(v)\\)</span>，比较 <span class=\"math inline\">\\(C(s*)\\)</span> 和 <span class=\"math inline\">\\(C(s)\\)</span>，若<span class=\"math inline\">\\(C(s\\ast)\\)</span>优于<span class=\"math inline\">\\(f(v)\\)</span>或者<span class=\"math inline\">\\(C(s)\\)</span>，则直接接受当前新解<span class=\"math inline\">\\(s\\ast\\)</span>，并更新<span class=\"math inline\">\\(f(v)=C(s\\ast)\\)</span>。</p>\n<p>5、若<span class=\"math inline\">\\(C(s*)\\)</span> 差于<span class=\"math inline\">\\(f(v)\\)</span> 或者 <span class=\"math inline\">\\(C(s)\\)</span>，则更新 <span class=\"math inline\">\\(f(v)=C(s)\\)</span>。</p>\n<p>6、I=I+1，直到迭代终止。</p>\n<p>上面就是延迟接受的整个流程，最关键的是第4和第5步，尤其第5步，当前新解比之前n步的解或者上一步的解要差时，应该是将上一步的解重新更新到n步之前的位置。</p>\n<h2 id=\"算法应用\">算法应用</h2>\n<p>  我们可以将延迟接受算法应用到TSP问题中，TSP问题也是一个NP-hard问题，可以采用启发式算法的方式去进行求解。</p>\n<p>部分代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> algorithm<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;TSP/ioinfo&quot;</span><br>\t<span class=\"hljs-string\">&quot;TSP/util&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> LateAcceptance <span class=\"hljs-keyword\">struct</span> &#123;<br>\tn       <span class=\"hljs-keyword\">int</span><br>\ttScore []<span class=\"hljs-keyword\">float64</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Init</span><span class=\"hljs-params\">(n <span class=\"hljs-keyword\">int</span>, pStartScore <span class=\"hljs-keyword\">float64</span>)</span></span> &#123;<br>\tl.n = n + <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; l.n; i++ &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pStartScore)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(l *LateAcceptance)</span> <span class=\"hljs-title\">Accept</span><span class=\"hljs-params\">(pScore <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> pAccept <span class=\"hljs-keyword\">bool</span><br><br>\t<span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-number\">0</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> pScore &lt;= l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>] &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">true</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tpAccept = <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> pAccept &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, pScore)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tl.tScore = <span class=\"hljs-built_in\">append</span>(l.tScore, l.tScore[<span class=\"hljs-built_in\">len</span>(l.tScore) - <span class=\"hljs-number\">1</span>])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(l.tScore) &gt;= l.n &#123;<br>\t\tl.tScore = l.tScore[<span class=\"hljs-number\">1</span>:]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> pAccept<br>&#125;<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">changCity1</span><span class=\"hljs-params\">(dataSrc []ioinfo.Data, R1 rand.Rand)</span> []<span class=\"hljs-title\">ioinfo</span>.<span class=\"hljs-title\">Data</span></span> &#123;<br>\tpos1 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)<span class=\"hljs-number\">-3</span>) + <span class=\"hljs-number\">1</span><br>\tpos2 := R1.Intn(<span class=\"hljs-built_in\">len</span>(dataSrc)-pos1<span class=\"hljs-number\">-1</span>) + pos1<br>\tdataDest := <span class=\"hljs-built_in\">make</span>([]ioinfo.Data, <span class=\"hljs-built_in\">len</span>(dataSrc))<br>\t<span class=\"hljs-built_in\">copy</span>(dataDest, dataSrc)<br>\tr := R1.Intn(<span class=\"hljs-number\">2</span>)<br><br>\t<span class=\"hljs-keyword\">if</span> r == <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> pos1 &lt; pos2 &#123;<br>\t\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t\t\tpos1 ++<br>\t\t\tpos2 --<br>\t\t&#125;<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tdataDest[pos1], dataDest[pos2] = dataDest[pos2], dataDest[pos1]<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> dataDest<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">La</span><span class=\"hljs-params\">(pFileName <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">float64</span></span> &#123;<br>\tdata := util.GetSampleData(pFileName, <span class=\"hljs-literal\">false</span>)<br>\tr := util.GetResult(data)<br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">215</span>, r)<br><br>\t<span class=\"hljs-keyword\">var</span> R1 = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>))<br><br>\ts1 := time.Now().UnixNano()<br>\tpIterNum := <span class=\"hljs-number\">200000</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\ttemp := changCity1(data, *R1)<br>\t\trn := util.GetResult(temp)  <span class=\"hljs-comment\">// 计算当前解的里程 </span><br>\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(rn) &#123;<br>\t\t\tdata = temp<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\ts2 := time.Now().UnixNano()<br>\tfmt.Println(data, s2 -s1)<br>\t<span class=\"hljs-keyword\">return</span> util.GetResult(data)<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">延迟接受启动：<br>[ 1 -&gt; 43 -&gt; 23 -&gt; 56 -&gt; 41 -&gt; 42 -&gt; 64 -&gt; 61 -&gt; 69 -&gt; 36 -&gt; 37 -&gt; 71 -&gt; 60 -&gt; 70 -&gt; 20 -&gt; 15 -&gt; 57 -&gt; 27 -&gt; 52 -&gt; 13 -&gt; 54 -&gt; 19 -&gt; 59 -&gt; 14 -&gt; 53 -&gt; 11 -&gt; 66 -&gt; 65 -&gt; 38 -&gt; 31 -&gt; 10 -&gt; 58 -&gt; 72 -&gt; 39 -&gt;  9 -&gt; 40 -&gt; 12 -&gt; 17 -&gt; 76 -&gt; 26 -&gt;  7 -&gt; 35 -&gt;  8 -&gt; 46 -&gt; 34 -&gt; 67 -&gt; 75 -&gt;  4 -&gt; 45 -&gt; 29 -&gt;  5 -&gt; 48 -&gt; 47 -&gt; 21 -&gt; 74 -&gt; 30 -&gt;  2 -&gt; 68 -&gt;  6 -&gt; 51 -&gt;  3 -&gt; 44 -&gt; 32 -&gt; 50 -&gt; 25 -&gt; 55 -&gt; 18 -&gt; 24 -&gt; 49 -&gt; 16 -&gt; 63 -&gt; 33 -&gt; 73 -&gt; 62 -&gt; 28 -&gt; 22 -&gt;  1 -&gt;] 170124000ns<br>588.1953208548182<br><br></code></pre></td></tr></table></figure>\n<p>76个点需要170ms，最终结果588.195</p>\n<p>全局最优解为545.3875524687445，延迟接受的解比全局最优解差7%左右，结果还是可以接受的。</p>"},{"title":"排课程","date":"2021-01-10T08:18:59.000Z","_content":"\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","source":"_posts/排课程.md","raw":"---\ntitle: 排课程\ndate: 2021-01-10 16:18:59\ncategories: leetcode\ntags: alogithm\n---\n\n## 排课程\n\n&emsp;&emsp;Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。\n\n&emsp;&emsp;题目链接 [https://leetcode.com/problems/course-schedule/](https://leetcode.com/problems/course-schedule/)，描述如下：\n\n&emsp;&emsp;There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses-1`.\n\n<!--more-->\n\n&emsp;&emsp;Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\n\n&emsp;&emsp;Given the total number of courses and a list of prerequisite **pairs**, is it possible for you to finish all courses?\n\n如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。\n\n整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些**特例**，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了**循环依赖**，不能学完所有的课程。\n\n&emsp;&emsp;最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的**连接数(出度)**，我们要优先处理那些**出度为0**(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程**出度要减一**，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc canFinish(numCourses int, prerequisites [][]int) bool {\n\tif numCourses == 1 {\n\t\treturn true\n\t}\n\tgraph := make(map[int][]int, len(prerequisites)) // 建立图 \n\tin := make([]int, numCourses)  // 记录出度\n\tvar queue []int\n\tfor _, a := range prerequisites {\n\t\tgraph[a[1]] = append(graph[a[1]], a[0]) // key为先学的课程\n\t\tin[a[0]]++\n\t}\n\tfor i := 0; i < numCourses; i++ { // 出度为0的课程加入队列\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tfor _, next := range graph[front] { // 与其相关课程的出度减一\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 { // 若出度为0，加入队列\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\tfor _, pre := range in {\n\t\tif pre != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumCourses := 2\n\tprerequisite := [][]int{{1, 0}}\n\tfmt.Println(canFinish(numCourses, prerequisite))\n}\n```\n\n\n\n此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。[https://leetcode.com/problems/course-schedule-ii/](https://leetcode.com/problems/course-schedule-ii/)，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可\n\n```go\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tin := make([]int, numCourses)\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[1]] = append(graph[pre[1]], pre[0])\n\t\tin[pre[0]]++\n\t}\n\n\tvar queue []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif in[i] == 0 {\n\t\t\tqueue = append(queue, i)\n\t\t}\n\t}\n\tvar res []int\n\tfor len(queue) > 0 {\n\t\tfront := queue[0]\n\t\tqueue = queue[1:]\n\t\tres = append(res, front) // 将课程编号加入到结果中\n\t\tfor _, next := range graph[front] {\n\t\t\tin[next]--\n\t\t\tif in[next] == 0 {\n\t\t\t\tqueue = append(queue, next)\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(res) == numCourses {\n\t\treturn res\n\t} else {\n\t\treturn []int{}\n\t}\n}\n```\n\n另外还有一种基于DFS的做法：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findOrder1(numCourses int, prerequisites [][]int) []int {\n\tif numCourses == 1 {\n\t\treturn []int{0}\n\t}\n\n\tgraph := make(map[int][]int, len(prerequisites))\n\tfor _, pre := range prerequisites {\n\t\tgraph[pre[0]] = append(graph[pre[0]], pre[1]) // key为后学的课程\n\t}\n\tvisited := make([]int, numCourses)\n\tvar res []int\n\tfor i := 0; i < numCourses; i++ {\n\t\tif !dfsFindOrder(graph, &visited, i, &res) {\n\t\t\treturn []int{}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc dfsFindOrder(graph map[int][]int, visited *[]int, i int, res *[]int) bool {\n\tif (*visited)[i] == 0 {\n\t\t(*visited)[i] = 1\n\t\tfor k := 0; k < len(graph[i]); k++ {\n\t\t\tif !dfsFindOrder(graph, visited, graph[i][k], res) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t(*visited)[i] = 2\n\t} else if (*visited)[i] == 1 {\n\t\treturn false\n\t} else {\n\t\treturn true\n\t}\n\t*res = append(*res, i)\n\treturn true\n}\n\nfunc main() {\n\tnumCourse := 4\n\tprerequisites := [][]int{{1, 0}, {2, 0}, {3, 1}, {3, 2}}\n\tfmt.Println(findOrder(numCourse, prerequisites))\n\tfmt.Println(findOrder1(numCourse, prerequisites))\n}\n\n```\n\n上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。\n\n\n\n","slug":"排课程","published":1,"updated":"2021-06-04T13:13:40.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11ej000j9qh2al160bu1","content":"<h2 id=\"排课程\">排课程</h2>\n<p>  Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>  题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>  There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>\n<span id=\"more\"></span>\n<p>  Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>  Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>  最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canFinish</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites)) <span class=\"hljs-comment\">// 建立图 </span><br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)  <span class=\"hljs-comment\">// 记录出度</span><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> _, a := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[a[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[a[<span class=\"hljs-number\">1</span>]], a[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// key为先学的课程</span><br>\t\tin[a[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"hljs-comment\">// 出度为0的课程加入队列</span><br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123; <span class=\"hljs-comment\">// 与其相关课程的出度减一</span><br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123; <span class=\"hljs-comment\">// 若出度为0，加入队列</span><br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> in &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourses := <span class=\"hljs-number\">2</span><br>\tprerequisite := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br>\tfmt.Println(canFinish(numCourses, prerequisite))<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">1</span>]], pre[<span class=\"hljs-number\">0</span>])<br>\t\tin[pre[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, front) <span class=\"hljs-comment\">// 将课程编号加入到结果中</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123;<br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(res) == numCourses &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> res<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder1</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">0</span>]], pre[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// key为后学的课程</span><br>\t&#125;<br>\tvisited := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfsFindOrder</span><span class=\"hljs-params\">(graph <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, visited *[]<span class=\"hljs-keyword\">int</span>, i <span class=\"hljs-keyword\">int</span>, res *[]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-built_in\">len</span>(graph[i]); k++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">2</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t*res = <span class=\"hljs-built_in\">append</span>(*res, i)<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourse := <span class=\"hljs-number\">4</span><br>\tprerequisites := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>&#125;&#125;<br>\tfmt.Println(findOrder(numCourse, prerequisites))<br>\tfmt.Println(findOrder1(numCourse, prerequisites))<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>\n","site":{"data":{}},"wordcount":4182,"excerpt":"<h2 id=\"排课程\">排课程</h2>\n<p>  Leetcode上有这样一道题，给定N个课程，但是有的课再学习之前，需要先学完别的某一个课程。就像我们在大学里面学专业之前要先学会高数才行。</p>\n<p>  题目链接 <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a>，描述如下：</p>\n<p>  There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses-1</code>.</p>","more":"<p>  Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\n<p>  Given the total number of courses and a list of prerequisite <strong>pairs</strong>, is it possible for you to finish all courses?</p>\n<p>如上面的描述，给定课程数N，以及prerequisites [[0, 1]]，表示我们在学课程0之前要先把课程1学了，请我们计算最终是否能学完全部的课程。</p>\n<p>整个问题梳理一下就是我们要先学一部分课程，然后再去学另一部分课程。但是存在一些<strong>特例</strong>，假如requisites=[[0, 1], [1, 0]]，第一个表示我们在学课程0之前要把课程1学完，第二个表示我们在学课程1之前把课程0学完。这样就形成了<strong>循环依赖</strong>，不能学完所有的课程。</p>\n<p>  最初我的想法是构建链表，即利用链表构建每一个门课程之间的关系，但是链表是一一连接的，而课程之间可以存在一对多连接，比如学完课程1我可以学课程2 3，[[2,1],[3,1]]这种情况。因此我们就不能用链表来表示这种结构，后来看到网友的提示可以用图来表示。因此考虑用图来表示，我们将每一门课程表示一个顶点，若某课程B需要先学课程A才可以学，则在AB之间连接一条线，同时记录该课程B的<strong>连接数(出度)</strong>，我们要优先处理那些<strong>出度为0</strong>(不需要依赖其它课程)的课程，学完出度为0的课程之后，对于那些与其连接的课程<strong>出度要减一</strong>，表示我所依赖的课程数少了一个，若当前所依赖的课程为0，则将该课程加入待学的课程队列。最后，若仍然存在出度不为0的课程，表示不可以完成这些课，所所有的课程出度都为0，则可以完成这些课程。BFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">canFinish</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites)) <span class=\"hljs-comment\">// 建立图 </span><br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)  <span class=\"hljs-comment\">// 记录出度</span><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> _, a := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[a[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[a[<span class=\"hljs-number\">1</span>]], a[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// key为先学的课程</span><br>\t\tin[a[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123; <span class=\"hljs-comment\">// 出度为0的课程加入队列</span><br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123; <span class=\"hljs-comment\">// 与其相关课程的出度减一</span><br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123; <span class=\"hljs-comment\">// 若出度为0，加入队列</span><br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> in &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> pre != <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourses := <span class=\"hljs-number\">2</span><br>\tprerequisite := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;&#125;<br>\tfmt.Println(canFinish(numCourses, prerequisite))<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此题还有一个延伸，若能学完所有的课程，返回课程的学习顺序。<a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a>，其实我们只需要在上面的for循环中，没出现一个出度为0的课程，将其加入到结果中即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\tin := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">1</span>]], pre[<span class=\"hljs-number\">0</span>])<br>\t\tin[pre[<span class=\"hljs-number\">0</span>]]++<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> queue []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> in[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, i)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tfront := queue[<span class=\"hljs-number\">0</span>]<br>\t\tqueue = queue[<span class=\"hljs-number\">1</span>:]<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, front) <span class=\"hljs-comment\">// 将课程编号加入到结果中</span><br>\t\t<span class=\"hljs-keyword\">for</span> _, next := <span class=\"hljs-keyword\">range</span> graph[front] &#123;<br>\t\t\tin[next]--<br>\t\t\t<span class=\"hljs-keyword\">if</span> in[next] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\tqueue = <span class=\"hljs-built_in\">append</span>(queue, next)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(res) == numCourses &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> res<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>另外还有一种基于DFS的做法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findOrder1</span><span class=\"hljs-params\">(numCourses <span class=\"hljs-keyword\">int</span>, prerequisites [][]<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> numCourses == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">0</span>&#125;<br>\t&#125;<br><br>\tgraph := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(prerequisites))<br>\t<span class=\"hljs-keyword\">for</span> _, pre := <span class=\"hljs-keyword\">range</span> prerequisites &#123;<br>\t\tgraph[pre[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(graph[pre[<span class=\"hljs-number\">0</span>]], pre[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// key为后学的课程</span><br>\t&#125;<br>\tvisited := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, numCourses)<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numCourses; i++ &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, &amp;visited, i, &amp;res) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> []<span class=\"hljs-keyword\">int</span>&#123;&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dfsFindOrder</span><span class=\"hljs-params\">(graph <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>, visited *[]<span class=\"hljs-keyword\">int</span>, i <span class=\"hljs-keyword\">int</span>, res *[]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">0</span> &#123;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-built_in\">len</span>(graph[i]); k++ &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !dfsFindOrder(graph, visited, graph[i][k], res) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t(*visited)[i] = <span class=\"hljs-number\">2</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*visited)[i] == <span class=\"hljs-number\">1</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>\t&#125;<br>\t*res = <span class=\"hljs-built_in\">append</span>(*res, i)<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnumCourse := <span class=\"hljs-number\">4</span><br>\tprerequisites := [][]<span class=\"hljs-keyword\">int</span>&#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>&#125;&#125;<br>\tfmt.Println(findOrder(numCourse, prerequisites))<br>\tfmt.Println(findOrder1(numCourse, prerequisites))<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>上述的做法是基于DFS，首先还是建立一个图，然后利用visited记录每一个课程的状态，0:未学，1:正在学，2:学完。DFS的图和BFS的图不一样，graph中的key是不同的。在BFS中key是要先学的课程，DFS中的key是要后学的课程。DFS的做法，有一种倒序DFS的意思，即遍历每一门课程，若该课程的状态是0，则先置为1，然后去找它所依赖的其它课程，若依赖的课程为0，则置为1，继续向前找，找到所有依赖的课程都是未学，则表示这条路是可行的，至少没有循环依赖，则把这些课全部置为2已学。若先前着的过程中某个课是学完的，则表示这条路也是可行的，继续找其它分支的依赖的课程，若都是学完的，则把这条路经过的课程置为2已学。若向前找的过程中某个课程是正在学的，表示存在循环依赖，不可行，直接返回。</p>"},{"title":"模拟退火算法","math":true,"date":"2021-10-30T05:59:35.000Z","_content":"\n## 模拟退火算法\n\n&emsp;&emsp;模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？\n\n<!--more-->\n\n### 算法简介\n\n&emsp;&emsp;针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。\n\n&emsp;&emsp;sa中包含几个参数:T温度，$\\alpha\\$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：\n\n![sa](/images/sa.png)\n\n\n\n模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为$f(x)$，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。**若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受**。依据下面的公式：\n\n$$rand < exp(-(f(x')-f(x)) / T)$$\n\n来确定新解是否接受。指数函数的图像如下图所示：\n\n![exp](/images/exp.gif)\n\n当新解比旧解要差时，$-(f(x')-f(x)) < 0$，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。**若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率**。\n\n代码如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n\t\"GoProject/algorithm/heuristic\"\n)\n\nfunc getFuncRes(x, y float64) float64{ // 目标函数\n\treturn 6.0 * math.Pow(x, 7) + 8.0 * math.Pow(x, 6)  + 7.0 * math.Pow(x, 3) + 5 * math.Pow(x, 2) - x*y\n}\n\nfunc SimulateAnneal() {\n\tresult := math.MaxFloat64\n\tt := 100.0\n\tminT := 1e-8\n\titerNum := 10000\n\tdelta := 0.98\n\trand.Seed(0)\n\tx := rand.Float64() * 100\n\tbestX := x\n\tfmt.Println(bestX)\n\n\tcnt := 0\n\tfor t > minT && iterNum >= 0 {\n\t\txNew := x + rand.Float64() * 2 - 1\n\t\tif xNew >= 0 && xNew <= 100 {\n\t\t\tcnt++\n\t\t\tfuncNew := getFuncRes(xNew, 0)\n\t\t\tif funcNew < result {\n\t\t\t\tx = xNew\n\t\t\t\tbestX = x\n\t\t\t\tresult = funcNew\n\t\t\t} else {\n\t\t\t\tp := math.Exp(-1 * (funcNew - result) / t)\n\t\t\t\tif rand.Float64() < p {\n\t\t\t\t\tx = xNew\n\t\t\t\t}\n\t\t\t\tif p > 0 {\n\t\t\t\t\t//fmt.Println(\"prob \", p)\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\titerNum--\n\t\tt = t * delta\n\t}\n\tfmt.Println(bestX, result, cnt)\n}\n\nfunc LateAcc() {\n\n\trand.Seed(0)\n\n\tbestX := rand.Float64() * 100\n\tbestRes := 0.0\n\n\tpLa := new(heuristic.LateAcceptance)\n\tpLa.Init(200)\n\n\tpIterNum := 10000\n\tcnt := 0\n\tfor pIterNum > 0 {\n\t\tx := bestX + rand.Float64() * 2 - 1\n\t\tif x >= 0 && x <= 100 {\n\t\t\tcnt++\n\t\t\tpRes := getFuncRes(x, 0)\n\t\t\tif pLa.Accept(pRes) {\n\t\t\t\tbestX = x\n\t\t\t\tbestRes = pRes\n\t\t\t}\n\t\t}\n\t\tpIterNum--\n\t}\n\tfmt.Println(bestX, bestRes, cnt)\n}\n\nfunc main() {\n\tSimulateAnneal()\n\tLateAcc()\n}\n\n```\n\n","source":"_posts/模拟退火算法.md","raw":"---\ntitle: 模拟退火算法\nmath: true\ndate: 2021-10-30 13:59:35\ncategories: 算法\ntags: 模拟退火\n---\n\n## 模拟退火算法\n\n&emsp;&emsp;模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？\n\n<!--more-->\n\n### 算法简介\n\n&emsp;&emsp;针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。\n\n&emsp;&emsp;sa中包含几个参数:T温度，$\\alpha\\$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：\n\n![sa](/images/sa.png)\n\n\n\n模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为$f(x)$，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。**若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受**。依据下面的公式：\n\n$$rand < exp(-(f(x')-f(x)) / T)$$\n\n来确定新解是否接受。指数函数的图像如下图所示：\n\n![exp](/images/exp.gif)\n\n当新解比旧解要差时，$-(f(x')-f(x)) < 0$，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。**若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率**。\n\n代码如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n\t\"GoProject/algorithm/heuristic\"\n)\n\nfunc getFuncRes(x, y float64) float64{ // 目标函数\n\treturn 6.0 * math.Pow(x, 7) + 8.0 * math.Pow(x, 6)  + 7.0 * math.Pow(x, 3) + 5 * math.Pow(x, 2) - x*y\n}\n\nfunc SimulateAnneal() {\n\tresult := math.MaxFloat64\n\tt := 100.0\n\tminT := 1e-8\n\titerNum := 10000\n\tdelta := 0.98\n\trand.Seed(0)\n\tx := rand.Float64() * 100\n\tbestX := x\n\tfmt.Println(bestX)\n\n\tcnt := 0\n\tfor t > minT && iterNum >= 0 {\n\t\txNew := x + rand.Float64() * 2 - 1\n\t\tif xNew >= 0 && xNew <= 100 {\n\t\t\tcnt++\n\t\t\tfuncNew := getFuncRes(xNew, 0)\n\t\t\tif funcNew < result {\n\t\t\t\tx = xNew\n\t\t\t\tbestX = x\n\t\t\t\tresult = funcNew\n\t\t\t} else {\n\t\t\t\tp := math.Exp(-1 * (funcNew - result) / t)\n\t\t\t\tif rand.Float64() < p {\n\t\t\t\t\tx = xNew\n\t\t\t\t}\n\t\t\t\tif p > 0 {\n\t\t\t\t\t//fmt.Println(\"prob \", p)\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\titerNum--\n\t\tt = t * delta\n\t}\n\tfmt.Println(bestX, result, cnt)\n}\n\nfunc LateAcc() {\n\n\trand.Seed(0)\n\n\tbestX := rand.Float64() * 100\n\tbestRes := 0.0\n\n\tpLa := new(heuristic.LateAcceptance)\n\tpLa.Init(200)\n\n\tpIterNum := 10000\n\tcnt := 0\n\tfor pIterNum > 0 {\n\t\tx := bestX + rand.Float64() * 2 - 1\n\t\tif x >= 0 && x <= 100 {\n\t\t\tcnt++\n\t\t\tpRes := getFuncRes(x, 0)\n\t\t\tif pLa.Accept(pRes) {\n\t\t\t\tbestX = x\n\t\t\t\tbestRes = pRes\n\t\t\t}\n\t\t}\n\t\tpIterNum--\n\t}\n\tfmt.Println(bestX, bestRes, cnt)\n}\n\nfunc main() {\n\tSimulateAnneal()\n\tLateAcc()\n}\n\n```\n\n","slug":"模拟退火算法","published":1,"updated":"2022-01-03T06:03:00.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11el000m9qh2b5jshpkc","content":"<h2 id=\"模拟退火算法\">模拟退火算法</h2>\n<p>  模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？</p>\n<span id=\"more\"></span>\n<h3 id=\"算法简介\">算法简介</h3>\n<p>  针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。</p>\n<p>  sa中包含几个参数:T温度，$$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：</p>\n<figure>\n<img src=\"/images/sa.png\" alt=\"sa\" /><figcaption aria-hidden=\"true\">sa</figcaption>\n</figure>\n<p>模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为<span class=\"math inline\">\\(f(x)\\)</span>，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。<strong>若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受</strong>。依据下面的公式：</p>\n<p><span class=\"math display\">\\[rand &lt; exp(-(f(x&#39;)-f(x)) / T)\\]</span></p>\n<p>来确定新解是否接受。指数函数的图像如下图所示：</p>\n<figure>\n<img src=\"/images/exp.gif\" alt=\"exp\" /><figcaption aria-hidden=\"true\">exp</figcaption>\n</figure>\n<p>当新解比旧解要差时，<span class=\"math inline\">\\(-(f(x&#39;)-f(x)) &lt; 0\\)</span>，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。<strong>若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率</strong>。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;GoProject/algorithm/heuristic&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFuncRes</span><span class=\"hljs-params\">(x, y <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">float64</span></span>&#123; <span class=\"hljs-comment\">// 目标函数</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6.0</span> * math.Pow(x, <span class=\"hljs-number\">7</span>) + <span class=\"hljs-number\">8.0</span> * math.Pow(x, <span class=\"hljs-number\">6</span>)  + <span class=\"hljs-number\">7.0</span> * math.Pow(x, <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">5</span> * math.Pow(x, <span class=\"hljs-number\">2</span>) - x*y<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SimulateAnneal</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresult := math.MaxFloat64<br>\tt := <span class=\"hljs-number\">100.0</span><br>\tminT := <span class=\"hljs-number\">1e-8</span><br>\titerNum := <span class=\"hljs-number\">10000</span><br>\tdelta := <span class=\"hljs-number\">0.98</span><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br>\tx := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestX := x<br>\tfmt.Println(bestX)<br><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> t &gt; minT &amp;&amp; iterNum &gt;= <span class=\"hljs-number\">0</span> &#123;<br>\t\txNew := x + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> xNew &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; xNew &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tfuncNew := getFuncRes(xNew, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> funcNew &lt; result &#123;<br>\t\t\t\tx = xNew<br>\t\t\t\tbestX = x<br>\t\t\t\tresult = funcNew<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tp := math.Exp(<span class=\"hljs-number\">-1</span> * (funcNew - result) / t)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; p &#123;<br>\t\t\t\t\tx = xNew<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> p &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">//fmt.Println(&quot;prob &quot;, p)</span><br>\t\t\t\t&#125;<br><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\titerNum--<br>\t\tt = t * delta<br>\t&#125;<br>\tfmt.Println(bestX, result, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LateAcc</span><span class=\"hljs-params\">()</span></span> &#123;<br><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br><br>\tbestX := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestRes := <span class=\"hljs-number\">0.0</span><br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(heuristic.LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">200</span>)<br><br>\tpIterNum := <span class=\"hljs-number\">10000</span><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tx := bestX + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tpRes := getFuncRes(x, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(pRes) &#123;<br>\t\t\t\tbestX = x<br>\t\t\t\tbestRes = pRes<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\tfmt.Println(bestX, bestRes, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tSimulateAnneal()<br>\tLateAcc()<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2221,"excerpt":"<h2 id=\"模拟退火算法\">模拟退火算法</h2>\n<p>  模拟退火算法是上世纪80年代产生的优化算法，应用于在较大空间中寻找问题的最优解，也是解决TSP问题的一大利器。模拟退火是物质从无序（高温）逐渐趋向（降温）于有序（低温/恒温）的过程。因此在模拟退火算法优化的过程中，从始至终是有一个温度贯穿其中的。那温度在优化过程中起到的作用是什么呢？</p>","more":"<h3 id=\"算法简介\">算法简介</h3>\n<p>  针对一个优化问题，存在非常多的解，可以采用模拟退火（sa）算法逐渐的逼近最优解。它的求解过程是：从一个初始解出发，然后进行局部搜索，获得一个新解，是否接受新解由模拟退火来决定，所以sa在其中起到的作用就是是否接受当前这个新的解。</p>\n<p>  sa中包含几个参数:T温度，$$ 降温系数，n迭代次数。n是指在每个温度T下的迭代次数。具体执行流程如下图所示：</p>\n<figure>\n<img src=\"/images/sa.png\" alt=\"sa\" /><figcaption aria-hidden=\"true\">sa</figcaption>\n</figure>\n<p>模拟退火中的T和n控制整个流程的进行，在每个温度T下都要执行n步（即n次迭代），n步执行完成之后，更新T。每次得到新解之后，都要对新解进行判断，是否接受。假设我们的优化目标（衡量新解的方法）为<span class=\"math inline\">\\(f(x)\\)</span>，我们求解的过程中是优化目标的值越小越好，所以如何来衡量新解与旧解的优劣呢。<strong>若新解优于上一步的解，直接接受，若不优于上一步的解，则有概率的接受</strong>。依据下面的公式：</p>\n<p><span class=\"math display\">\\[rand &lt; exp(-(f(x&#39;)-f(x)) / T)\\]</span></p>\n<p>来确定新解是否接受。指数函数的图像如下图所示：</p>\n<figure>\n<img src=\"/images/exp.gif\" alt=\"exp\" /><figcaption aria-hidden=\"true\">exp</figcaption>\n</figure>\n<p>当新解比旧解要差时，<span class=\"math inline\">\\(-(f(x&#39;)-f(x)) &lt; 0\\)</span>，即指数幂值在y轴的左侧，当T值较大时，指数幂值在靠近y轴的左侧部分，即概率值较大，接受较差解的概率要高一些，当随着温度T的下降，指数幂值值也降低，接受差解的概率较小。即模拟退火算法也是在前期可以较高概率的接受差解，从而快速跳出局部最优，随着搜索的进行，温度T逐渐下降，便不容易跳出当前范围。这也有点像深度学习调参的过程，初期学习率lr较大，随着求解过程的进行，学习率lr降低是一样的道理。<strong>若想在后期也以一个较大的概率接受差解，随着温度的降低或迭代次数的进行 可以在分母上乘一个值，提高分母的值，增大概率</strong>。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>\t<span class=\"hljs-string\">&quot;GoProject/algorithm/heuristic&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFuncRes</span><span class=\"hljs-params\">(x, y <span class=\"hljs-keyword\">float64</span>)</span> <span class=\"hljs-title\">float64</span></span>&#123; <span class=\"hljs-comment\">// 目标函数</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6.0</span> * math.Pow(x, <span class=\"hljs-number\">7</span>) + <span class=\"hljs-number\">8.0</span> * math.Pow(x, <span class=\"hljs-number\">6</span>)  + <span class=\"hljs-number\">7.0</span> * math.Pow(x, <span class=\"hljs-number\">3</span>) + <span class=\"hljs-number\">5</span> * math.Pow(x, <span class=\"hljs-number\">2</span>) - x*y<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SimulateAnneal</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresult := math.MaxFloat64<br>\tt := <span class=\"hljs-number\">100.0</span><br>\tminT := <span class=\"hljs-number\">1e-8</span><br>\titerNum := <span class=\"hljs-number\">10000</span><br>\tdelta := <span class=\"hljs-number\">0.98</span><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br>\tx := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestX := x<br>\tfmt.Println(bestX)<br><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> t &gt; minT &amp;&amp; iterNum &gt;= <span class=\"hljs-number\">0</span> &#123;<br>\t\txNew := x + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> xNew &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; xNew &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tfuncNew := getFuncRes(xNew, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> funcNew &lt; result &#123;<br>\t\t\t\tx = xNew<br>\t\t\t\tbestX = x<br>\t\t\t\tresult = funcNew<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tp := math.Exp(<span class=\"hljs-number\">-1</span> * (funcNew - result) / t)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; p &#123;<br>\t\t\t\t\tx = xNew<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> p &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\t\t\t<span class=\"hljs-comment\">//fmt.Println(&quot;prob &quot;, p)</span><br>\t\t\t\t&#125;<br><br>\t\t\t&#125;<br>\t\t&#125;<br>\t\titerNum--<br>\t\tt = t * delta<br>\t&#125;<br>\tfmt.Println(bestX, result, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LateAcc</span><span class=\"hljs-params\">()</span></span> &#123;<br><br>\trand.Seed(<span class=\"hljs-number\">0</span>)<br><br>\tbestX := rand.Float64() * <span class=\"hljs-number\">100</span><br>\tbestRes := <span class=\"hljs-number\">0.0</span><br><br>\tpLa := <span class=\"hljs-built_in\">new</span>(heuristic.LateAcceptance)<br>\tpLa.Init(<span class=\"hljs-number\">200</span>)<br><br>\tpIterNum := <span class=\"hljs-number\">10000</span><br>\tcnt := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> pIterNum &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tx := bestX + rand.Float64() * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span><br>\t\t<span class=\"hljs-keyword\">if</span> x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt;= <span class=\"hljs-number\">100</span> &#123;<br>\t\t\tcnt++<br>\t\t\tpRes := getFuncRes(x, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">if</span> pLa.Accept(pRes) &#123;<br>\t\t\t\tbestX = x<br>\t\t\t\tbestRes = pRes<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tpIterNum--<br>\t&#125;<br>\tfmt.Println(bestX, bestRes, cnt)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tSimulateAnneal()<br>\tLateAcc()<br>&#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"资源均分","date":"2021-06-04T13:16:20.000Z","_content":"\n## 资源均分\n\n## 背景\n\n&ensp;&ensp;这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。\n\n## 题目\n\n&ensp;&ensp;假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，**让整体的石油分布看上去比较均衡**，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。\n\n<!--more-->\n\n&ensp;&ensp;这里有两点需要注意，\n\n1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。\n\n2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。\n\n&ensp;&ensp;这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。\n\n我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然>0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。\n\n第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油>=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。\n\n### score如何定义\n\n&ensp;&ensp;此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。\n\n### 算法如何设计\n\n&ensp;&ensp;我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。\n\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n)\n\nvar r = rand.New(rand.NewSource(0)) // 用于搜索\n\nfunc abs(num int) int {\n\tif num < 0 {\n\t\treturn -num\n\t}\n\treturn num\n}\n\n// 计算score\nfunc calculateScore(nums []int) int {\n\tsum, res := 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tres += abs(nums[j] - nums[i])\n\t\t}\n\t}\n\tsum /= len(nums)\n\tfor i := 0; i < len(nums); i++ {\n\t\tres += abs(sum - nums[i])\n\t}\n\treturn res\n}\n\nfunc dispatch(nums []int, m int) {\n\tT, minT, ratio := 100.0, 0.0001, 0.99 // 初始化最高温度，最低温度，降温速率\n\n\ttmp := append([]int{}, nums...)\n\tfix := initial(len(nums), m) // 将m分配完成\n\tfor i := 0; i < len(nums); i++ {\n\t\ttmp[i] += fix[i]\n\t}\n\ts1 := calculateScore(tmp)          // 计算score\n\tbestNum := append([]int{}, tmp...) // 存储最优解\n\tfmt.Println(bestNum)\n\n\tfor T > minT {\n\t\titer := 500\n\t\tfor iter > 0 {\n\t\t\tpre := append([]int{}, tmp...)\n\n\t\t\tlocalSearch(nums, pre) // 搜索\n\t\t\ts2 := calculateScore(pre)\n\t\t\tif s2 < s1 { // 若新解优于最优解，直接接受\n\t\t\t\tbestNum = append([]int{}, pre...)\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t} else if math.Exp(-float64(s2-s1)/T) < r.Float64() { // 有概率接受\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t}\n\t\t\titer--\n\t\t}\n\t\tT *= ratio\n\t}\n\t//nums = bestNum  不会生效\n\tfor i := 0; i < len(nums); i++ {\n\t\tnums[i] = bestNum[i]\n\t}\n\tfmt.Println(bestNum)\n}\n\n// 初始化 参数\nfunc initial(cnt, m int) []int {\n\tvar res []int\n\tfor i := 0; i < cnt-1; i++ {\n\t\tnum := r.Intn(m)\n\t\tm -= num\n\t\tres = append(res, num)\n\t}\n\tres = append(res, m)\n\treturn res\n}\n\nfunc findMaxMin(nums []int) (int, int) {\n\tmin, max := 1<<32-1, -1<<32\n\tind1, ind2 := 0, 0\n\n\tfor ind, num := range nums {\n\t\tif num > max {\n\t\t\tmax, ind2 = num, ind\n\t\t}\n\t\tif num < min {\n\t\t\tmin, ind1 = num, ind\n\t\t}\n\t}\n\treturn ind1, ind2\n}\n\nfunc localSearch(nums, tmp []int) {\n\tminInd, maxInd := findMaxMin(tmp)\n\tif nums[minInd] > tmp[minInd] || nums[maxInd] > tmp[maxInd] {\n\t\ttmp = append([]int{}, nums...)\n\t\treturn\n\t}\n\tif tmp[maxInd] > nums[maxInd] { // 防止r.Intn() 报错\n\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])\n\t\ttmp[minInd] += m\n\t\ttmp[maxInd] -= m\n\t}\n}\n\nfunc calculateSum(nums []int) int {\n\tsum := 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tnums := []int{1, 200, 3, 4, 50}\n\tm := 200\n\tsum := m + calculateSum(nums)\n\tfmt.Println(nums, sum)\n\n\tdispatch(nums, m)\n\tfmt.Println(nums, calculateSum(nums))\n}\n\n-------------------\n[1 200 3 4 50] 458  初始值\n[75 272 16 28 67]\n[75 201 55 60 67]\n[75 201 55 60 67] 458 最终分配结果\n\n```\n\n\n\n### todo\n\n1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。\n\n2、搜索方式也可以更丰富些。\n","source":"_posts/资源均分.md","raw":"---\ntitle: 资源均分\ndate: 2021-06-04 21:16:20\ncategories: 算法\ntags: 资源均分\n---\n\n## 资源均分\n\n## 背景\n\n&ensp;&ensp;这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。\n\n## 题目\n\n&ensp;&ensp;假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，**让整体的石油分布看上去比较均衡**，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。\n\n<!--more-->\n\n&ensp;&ensp;这里有两点需要注意，\n\n1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。\n\n2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。\n\n&ensp;&ensp;这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。\n\n我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然>0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。\n\n第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油>=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。\n\n### score如何定义\n\n&ensp;&ensp;此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。\n\n### 算法如何设计\n\n&ensp;&ensp;我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。\n\n```golang\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand\"\n)\n\nvar r = rand.New(rand.NewSource(0)) // 用于搜索\n\nfunc abs(num int) int {\n\tif num < 0 {\n\t\treturn -num\n\t}\n\treturn num\n}\n\n// 计算score\nfunc calculateScore(nums []int) int {\n\tsum, res := 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tres += abs(nums[j] - nums[i])\n\t\t}\n\t}\n\tsum /= len(nums)\n\tfor i := 0; i < len(nums); i++ {\n\t\tres += abs(sum - nums[i])\n\t}\n\treturn res\n}\n\nfunc dispatch(nums []int, m int) {\n\tT, minT, ratio := 100.0, 0.0001, 0.99 // 初始化最高温度，最低温度，降温速率\n\n\ttmp := append([]int{}, nums...)\n\tfix := initial(len(nums), m) // 将m分配完成\n\tfor i := 0; i < len(nums); i++ {\n\t\ttmp[i] += fix[i]\n\t}\n\ts1 := calculateScore(tmp)          // 计算score\n\tbestNum := append([]int{}, tmp...) // 存储最优解\n\tfmt.Println(bestNum)\n\n\tfor T > minT {\n\t\titer := 500\n\t\tfor iter > 0 {\n\t\t\tpre := append([]int{}, tmp...)\n\n\t\t\tlocalSearch(nums, pre) // 搜索\n\t\t\ts2 := calculateScore(pre)\n\t\t\tif s2 < s1 { // 若新解优于最优解，直接接受\n\t\t\t\tbestNum = append([]int{}, pre...)\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t} else if math.Exp(-float64(s2-s1)/T) < r.Float64() { // 有概率接受\n\t\t\t\ttmp, s1 = append([]int{}, pre...), s2\n\t\t\t}\n\t\t\titer--\n\t\t}\n\t\tT *= ratio\n\t}\n\t//nums = bestNum  不会生效\n\tfor i := 0; i < len(nums); i++ {\n\t\tnums[i] = bestNum[i]\n\t}\n\tfmt.Println(bestNum)\n}\n\n// 初始化 参数\nfunc initial(cnt, m int) []int {\n\tvar res []int\n\tfor i := 0; i < cnt-1; i++ {\n\t\tnum := r.Intn(m)\n\t\tm -= num\n\t\tres = append(res, num)\n\t}\n\tres = append(res, m)\n\treturn res\n}\n\nfunc findMaxMin(nums []int) (int, int) {\n\tmin, max := 1<<32-1, -1<<32\n\tind1, ind2 := 0, 0\n\n\tfor ind, num := range nums {\n\t\tif num > max {\n\t\t\tmax, ind2 = num, ind\n\t\t}\n\t\tif num < min {\n\t\t\tmin, ind1 = num, ind\n\t\t}\n\t}\n\treturn ind1, ind2\n}\n\nfunc localSearch(nums, tmp []int) {\n\tminInd, maxInd := findMaxMin(tmp)\n\tif nums[minInd] > tmp[minInd] || nums[maxInd] > tmp[maxInd] {\n\t\ttmp = append([]int{}, nums...)\n\t\treturn\n\t}\n\tif tmp[maxInd] > nums[maxInd] { // 防止r.Intn() 报错\n\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])\n\t\ttmp[minInd] += m\n\t\ttmp[maxInd] -= m\n\t}\n}\n\nfunc calculateSum(nums []int) int {\n\tsum := 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tsum += nums[i]\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tnums := []int{1, 200, 3, 4, 50}\n\tm := 200\n\tsum := m + calculateSum(nums)\n\tfmt.Println(nums, sum)\n\n\tdispatch(nums, m)\n\tfmt.Println(nums, calculateSum(nums))\n}\n\n-------------------\n[1 200 3 4 50] 458  初始值\n[75 272 16 28 67]\n[75 201 55 60 67]\n[75 201 55 60 67] 458 最终分配结果\n\n```\n\n\n\n### todo\n\n1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。\n\n2、搜索方式也可以更丰富些。\n","slug":"资源均分","published":1,"updated":"2021-06-04T15:03:06.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxya11em000p9qh2gj0mg9yc","content":"<h2 id=\"资源均分\">资源均分</h2>\n<h2 id=\"背景\">背景</h2>\n<p>  这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。</p>\n<h2 id=\"题目\">题目</h2>\n<p>  假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，<strong>让整体的石油分布看上去比较均衡</strong>，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。</p>\n<span id=\"more\"></span>\n<p>  这里有两点需要注意，</p>\n<p>1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。</p>\n<p>2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。</p>\n<p>  这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。</p>\n<p>我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然&gt;0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。</p>\n<p>第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油&gt;=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。</p>\n<h3 id=\"score如何定义\">score如何定义</h3>\n<p>  此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。</p>\n<h3 id=\"算法如何设计\">算法如何设计</h3>\n<p>  我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> r = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-comment\">// 用于搜索</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(num <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> -num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> num<br>&#125;<br><br><span class=\"hljs-comment\">// 计算score</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateScore</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum, res := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums); j++ &#123;<br>\t\t\tres += abs(nums[j] - nums[i])<br>\t\t&#125;<br>\t&#125;<br>\tsum /= <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tres += abs(sum - nums[i])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dispatch</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>, m <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tT, minT, ratio := <span class=\"hljs-number\">100.0</span>, <span class=\"hljs-number\">0.0001</span>, <span class=\"hljs-number\">0.99</span> <span class=\"hljs-comment\">// 初始化最高温度，最低温度，降温速率</span><br><br>\ttmp := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\tfix := initial(<span class=\"hljs-built_in\">len</span>(nums), m) <span class=\"hljs-comment\">// 将m分配完成</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\ttmp[i] += fix[i]<br>\t&#125;<br>\ts1 := calculateScore(tmp)          <span class=\"hljs-comment\">// 计算score</span><br>\tbestNum := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...) <span class=\"hljs-comment\">// 存储最优解</span><br>\tfmt.Println(bestNum)<br><br>\t<span class=\"hljs-keyword\">for</span> T &gt; minT &#123;<br>\t\titer := <span class=\"hljs-number\">500</span><br>\t\t<span class=\"hljs-keyword\">for</span> iter &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tpre := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...)<br><br>\t\t\tlocalSearch(nums, pre) <span class=\"hljs-comment\">// 搜索</span><br>\t\t\ts2 := calculateScore(pre)<br>\t\t\t<span class=\"hljs-keyword\">if</span> s2 &lt; s1 &#123; <span class=\"hljs-comment\">// 若新解优于最优解，直接接受</span><br>\t\t\t\tbestNum = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...)<br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> math.Exp(-<span class=\"hljs-keyword\">float64</span>(s2-s1)/T) &lt; r.Float64() &#123; <span class=\"hljs-comment\">// 有概率接受</span><br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125;<br>\t\t\titer--<br>\t\t&#125;<br>\t\tT *= ratio<br>\t&#125;<br>\t<span class=\"hljs-comment\">//nums = bestNum  不会生效</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tnums[i] = bestNum[i]<br>\t&#125;<br>\tfmt.Println(bestNum)<br>&#125;<br><br><span class=\"hljs-comment\">// 初始化 参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initial</span><span class=\"hljs-params\">(cnt, m <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; cnt<span class=\"hljs-number\">-1</span>; i++ &#123;<br>\t\tnum := r.Intn(m)<br>\t\tm -= num<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, num)<br>\t&#125;<br>\tres = <span class=\"hljs-built_in\">append</span>(res, m)<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMaxMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tmin, max := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">32</span><span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&lt;&lt;<span class=\"hljs-number\">32</span><br>\tind1, ind2 := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br><br>\t<span class=\"hljs-keyword\">for</span> ind, num := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> num &gt; max &#123;<br>\t\t\tmax, ind2 = num, ind<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> num &lt; min &#123;<br>\t\t\tmin, ind1 = num, ind<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> ind1, ind2<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">localSearch</span><span class=\"hljs-params\">(nums, tmp []<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tminInd, maxInd := findMaxMin(tmp)<br>\t<span class=\"hljs-keyword\">if</span> nums[minInd] &gt; tmp[minInd] || nums[maxInd] &gt; tmp[maxInd] &#123;<br>\t\ttmp = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> tmp[maxInd] &gt; nums[maxInd] &#123; <span class=\"hljs-comment\">// 防止r.Intn() 报错</span><br>\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])<br>\t\ttmp[minInd] += m<br>\t\ttmp[maxInd] -= m<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> sum<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnums := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">50</span>&#125;<br>\tm := <span class=\"hljs-number\">200</span><br>\tsum := m + calculateSum(nums)<br>\tfmt.Println(nums, sum)<br><br>\tdispatch(nums, m)<br>\tfmt.Println(nums, calculateSum(nums))<br>&#125;<br><br>-------------------<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">50</span>] <span class=\"hljs-number\">458</span>  初始值<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">272</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>] <span class=\"hljs-number\">458</span> 最终分配结果<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"todo\">todo</h3>\n<p>1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。</p>\n<p>2、搜索方式也可以更丰富些。</p>\n","site":{"data":{}},"wordcount":3419,"excerpt":"<h2 id=\"资源均分\">资源均分</h2>\n<h2 id=\"背景\">背景</h2>\n<p>  这道题目说实话我目前还不知道最优或者标准的做法是什么，它不像是一些标准的dp、树啊之类的问题。</p>\n<h2 id=\"题目\">题目</h2>\n<p>  假设在中东各个国家都有一定的石油库存，每个国家的库存可能不一样，现在你作为掌管石油的老大，你手中有M吨石油，如何分配石油给这些国家，<strong>让整体的石油分布看上去比较均衡</strong>，你可以分配手中的M吨石油，但是不能在各个国家之间调拨石油。你分配的越好，越不会引起战争。</p>","more":"<p>  这里有两点需要注意，</p>\n<p>1、整体的分布比较均衡，并没有说具体的衡量标准是什么，如何定义均衡需要自己思考。</p>\n<p>2、各个国家之间的石油不能相互调拨，你只能分配手中的M吨石油。</p>\n<p>  这里的看上去均衡，并不是一定要求大家的石油都一样，而是让国家之间的石油分布差异不是很大，若能完全均衡当然是最好。</p>\n<p>我的第一个思路是找到最大的那个国家的石油n，然后计算其它国家与的石油与n的差值，然后从m中分配出一部分石油来弥补这个差值。若最后m依然&gt;0，然后将这部分石油再均分即可。可是发现这个做法有很多边界case是不满足的，当最多的石油与最少的石油差值大于m时，其它国家完全没有分配，这未必是一种均衡方式。</p>\n<p>第二个思路是采用运筹的方式来解决，因为可以动态的去搜索石油的分布，根据我们定义的score来衡量是否均衡，是否接受当前的搜索结果。同时也可以根据我们最大与最小的差值来分配两者之间的石油（此处分配是保证每个国家的石油&gt;=最初的状态，所以不属于国家之间的调拨），让最大与最小的差值不断缩小，趋向于均衡。</p>\n<h3 id=\"score如何定义\">score如何定义</h3>\n<p>  此处我是定义了两部分score，第一部分是任意两个国家之间的石油差值，第二部分是每个国家的石油与平均值的差值。两个score相加作为最终的score，整体的score越小表示分布的相对均衡。</p>\n<h3 id=\"算法如何设计\">算法如何设计</h3>\n<p>  我考虑采用模拟退火来作为是否接受新解，若新解满足接受条件，则接受新解，若优于当前最优解，则更新最优解。温度降到最小值之后则停止搜索，返回结果。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs golang\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;math&quot;</span><br>\t<span class=\"hljs-string\">&quot;math/rand&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> r = rand.New(rand.NewSource(<span class=\"hljs-number\">0</span>)) <span class=\"hljs-comment\">// 用于搜索</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">(num <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> -num<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> num<br>&#125;<br><br><span class=\"hljs-comment\">// 计算score</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateScore</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum, res := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(nums); j++ &#123;<br>\t\t\tres += abs(nums[j] - nums[i])<br>\t\t&#125;<br>\t&#125;<br>\tsum /= <span class=\"hljs-built_in\">len</span>(nums)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tres += abs(sum - nums[i])<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">dispatch</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>, m <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tT, minT, ratio := <span class=\"hljs-number\">100.0</span>, <span class=\"hljs-number\">0.0001</span>, <span class=\"hljs-number\">0.99</span> <span class=\"hljs-comment\">// 初始化最高温度，最低温度，降温速率</span><br><br>\ttmp := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\tfix := initial(<span class=\"hljs-built_in\">len</span>(nums), m) <span class=\"hljs-comment\">// 将m分配完成</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\ttmp[i] += fix[i]<br>\t&#125;<br>\ts1 := calculateScore(tmp)          <span class=\"hljs-comment\">// 计算score</span><br>\tbestNum := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...) <span class=\"hljs-comment\">// 存储最优解</span><br>\tfmt.Println(bestNum)<br><br>\t<span class=\"hljs-keyword\">for</span> T &gt; minT &#123;<br>\t\titer := <span class=\"hljs-number\">500</span><br>\t\t<span class=\"hljs-keyword\">for</span> iter &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\t\tpre := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, tmp...)<br><br>\t\t\tlocalSearch(nums, pre) <span class=\"hljs-comment\">// 搜索</span><br>\t\t\ts2 := calculateScore(pre)<br>\t\t\t<span class=\"hljs-keyword\">if</span> s2 &lt; s1 &#123; <span class=\"hljs-comment\">// 若新解优于最优解，直接接受</span><br>\t\t\t\tbestNum = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...)<br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> math.Exp(-<span class=\"hljs-keyword\">float64</span>(s2-s1)/T) &lt; r.Float64() &#123; <span class=\"hljs-comment\">// 有概率接受</span><br>\t\t\t\ttmp, s1 = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, pre...), s2<br>\t\t\t&#125;<br>\t\t\titer--<br>\t\t&#125;<br>\t\tT *= ratio<br>\t&#125;<br>\t<span class=\"hljs-comment\">//nums = bestNum  不会生效</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tnums[i] = bestNum[i]<br>\t&#125;<br>\tfmt.Println(bestNum)<br>&#125;<br><br><span class=\"hljs-comment\">// 初始化 参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initial</span><span class=\"hljs-params\">(cnt, m <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> res []<span class=\"hljs-keyword\">int</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; cnt<span class=\"hljs-number\">-1</span>; i++ &#123;<br>\t\tnum := r.Intn(m)<br>\t\tm -= num<br>\t\tres = <span class=\"hljs-built_in\">append</span>(res, num)<br>\t&#125;<br>\tres = <span class=\"hljs-built_in\">append</span>(res, m)<br>\t<span class=\"hljs-keyword\">return</span> res<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findMaxMin</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tmin, max := <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">32</span><span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>&lt;&lt;<span class=\"hljs-number\">32</span><br>\tind1, ind2 := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br><br>\t<span class=\"hljs-keyword\">for</span> ind, num := <span class=\"hljs-keyword\">range</span> nums &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> num &gt; max &#123;<br>\t\t\tmax, ind2 = num, ind<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> num &lt; min &#123;<br>\t\t\tmin, ind1 = num, ind<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> ind1, ind2<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">localSearch</span><span class=\"hljs-params\">(nums, tmp []<span class=\"hljs-keyword\">int</span>)</span></span> &#123;<br>\tminInd, maxInd := findMaxMin(tmp)<br>\t<span class=\"hljs-keyword\">if</span> nums[minInd] &gt; tmp[minInd] || nums[maxInd] &gt; tmp[maxInd] &#123;<br>\t\ttmp = <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">int</span>&#123;&#125;, nums...)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> tmp[maxInd] &gt; nums[maxInd] &#123; <span class=\"hljs-comment\">// 防止r.Intn() 报错</span><br>\t\tm := r.Intn(tmp[maxInd] - nums[maxInd])<br>\t\ttmp[minInd] += m<br>\t\ttmp[maxInd] -= m<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateSum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> &#123;<br>\tsum := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nums); i++ &#123;<br>\t\tsum += nums[i]<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> sum<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tnums := []<span class=\"hljs-keyword\">int</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">50</span>&#125;<br>\tm := <span class=\"hljs-number\">200</span><br>\tsum := m + calculateSum(nums)<br>\tfmt.Println(nums, sum)<br><br>\tdispatch(nums, m)<br>\tfmt.Println(nums, calculateSum(nums))<br>&#125;<br><br>-------------------<br>[<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">50</span>] <span class=\"hljs-number\">458</span>  初始值<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">272</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>]<br>[<span class=\"hljs-number\">75</span> <span class=\"hljs-number\">201</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-number\">60</span> <span class=\"hljs-number\">67</span>] <span class=\"hljs-number\">458</span> 最终分配结果<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"todo\">todo</h3>\n<p>1、score的定义未必合理，可以考虑再使用更优的score，比如每个国家的涨幅。。。</p>\n<p>2、搜索方式也可以更丰富些。</p>"},{"title":"决策树","date":"2022-01-03T14:53:43.000Z","math":true,"_content":"\n## 决策树\n\n### 决策树三要素\n\n1. 特征选择\n\n2. 决策树生成\n\n3. 决策树剪枝\n\n   1. 预剪枝\n\n      限制树的深度，叶子节点个数，叶子节点样本数，信息增益等\n\n   2. 后剪枝\n\n      正则化\n\n### ID3\n\n&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。\n\n#### 信息增益\n\n&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中**“信息量”**的 变化，通常选择信息增益最大的特征作为当前划分的依据。\n\n#### 信息熵\n\n&emsp;&emsp;如何衡量**“信息量”**呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：\n\n$$H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})$$\n\n&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。\n\n![](/images/entropy.png)\n\n&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。\n\n#### 条件熵\n\n&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，\n\n$$H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})$$\n\n&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$...$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。\n\n&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是$$g(D,A)=H(D)-H(D|A)$$。\n\n&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。\n\n#### ID3算法的缺点：\n\n1. ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。\n2. ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3*log(1/3)*3$ > $-1/2*log(1/2)*2$。\n3. ID3对于缺失值也无法出来，而且更容易过拟合。\n\n#### 为什么ID3倾向于特征属性值偏多的特征？\n\n&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小\n通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。\n\n[1]: https://www.cnblogs.com/wj-1314/p/9428494.html\n\n","source":"_posts/决策树.md","raw":"---\ntitle: 决策树\ndate: 2022-01-03 22:53:43\nmath: true\ncategories: 机器学习\ntags: 树模型\n---\n\n## 决策树\n\n### 决策树三要素\n\n1. 特征选择\n\n2. 决策树生成\n\n3. 决策树剪枝\n\n   1. 预剪枝\n\n      限制树的深度，叶子节点个数，叶子节点样本数，信息增益等\n\n   2. 后剪枝\n\n      正则化\n\n### ID3\n\n&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。\n\n#### 信息增益\n\n&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中**“信息量”**的 变化，通常选择信息增益最大的特征作为当前划分的依据。\n\n#### 信息熵\n\n&emsp;&emsp;如何衡量**“信息量”**呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：\n\n$$H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})$$\n\n&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。\n\n![](/images/entropy.png)\n\n&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。\n\n#### 条件熵\n\n&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，\n\n$$H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})$$\n\n&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$...$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。\n\n&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是$$g(D,A)=H(D)-H(D|A)$$。\n\n&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。\n\n#### ID3算法的缺点：\n\n1. ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。\n2. ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3*log(1/3)*3$ > $-1/2*log(1/2)*2$。\n3. ID3对于缺失值也无法出来，而且更容易过拟合。\n\n#### 为什么ID3倾向于特征属性值偏多的特征？\n\n&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小\n通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。\n\n[1]: https://www.cnblogs.com/wj-1314/p/9428494.html\n\n","slug":"决策树","published":1,"updated":"2022-01-09T14:05:41.839Z","_id":"cky7bly7u0000gth24bet34ss","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><h3 id=\"决策树三要素\"><a href=\"#决策树三要素\" class=\"headerlink\" title=\"决策树三要素\"></a>决策树三要素</h3><ol>\n<li><p>特征选择</p>\n</li>\n<li><p>决策树生成</p>\n</li>\n<li><p>决策树剪枝</p>\n<ol>\n<li><p>预剪枝</p>\n<p>限制树的深度，叶子节点个数，叶子节点样本数，信息增益等</p>\n</li>\n<li><p>后剪枝</p>\n<p>正则化</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ID3\"><a href=\"#ID3\" class=\"headerlink\" title=\"ID3\"></a>ID3</h3><p>&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。</p>\n<h4 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h4><p>&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中<strong>“信息量”</strong>的 变化，通常选择信息增益最大的特征作为当前划分的依据。</p>\n<h4 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h4><p>&emsp;&emsp;如何衡量<strong>“信息量”</strong>呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：</p>\n<script type=\"math/tex; mode=display\">H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})</script><p>&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。</p>\n<p><img src=\"/images/entropy.png\" alt=\"\"></p>\n<p>&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。</p>\n<h4 id=\"条件熵\"><a href=\"#条件熵\" class=\"headerlink\" title=\"条件熵\"></a>条件熵</h4><p>&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，</p>\n<script type=\"math/tex; mode=display\">H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})</script><p>&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$…$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。</p>\n<p>&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是<script type=\"math/tex\">g(D,A)=H(D)-H(D|A)</script>。</p>\n<p>&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。</p>\n<h4 id=\"ID3算法的缺点：\"><a href=\"#ID3算法的缺点：\" class=\"headerlink\" title=\"ID3算法的缺点：\"></a>ID3算法的缺点：</h4><ol>\n<li>ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。</li>\n<li>ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3<em>log(1/3)</em>3$ &gt; $-1/2<em>log(1/2)</em>2$。</li>\n<li>ID3对于缺失值也无法出来，而且更容易过拟合。</li>\n</ol>\n<h4 id=\"为什么ID3倾向于特征属性值偏多的特征？\"><a href=\"#为什么ID3倾向于特征属性值偏多的特征？\" class=\"headerlink\" title=\"为什么ID3倾向于特征属性值偏多的特征？\"></a>为什么ID3倾向于特征属性值偏多的特征？</h4><p>&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小<br>通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。</p>\n","site":{"data":{}},"wordcount":1212,"excerpt":"","more":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><h3 id=\"决策树三要素\"><a href=\"#决策树三要素\" class=\"headerlink\" title=\"决策树三要素\"></a>决策树三要素</h3><ol>\n<li><p>特征选择</p>\n</li>\n<li><p>决策树生成</p>\n</li>\n<li><p>决策树剪枝</p>\n<ol>\n<li><p>预剪枝</p>\n<p>限制树的深度，叶子节点个数，叶子节点样本数，信息增益等</p>\n</li>\n<li><p>后剪枝</p>\n<p>正则化</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ID3\"><a href=\"#ID3\" class=\"headerlink\" title=\"ID3\"></a>ID3</h3><p>&emsp;&emsp;ID3是根据信息增益来选择特征，将数据划分成多份，构成决策树。</p>\n<h4 id=\"信息增益\"><a href=\"#信息增益\" class=\"headerlink\" title=\"信息增益\"></a>信息增益</h4><p>&emsp;&emsp;信息增益是什么呢？划分数据前后 数据中<strong>“信息量”</strong>的 变化，通常选择信息增益最大的特征作为当前划分的依据。</p>\n<h4 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h4><p>&emsp;&emsp;如何衡量<strong>“信息量”</strong>呢？这里引入熵的概念，熵表示信息不确定性的程度，熵越大，不确定性越强，熵越小，不确定性越小(越确定)。熵的公式如下：</p>\n<script type=\"math/tex; mode=display\">H(X)=-sum_{i=1}^{i=n}p_{i}*log(p_{i})</script><p>&emsp;&emsp;n样本是分类的个数，$p_{i}$表示样本分类为类别i的概率。熵的大小是和每个类别的概率有关的。</p>\n<p><img src=\"/images/entropy.png\" alt=\"\"></p>\n<p>&emsp;&emsp;熵和概率的关系如上图所示：随着概率从小变大，熵的值先增大道最大值然后降到最小值，当概率值$p=0.5$时，熵值最大，说明不确定性越大，当概率值$p=0.9$时，熵值最小，不确定性越小。</p>\n<h4 id=\"条件熵\"><a href=\"#条件熵\" class=\"headerlink\" title=\"条件熵\"></a>条件熵</h4><p>&emsp;&emsp;对于条件熵，则是当X的取值确定之后，在这个条件下的熵值。即当我们确定了样本某特征X的取值之后，即在这个条件下的熵值，</p>\n<script type=\"math/tex; mode=display\">H(Y|X)=sum_{i=1}^{i=n}p_{i}*H(Y|X=x_{i})</script><p>&emsp;&emsp;举个例子我们有一波样本D，共有k个类别$C_{k}$，它的熵为H(D)，某一特征A有n个取值，依据特征A可以将数据集划分为n个子集，分别为$D_{1}$，$D_{2}$…$D_{n}$，首先计算每个子集的信息熵H(D|A)，然后计算每个子集的样本占总样本的比例$p_{i}$，然后将每个子集的信息熵*比例 加起来，就是特征A的条件熵。</p>\n<p>&emsp;&emsp;所以回到ID3算法上，特征A对数据集D的信息增益就是<script type=\"math/tex\">g(D,A)=H(D)-H(D|A)</script>。</p>\n<p>&emsp;&emsp;在生成树的过程中，每次分裂时选择特征就是依据信息增益来选择最佳分裂点。选好最佳分裂点之后，依据特征取值将样本分成n(特征A取值的个数)叉树，然后在每个子树下面继续进行分裂，直到树生成完成。</p>\n<h4 id=\"ID3算法的缺点：\"><a href=\"#ID3算法的缺点：\" class=\"headerlink\" title=\"ID3算法的缺点：\"></a>ID3算法的缺点：</h4><ol>\n<li>ID3没有考虑连续值，对于特征取值为连续值的情况无法适用。</li>\n<li>ID3选用信息增益作为分裂的依据，会更倾向于特征属性值多的作为分裂节点，举个例子：$-1/3<em>log(1/3)</em>3$ &gt; $-1/2<em>log(1/2)</em>2$。</li>\n<li>ID3对于缺失值也无法出来，而且更容易过拟合。</li>\n</ol>\n<h4 id=\"为什么ID3倾向于特征属性值偏多的特征？\"><a href=\"#为什么ID3倾向于特征属性值偏多的特征？\" class=\"headerlink\" title=\"为什么ID3倾向于特征属性值偏多的特征？\"></a>为什么ID3倾向于特征属性值偏多的特征？</h4><p>&emsp;&emsp;信息增益是整个数据集的经验熵与特征a对整个数据集的经验条件熵的差值，信息增益越大即经验条件熵越小<br>通俗的来讲,信息增益反映的给定一个条件以后不确定性减少的程度(特征A使得数据集的分类不确定性减少的程度) , 肯定是是分得越细的数据集确定性更高,也就是条件熵越小,信息增益越大。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxya11e600019qh25qwxhz48","category_id":"ckxya11ea00049qh21xnwbseo","_id":"ckxya11eg000e9qh28f1wcenu"},{"post_id":"ckxya11ef000c9qh22ylk3qrm","category_id":"ckxya11ea00049qh21xnwbseo","_id":"ckxya11ek000k9qh216vbajam"},{"post_id":"ckxya11e900039qh20kkx8m7s","category_id":"ckxya11ee00099qh298cs9plw","_id":"ckxya11el000n9qh2dpipdhdc"},{"post_id":"ckxya11eh000g9qh229jh3oka","category_id":"ckxya11ea00049qh21xnwbseo","_id":"ckxya11en000q9qh246an4qaj"},{"post_id":"ckxya11ec00069qh2b6yp8zhw","category_id":"ckxya11eh000f9qh2aqd63dot","_id":"ckxya11en000t9qh2axtu3kcb"},{"post_id":"ckxya11el000m9qh2b5jshpkc","category_id":"ckxya11ea00049qh21xnwbseo","_id":"ckxya11eo000v9qh28icn5xj0"},{"post_id":"ckxya11eg000d9qh2h4zp9fge","category_id":"ckxya11ek000l9qh25ko4ecip","_id":"ckxya11eo000x9qh20m0w7w4o"},{"post_id":"ckxya11em000p9qh2gj0mg9yc","category_id":"ckxya11ea00049qh21xnwbseo","_id":"ckxya11eo000z9qh2dfkw1bla"},{"post_id":"ckxya11ej000j9qh2al160bu1","category_id":"ckxya11en000s9qh2bnkc1rz4","_id":"ckxya11ep00119qh2b9n6fxu5"},{"post_id":"cky7bly7u0000gth24bet34ss","category_id":"cky7bly800001gth2d8m68tdr","_id":"cky7bly840004gth22dajayu1"}],"PostTag":[{"post_id":"ckxya11e600019qh25qwxhz48","tag_id":"ckxya11eb00059qh2dk04grtq","_id":"ckxya11ef000b9qh2g31odhb4"},{"post_id":"ckxya11ed00079qh24o7u15ih","tag_id":"ckxya11ef000a9qh2ebzoackd","_id":"ckxya11ej000i9qh2g0n58d12"},{"post_id":"ckxya11ef000c9qh22ylk3qrm","tag_id":"ckxya11ei000h9qh2axup4nwq","_id":"ckxya11en000r9qh258zk1r8t"},{"post_id":"ckxya11eg000d9qh2h4zp9fge","tag_id":"ckxya11el000o9qh2d11lflzr","_id":"ckxya11eo000w9qh22epbfw73"},{"post_id":"ckxya11eh000g9qh229jh3oka","tag_id":"ckxya11en000u9qh26nox0aqa","_id":"ckxya11eo00109qh29ktq45za"},{"post_id":"ckxya11ej000j9qh2al160bu1","tag_id":"ckxya11eo000y9qh2b93t3le2","_id":"ckxya11ep00139qh292m989be"},{"post_id":"ckxya11el000m9qh2b5jshpkc","tag_id":"ckxya11ep00129qh2bxf10xf8","_id":"ckxya11ep00159qh2dfh98ryh"},{"post_id":"ckxya11em000p9qh2gj0mg9yc","tag_id":"ckxya11ep00149qh22acr5y1x","_id":"ckxya11ep00169qh22fvq0wn6"},{"post_id":"cky7bly7u0000gth24bet34ss","tag_id":"cky7bly830002gth22tv20gt0","_id":"cky7bly840003gth29nrjcn2y"}],"Tag":[{"name":"floyd","_id":"ckxya11eb00059qh2dk04grtq"},{"name":"prim","_id":"ckxya11ef000a9qh2ebzoackd"},{"name":"dijkstra","_id":"ckxya11ei000h9qh2axup4nwq"},{"name":"经验总结","_id":"ckxya11el000o9qh2d11lflzr"},{"name":"late acceptance","_id":"ckxya11en000u9qh26nox0aqa"},{"name":"alogithm","_id":"ckxya11eo000y9qh2b93t3le2"},{"name":"模拟退火","_id":"ckxya11ep00129qh2bxf10xf8"},{"name":"资源均分","_id":"ckxya11ep00149qh22acr5y1x"},{"name":"树模型","_id":"cky7bly830002gth22tv20gt0"}]}}